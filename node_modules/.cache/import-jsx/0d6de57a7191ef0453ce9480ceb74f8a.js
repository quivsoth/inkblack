'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  const [playingDeck, setDeck] = React.useState(MultiShuffle()); // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  React.useEffect(() => {
    const timer = setInterval(() => {
      // setDeck([
      console.log('.'); // 	...playingDeck,
      // 	...deck
      // ]);

      var array = [...playingDeck]; // make a separate copy of the array

      array.pop();
      setDeck(array);
      setDeck(array); // var index = array.indexOf(array.length - 1);
      // if (index !== -1) {
      // 	array.splice(index, 1);
      // 	this.setState(array);
      // }

      console.log(array.length);
    }, 6000);
    return () => {
      clearInterval(timer);
    };
  }, []);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Card Count: ", playingDeck.length, " "));
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkFwcCIsInBsYXlpbmdEZWNrIiwic2V0RGVjayIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidGltZXIiLCJzZXRJbnRlcnZhbCIsImNvbnNvbGUiLCJsb2ciLCJhcnJheSIsInBvcCIsImxlbmd0aCIsImNsZWFySW50ZXJ2YWwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQSxNQUFYO0FBQW1CQyxFQUFBQSxJQUFuQjtBQUF5QkMsRUFBQUEsS0FBekI7QUFBZ0NDLEVBQUFBO0FBQWhDLElBQXVDTCxPQUFPLENBQUMsS0FBRCxDQUFwRCxDLENBQ0E7OztBQUNBLE1BQU1NLFlBQVksR0FBR04sT0FBTyxDQUFDLFdBQUQsQ0FBNUI7O0FBQ0EsTUFBTU8sSUFBSSxHQUFHUCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFJQSxNQUFNUSxHQUFHLEdBQUcsTUFBTTtBQUNqQixRQUFNLENBQUNDLFdBQUQsRUFBY0MsT0FBZCxJQUF5QlgsS0FBSyxDQUFDWSxRQUFOLENBQWVMLFlBQVksRUFBM0IsQ0FBL0IsQ0FEaUIsQ0FFakI7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBUCxFQUFBQSxLQUFLLENBQUNhLFNBQU4sQ0FBZ0IsTUFBTTtBQUNyQixVQUFNQyxLQUFLLEdBQUdDLFdBQVcsQ0FBQyxNQUFNO0FBQy9CO0FBQ0NDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLEdBQVosRUFGOEIsQ0FHOUI7QUFDQTtBQUNBOztBQUVBLFVBQUlDLEtBQUssR0FBRyxDQUFDLEdBQUdSLFdBQUosQ0FBWixDQVA4QixDQU9BOztBQUM5QlEsTUFBQUEsS0FBSyxDQUFDQyxHQUFOO0FBQ0FSLE1BQUFBLE9BQU8sQ0FBQ08sS0FBRCxDQUFQO0FBQ0FQLE1BQUFBLE9BQU8sQ0FBQ08sS0FBRCxDQUFQLENBVjhCLENBZTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0FGLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxLQUFLLENBQUNFLE1BQWxCO0FBQ0EsS0FyQnVCLEVBc0J2QixJQXRCdUIsQ0FBekI7QUF1QkEsV0FBTyxNQUFNO0FBQ1pDLE1BQUFBLGFBQWEsQ0FBQ1AsS0FBRCxDQUFiO0FBQ0EsS0FGRDtBQUdBLEdBM0JELEVBMkJHLEVBM0JIO0FBNEJBLHNCQUNDLG9CQUFDLEdBQUQscUJBQ0Msb0JBQUMsSUFBRCx3QkFBbUJKLFdBQVcsQ0FBQ1UsTUFBL0IsTUFERCxDQUREO0FBTUEsQ0E3Q0Q7O0FBK0NBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUJkLEdBQWpCLEMsQ0FNQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3VzZUlucHV0LCByZW5kZXIsIFRleHQsIENvbG9yLCBCb3h9ID0gcmVxdWlyZSgnaW5rJyk7XG4vLyBjb25zdCBUZXh0SW5wdXQgPSByZXF1aXJlKCdpbmstdGV4dC1pbnB1dCcpLmRlZmF1bHQ7XG5jb25zdCBNdWx0aVNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUnKTtcbmNvbnN0IERlY2sgPSByZXF1aXJlKCcuL2RlY2snKTtcblxuXG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcblx0Y29uc3QgW3BsYXlpbmdEZWNrLCBzZXREZWNrXSA9IFJlYWN0LnVzZVN0YXRlKE11bHRpU2h1ZmZsZSgpKTtcblx0Ly8gY29uc3QgW3BsYXllckhhbmQsIHNldFBsYXllcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdC8vIGNvbnN0IFtkZWFsZXJIYW5kLCBzZXREZWFsZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXG5cblx0Ly8gc2V0RGVjayhbXG5cdC8vIFx0Li4ucGxheWluZ0RlY2ssXG5cdC8vIFx0Li4uZGVja1xuXHQvLyBdKTtcblxuXHRSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0Ly8gc2V0RGVjayhbXG5cdFx0XHRcdGNvbnNvbGUubG9nKCcuJyk7XG5cdFx0XHRcdC8vIFx0Li4ucGxheWluZ0RlY2ssXG5cdFx0XHRcdC8vIFx0Li4uZGVja1xuXHRcdFx0XHQvLyBdKTtcblxuXHRcdFx0XHR2YXIgYXJyYXkgPSBbLi4ucGxheWluZ0RlY2tdOyAvLyBtYWtlIGEgc2VwYXJhdGUgY29weSBvZiB0aGUgYXJyYXlcblx0XHRcdFx0YXJyYXkucG9wKCk7XG5cdFx0XHRcdHNldERlY2soYXJyYXkpO1xuXHRcdFx0XHRzZXREZWNrKGFycmF5KTtcblxuXG5cblxuXHRcdFx0XHQvLyB2YXIgaW5kZXggPSBhcnJheS5pbmRleE9mKGFycmF5Lmxlbmd0aCAtIDEpO1xuXHRcdFx0XHQvLyBpZiAoaW5kZXggIT09IC0xKSB7XG5cdFx0XHRcdC8vIFx0YXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0Ly8gXHR0aGlzLnNldFN0YXRlKGFycmF5KTtcblx0XHRcdFx0Ly8gfVxuXHRcdFx0XHRjb25zb2xlLmxvZyhhcnJheS5sZW5ndGgpO1xuXHRcdFx0fVxuXHRcdFx0LDYwMDApO1xuXHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRjbGVhckludGVydmFsKHRpbWVyKTtcblx0XHR9O1xuXHR9LCBbXSk7XG5cdHJldHVybiAoXG5cdFx0PEJveD5cblx0XHRcdDxUZXh0PkNhcmQgQ291bnQ6IHtwbGF5aW5nRGVjay5sZW5ndGh9IDwvVGV4dD5cblx0XHRcdHsvKiA8VGV4dD5Db3VudDoge2NvdW50fTwvVGV4dD4gKi99XG5cdFx0PC9Cb3g+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcblxuXG5cblxuXG4vLyBpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbi8vIGltcG9ydCB1c2VTZWFyY2ggZnJvbSAnLi9mZXRjaC1pdGVtcyc7XG5cbi8vIGZ1bmN0aW9uIE15UGFyZW50KHsgdGVybSB9KSB7XG4vLyAgIGNvbnN0IGhhbmRsZUNsaWNrID0gdXNlQ2FsbGJhY2soKGl0ZW0pID0+IHtcbi8vICAgICBjb25zb2xlLmxvZygnWW91IGNsaWNrZWQgJywgaXRlbSk7XG4vLyAgIH0sIFt0ZXJtXSk7XG5cbi8vICAgY29uc3QgaXRlbXMgPSB1c2VTZWFyY2godGVybSk7XG5cbi8vICAgcmV0dXJuIChcbi8vICAgICA8TXlCaWdMaXN0XG4vLyAgICAgICBpdGVtcz17aXRlbXN9XG4vLyAgICAgICBoYW5kbGVDbGljaz17aGFuZGxlQ2xpY2t9XG4vLyAgICAgLz5cbi8vICAgKTtcbi8vIH0iXX0=