'use strict';

const React = require('react');

const {
  render,
  Text,
  Color,
  Box
} = require('ink');

const {
  useInput
} = require('ink');

const TextInput = require('ink-text-input').default;

const Shuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // const [playingDeck, setDeck] = React.useState([]);
  const [count, setCount] = React.useState(0); // let deck = Shuffle({Deck}).map(a => ({...a}));
  // let deck2 = Shuffle({Deck}).map(a => ({...a}));
  // let deck3 = Shuffle({Deck}).map(a => ({...a}));
  // let deck4 = Shuffle({Deck}).map(a => ({...a}));
  // let deck5 = Shuffle({Deck}).map(a => ({...a}));
  // let deck6 = Shuffle({Deck}).map(a => ({...a}));
  // deck.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
  // React.useEffect(() => {
  // 	console.log('decker');
  // }, [deck])

  React.useEffect(() => {
    const interval = setInterval(() => {
      setCount(count => count + 1);
    }, 100);
    return () => clearInterval(interval);
  }, []); // setInterval(() => {
  // 	console.log('pp');
  // 	deck.pop();
  // }, 4000);

  setTimeout(() => {
    deck.pop();
  }, 5000); // const shuffleNewDeck = () => {
  // 	//event.preventDefault();
  // 	let deck1 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck2 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck3 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck4 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck5 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck6 = Shuffle({Deck}).map(a => ({...a}));
  // 	deck1.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
  // 	setDeck([
  // 	  ...playingDeck,
  // 	  ...deck1
  // 	]);
  // };

  const deal = person => {
    var card = playingDeck.pop();

    switch (person) {
      case "player":
        setPlayer([...playerHand, card]);
        break;

      case "dealer":
        setDealer([...playerHand, card]);
        break;

      default:
        break;
    }
  }; // React.useEffect(() => {
  //   shuffleNewDeck();
  // }, []);
  // setInterval(() => {
  // 	// deal("player");
  // 	console.log("111");
  // }, 10000);


  const UserInput = () => {
    useInput((input, key) => {
      if (input === 'q') {
        console.log("quitty");
      }

      if (key.leftArrow) {
        // Left arrow key pressed
        console.log("lefty");
      }
    });
    return "";
  };

  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Deck Count: ", deck.length), /*#__PURE__*/React.createElement(Text, null, "Count: ", count), ";");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInJlbmRlciIsIlRleHQiLCJDb2xvciIsIkJveCIsInVzZUlucHV0IiwiVGV4dElucHV0IiwiZGVmYXVsdCIsIlNodWZmbGUiLCJEZWNrIiwiQXBwIiwiY291bnQiLCJzZXRDb3VudCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzZXRUaW1lb3V0IiwiZGVjayIsInBvcCIsImRlYWwiLCJwZXJzb24iLCJjYXJkIiwicGxheWluZ0RlY2siLCJzZXRQbGF5ZXIiLCJwbGF5ZXJIYW5kIiwic2V0RGVhbGVyIiwiVXNlcklucHV0IiwiaW5wdXQiLCJrZXkiLCJjb25zb2xlIiwibG9nIiwibGVmdEFycm93IiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBLE1BQUQ7QUFBU0MsRUFBQUEsSUFBVDtBQUFlQyxFQUFBQSxLQUFmO0FBQXNCQyxFQUFBQTtBQUF0QixJQUE2QkosT0FBTyxDQUFDLEtBQUQsQ0FBMUM7O0FBQ0EsTUFBTTtBQUFDSyxFQUFBQTtBQUFELElBQWFMLE9BQU8sQ0FBQyxLQUFELENBQTFCOztBQUVBLE1BQU1NLFNBQVMsR0FBR04sT0FBTyxDQUFDLGdCQUFELENBQVAsQ0FBMEJPLE9BQTVDOztBQUNBLE1BQU1DLE9BQU8sR0FBR1IsT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBQ0EsTUFBTVMsSUFBSSxHQUFHVCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFFQSxNQUFNVSxHQUFHLEdBQUcsTUFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQmIsS0FBSyxDQUFDYyxRQUFOLENBQWUsQ0FBZixDQUExQixDQUppQixDQU9qQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTs7QUFFQWQsRUFBQUEsS0FBSyxDQUFDZSxTQUFOLENBQWdCLE1BQU07QUFDckIsVUFBTUMsUUFBUSxHQUFHQyxXQUFXLENBQUMsTUFBTTtBQUNqQ0osTUFBQUEsUUFBUSxDQUFDRCxLQUFLLElBQUlBLEtBQUssR0FBRyxDQUFsQixDQUFSO0FBQ0QsS0FGMkIsRUFFekIsR0FGeUIsQ0FBNUI7QUFHQSxXQUFPLE1BQU1NLGFBQWEsQ0FBQ0YsUUFBRCxDQUExQjtBQUNDLEdBTEYsRUFLSSxFQUxKLEVBcEJpQixDQTRCakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUFHLEVBQUFBLFVBQVUsQ0FBQyxNQUFNO0FBQ2hCQyxJQUFBQSxJQUFJLENBQUNDLEdBQUw7QUFDQSxHQUZTLEVBRVAsSUFGTyxDQUFWLENBakNpQixDQXFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFNQyxJQUFJLEdBQUlDLE1BQUQsSUFBWTtBQUN4QixRQUFJQyxJQUFJLEdBQUdDLFdBQVcsQ0FBQ0osR0FBWixFQUFYOztBQUNBLFlBQVFFLE1BQVI7QUFDQyxXQUFLLFFBQUw7QUFDQ0csUUFBQUEsU0FBUyxDQUFDLENBQUMsR0FBR0MsVUFBSixFQUFlSCxJQUFmLENBQUQsQ0FBVDtBQUNBOztBQUNELFdBQUssUUFBTDtBQUNDSSxRQUFBQSxTQUFTLENBQUMsQ0FBQyxHQUFHRCxVQUFKLEVBQWVILElBQWYsQ0FBRCxDQUFUO0FBQ0E7O0FBQ0Q7QUFDQztBQVJGO0FBVUEsR0FaRCxDQXJEaUIsQ0FtRWpCO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQSxRQUFNSyxTQUFTLEdBQUcsTUFBTTtBQUN2QnZCLElBQUFBLFFBQVEsQ0FBQyxDQUFDd0IsS0FBRCxFQUFRQyxHQUFSLEtBQWdCO0FBQ3hCLFVBQUlELEtBQUssS0FBSyxHQUFkLEVBQW1CO0FBQ2xCRSxRQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxRQUFaO0FBQ0E7O0FBRUQsVUFBSUYsR0FBRyxDQUFDRyxTQUFSLEVBQW1CO0FBQ2xCO0FBQ0FGLFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLE9BQVo7QUFDQTtBQUNELEtBVE8sQ0FBUjtBQVdBLFdBQU8sRUFBUDtBQUNBLEdBYkQ7O0FBZ0JDLHNCQUNFLG9CQUFDLEdBQUQscUJBQ0Ysb0JBQUMsSUFBRCx3QkFBbUJiLElBQUksQ0FBQ2UsTUFBeEIsQ0FERSxlQUVGLG9CQUFDLElBQUQsbUJBQWN2QixLQUFkLENBRkUsTUFERjtBQU1ELENBbEdEOztBQW9HQXdCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjFCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3JlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IHt1c2VJbnB1dH0gPSByZXF1aXJlKCdpbmsnKTtcblxuY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZSgnaW5rLXRleHQtaW5wdXQnKS5kZWZhdWx0O1xuY29uc3QgU2h1ZmZsZSA9IHJlcXVpcmUoJy4vc2h1ZmZsZScpO1xuY29uc3QgRGVjayA9IHJlcXVpcmUoJy4vZGVjaycpO1xuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG5cdC8vIGNvbnN0IFtwbGF5ZXJIYW5kLCBzZXRQbGF5ZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXHQvLyBjb25zdCBbZGVhbGVySGFuZCwgc2V0RGVhbGVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Ly8gY29uc3QgW3BsYXlpbmdEZWNrLCBzZXREZWNrXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Y29uc3QgW2NvdW50LCBzZXRDb3VudF0gPSBSZWFjdC51c2VTdGF0ZSgwKTtcblxuXG5cdC8vIGxldCBkZWNrID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0Ly8gbGV0IGRlY2syID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0Ly8gbGV0IGRlY2szID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0Ly8gbGV0IGRlY2s0ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0Ly8gbGV0IGRlY2s1ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0Ly8gbGV0IGRlY2s2ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblxuXHQvLyBkZWNrLnB1c2goLi4uZGVjazIsIC4uLmRlY2szLCAuLi5kZWNrNCwgLi4uZGVjazUsIC4uLmRlY2s2KTtcblxuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnNvbGUubG9nKCdkZWNrZXInKTtcblx0Ly8gfSwgW2RlY2tdKVxuXG5cdFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0Y29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0ICBzZXRDb3VudChjb3VudCA9PiBjb3VudCArIDEpO1xuXHRcdH0sIDEwMCk7XG5cdFx0cmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuXHRcdH0sIFtdKTtcblxuXG5cdC8vIHNldEludGVydmFsKCgpID0+IHtcblx0Ly8gXHRjb25zb2xlLmxvZygncHAnKTtcblx0Ly8gXHRkZWNrLnBvcCgpO1xuXHQvLyB9LCA0MDAwKTtcblxuXHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRkZWNrLnBvcCgpXG5cdH0sIDUwMDApO1xuXHRcblx0Ly8gY29uc3Qgc2h1ZmZsZU5ld0RlY2sgPSAoKSA9PiB7XG5cdC8vIFx0Ly9ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHQvLyBcdGxldCBkZWNrMSA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdC8vIFx0bGV0IGRlY2syID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0Ly8gXHRsZXQgZGVjazMgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHQvLyBcdGxldCBkZWNrNCA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdC8vIFx0bGV0IGRlY2s1ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0Ly8gXHRsZXQgZGVjazYgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXG5cdC8vIFx0ZGVjazEucHVzaCguLi5kZWNrMiwgLi4uZGVjazMsIC4uLmRlY2s0LCAuLi5kZWNrNSwgLi4uZGVjazYpO1xuXHQvLyBcdHNldERlY2soW1xuXHQvLyBcdCAgLi4ucGxheWluZ0RlY2ssXG5cdC8vIFx0ICAuLi5kZWNrMVxuXHQvLyBcdF0pO1xuXHQvLyB9O1xuXG5cdGNvbnN0IGRlYWwgPSAocGVyc29uKSA9PiB7XG5cdFx0dmFyIGNhcmQgPSBwbGF5aW5nRGVjay5wb3AoKTtcblx0XHRzd2l0Y2ggKHBlcnNvbikge1xuXHRcdFx0Y2FzZSBcInBsYXllclwiOlxuXHRcdFx0XHRzZXRQbGF5ZXIoWy4uLnBsYXllckhhbmQsY2FyZF0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJkZWFsZXJcIjpcblx0XHRcdFx0c2V0RGVhbGVyKFsuLi5wbGF5ZXJIYW5kLGNhcmRdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH07XG5cblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gICBzaHVmZmxlTmV3RGVjaygpO1xuXHQvLyB9LCBbXSk7XG5cblx0Ly8gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHQvLyBcdC8vIGRlYWwoXCJwbGF5ZXJcIik7XG5cdC8vIFx0Y29uc29sZS5sb2coXCIxMTFcIik7XG5cdC8vIH0sIDEwMDAwKTtcblxuXHRjb25zdCBVc2VySW5wdXQgPSAoKSA9PiB7XG5cdFx0dXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcblx0XHRcdGlmIChpbnB1dCA9PT0gJ3EnKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwicXVpdHR5XCIpO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmIChrZXkubGVmdEFycm93KSB7XG5cdFx0XHRcdC8vIExlZnQgYXJyb3cga2V5IHByZXNzZWRcblx0XHRcdFx0Y29uc29sZS5sb2coXCJsZWZ0eVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH07XG5cblxuICByZXR1cm4gKFxuICAgIDxCb3g+XG5cdFx0PFRleHQ+RGVjayBDb3VudDoge2RlY2subGVuZ3RofTwvVGV4dD5cblx0XHQ8VGV4dD5Db3VudDoge2NvdW50fTwvVGV4dD47XG4gICAgPC9Cb3g+XG4gICk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDsiXX0=