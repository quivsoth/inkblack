'use strict';

const React = require('react');

const {
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;
// const Shuffle = require('./shuffle');


const Deck = require('./deck');

const App = () => {
  // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // const [playingDeck, setDeck] = React.useState([]);
  const [count, setCount] = React.useState(0); // let deck = Shuffle({Deck}).map(a => ({...a}));
  // let deck2 = Shuffle({Deck}).map(a => ({...a}));
  // let deck3 = Shuffle({Deck}).map(a => ({...a}));
  // let deck4 = Shuffle({Deck}).map(a => ({...a}));
  // let deck5 = Shuffle({Deck}).map(a => ({...a}));
  // let deck6 = Shuffle({Deck}).map(a => ({...a}));
  // deck.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
  // React.useEffect(() => {
  // 	console.log('decker');
  // }, [deck])

  React.useEffect(() => {
    setTimeout(() => {
      setCount(count => count + 1);
    }, 4000);
  }); // const interval = setInterval(() => {
  //   setCount(count => count + 1);
  // }, 100);
  // return () => clearInterval(interval);
  // }, []);
  // setInterval(() => {
  // 	console.log('pp');
  // 	deck.pop();
  // }, 4000);
  // setTimeout(() => {
  // 	deck.pop()
  // }, 5000);
  // const shuffleNewDeck = () => {
  // 	//event.preventDefault();
  // 	let deck1 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck2 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck3 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck4 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck5 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck6 = Shuffle({Deck}).map(a => ({...a}));
  // 	deck1.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
  // 	setDeck([
  // 	  ...playingDeck,
  // 	  ...deck1
  // 	]);
  // };
  // const deal = (person) => {
  // 	var card = playingDeck.pop();
  // 	switch (person) {
  // 		case "player":
  // 			setPlayer([...playerHand,card]);
  // 			break;
  // 		case "dealer":
  // 			setDealer([...playerHand,card]);
  // 			break;
  // 		default:
  // 			break;
  // 	}
  // };
  // React.useEffect(() => {
  //   shuffleNewDeck();
  // }, []);
  // setInterval(() => {
  // 	// deal("player");
  // 	console.log("111");
  // }, 10000);

  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Count: ", count, " "));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInJlbmRlciIsIlRleHQiLCJDb2xvciIsIkJveCIsIkRlY2siLCJBcHAiLCJjb3VudCIsInNldENvdW50IiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJzZXRUaW1lb3V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBLE1BQUQ7QUFBU0MsRUFBQUEsSUFBVDtBQUFlQyxFQUFBQSxLQUFmO0FBQXNCQyxFQUFBQTtBQUF0QixJQUE2QkosT0FBTyxDQUFDLEtBQUQsQ0FBMUMsQyxDQUNBO0FBQ0E7OztBQUNBLE1BQU1LLElBQUksR0FBR0wsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBRUEsTUFBTU0sR0FBRyxHQUFHLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JULEtBQUssQ0FBQ1UsUUFBTixDQUFlLENBQWYsQ0FBMUIsQ0FKaUIsQ0FNakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7O0FBRUFWLEVBQUFBLEtBQUssQ0FBQ1csU0FBTixDQUFnQixNQUFNO0FBQ3JCQyxJQUFBQSxVQUFVLENBQUMsTUFBTTtBQUNoQkgsTUFBQUEsUUFBUSxDQUFDRCxLQUFLLElBQUlBLEtBQUssR0FBRyxDQUFsQixDQUFSO0FBQ0EsS0FGUyxFQUVQLElBRk8sQ0FBVjtBQUdBLEdBSkQsRUFuQmlCLENBeUJqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQyxzQkFDRSxvQkFBQyxHQUFELHFCQUVGLG9CQUFDLElBQUQsbUJBQWNBLEtBQWQsTUFGRSxDQURGO0FBTUQsQ0F0RkQ7O0FBd0ZBSyxNQUFNLENBQUNDLE9BQVAsR0FBaUJQLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3JlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbi8vIGNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbi8vIGNvbnN0IFNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUnKTtcbmNvbnN0IERlY2sgPSByZXF1aXJlKCcuL2RlY2snKTtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHQvLyBjb25zdCBbcGxheWVySGFuZCwgc2V0UGxheWVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Ly8gY29uc3QgW2RlYWxlckhhbmQsIHNldERlYWxlcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdC8vIGNvbnN0IFtwbGF5aW5nRGVjaywgc2V0RGVja10gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdGNvbnN0IFtjb3VudCwgc2V0Q291bnRdID0gUmVhY3QudXNlU3RhdGUoMCk7XG5cblx0Ly8gbGV0IGRlY2sgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHQvLyBsZXQgZGVjazIgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHQvLyBsZXQgZGVjazMgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHQvLyBsZXQgZGVjazQgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHQvLyBsZXQgZGVjazUgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHQvLyBsZXQgZGVjazYgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXG5cdC8vIGRlY2sucHVzaCguLi5kZWNrMiwgLi4uZGVjazMsIC4uLmRlY2s0LCAuLi5kZWNrNSwgLi4uZGVjazYpO1xuXG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Y29uc29sZS5sb2coJ2RlY2tlcicpO1xuXHQvLyB9LCBbZGVja10pXG5cblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdHNldENvdW50KGNvdW50ID0+IGNvdW50ICsgMSk7XG5cdFx0fSwgNDAwMCk7XG5cdH0pO1xuXG5cdC8vIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHQvLyAgIHNldENvdW50KGNvdW50ID0+IGNvdW50ICsgMSk7XG5cdC8vIH0sIDEwMCk7XG5cdC8vIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGludGVydmFsKTtcblx0Ly8gfSwgW10pO1xuXG5cblx0Ly8gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHQvLyBcdGNvbnNvbGUubG9nKCdwcCcpO1xuXHQvLyBcdGRlY2sucG9wKCk7XG5cdC8vIH0sIDQwMDApO1xuXG5cdC8vIHNldFRpbWVvdXQoKCkgPT4ge1xuXHQvLyBcdGRlY2sucG9wKClcblx0Ly8gfSwgNTAwMCk7XG5cblx0Ly8gY29uc3Qgc2h1ZmZsZU5ld0RlY2sgPSAoKSA9PiB7XG5cdC8vIFx0Ly9ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHQvLyBcdGxldCBkZWNrMSA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdC8vIFx0bGV0IGRlY2syID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0Ly8gXHRsZXQgZGVjazMgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHQvLyBcdGxldCBkZWNrNCA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdC8vIFx0bGV0IGRlY2s1ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0Ly8gXHRsZXQgZGVjazYgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXG5cdC8vIFx0ZGVjazEucHVzaCguLi5kZWNrMiwgLi4uZGVjazMsIC4uLmRlY2s0LCAuLi5kZWNrNSwgLi4uZGVjazYpO1xuXHQvLyBcdHNldERlY2soW1xuXHQvLyBcdCAgLi4ucGxheWluZ0RlY2ssXG5cdC8vIFx0ICAuLi5kZWNrMVxuXHQvLyBcdF0pO1xuXHQvLyB9O1xuXG5cdC8vIGNvbnN0IGRlYWwgPSAocGVyc29uKSA9PiB7XG5cdC8vIFx0dmFyIGNhcmQgPSBwbGF5aW5nRGVjay5wb3AoKTtcblx0Ly8gXHRzd2l0Y2ggKHBlcnNvbikge1xuXHQvLyBcdFx0Y2FzZSBcInBsYXllclwiOlxuXHQvLyBcdFx0XHRzZXRQbGF5ZXIoWy4uLnBsYXllckhhbmQsY2FyZF0pO1xuXHQvLyBcdFx0XHRicmVhaztcblx0Ly8gXHRcdGNhc2UgXCJkZWFsZXJcIjpcblx0Ly8gXHRcdFx0c2V0RGVhbGVyKFsuLi5wbGF5ZXJIYW5kLGNhcmRdKTtcblx0Ly8gXHRcdFx0YnJlYWs7XG5cdC8vIFx0XHRkZWZhdWx0OlxuXHQvLyBcdFx0XHRicmVhaztcblx0Ly8gXHR9XG5cdC8vIH07XG5cblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gICBzaHVmZmxlTmV3RGVjaygpO1xuXHQvLyB9LCBbXSk7XG5cblx0Ly8gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHQvLyBcdC8vIGRlYWwoXCJwbGF5ZXJcIik7XG5cdC8vIFx0Y29uc29sZS5sb2coXCIxMTFcIik7XG5cdC8vIH0sIDEwMDAwKTtcblxuICByZXR1cm4gKFxuICAgIDxCb3g+XG5cblx0XHQ8VGV4dD5Db3VudDoge2NvdW50fSA8L1RleHQ+XG4gICAgPC9Cb3g+XG4gICk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDsiXX0=