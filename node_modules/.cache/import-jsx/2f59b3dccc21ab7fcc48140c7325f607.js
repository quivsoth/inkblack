'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const Child = require('./child');

const App = () => {
  console.log("PARENT");
  const [count, setCount] = React.useState(0);
  const resetCount = React.useCallback(() => {
    setCount(0);
  }, [setCount]); // const [playingDeck, setDeck] = React.useState(MultiShuffle());
  // const [value, setValue] = useState("");
  // const addHello = useCallback(() => setValue(value + "Hello!"), [value]);
  // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // const [counter, setCounter] = React.useState(0);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  React.useEffect(() => {
    const timer = setInterval(() => {
      //console.log('Intervalled');
      // playingDeck.pop();
      // setCounter(Math.round(Math.random() * 15));
      setCount(count => count + 1);
    }, 2000);
    return () => {
      clearInterval(timer);
    };
  }, []);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Count: ", count), /*#__PURE__*/React.createElement(Child, null));
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkNoaWxkIiwiQXBwIiwiY29uc29sZSIsImxvZyIsImNvdW50Iiwic2V0Q291bnQiLCJ1c2VTdGF0ZSIsInJlc2V0Q291bnQiLCJ1c2VDYWxsYmFjayIsInVzZUVmZmVjdCIsInRpbWVyIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBLFFBQUQ7QUFBV0MsRUFBQUEsTUFBWDtBQUFtQkMsRUFBQUEsSUFBbkI7QUFBeUJDLEVBQUFBLEtBQXpCO0FBQWdDQyxFQUFBQTtBQUFoQyxJQUF1Q0wsT0FBTyxDQUFDLEtBQUQsQ0FBcEQsQyxDQUNBOzs7QUFDQSxNQUFNTSxZQUFZLEdBQUdOLE9BQU8sQ0FBQyxXQUFELENBQTVCOztBQUNBLE1BQU1PLElBQUksR0FBR1AsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBQ0EsTUFBTVEsS0FBSyxHQUFHUixPQUFPLENBQUMsU0FBRCxDQUFyQjs7QUFHQSxNQUFNUyxHQUFHLEdBQUcsTUFBTTtBQUNqQkMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksUUFBWjtBQUNBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CZCxLQUFLLENBQUNlLFFBQU4sQ0FBZSxDQUFmLENBQTFCO0FBRUEsUUFBTUMsVUFBVSxHQUFHaEIsS0FBSyxDQUFDaUIsV0FBTixDQUFrQixNQUFNO0FBQzFDSCxJQUFBQSxRQUFRLENBQUMsQ0FBRCxDQUFSO0FBQ0EsR0FGa0IsRUFFaEIsQ0FBQ0EsUUFBRCxDQUZnQixDQUFuQixDQUppQixDQVNqQjtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQWQsRUFBQUEsS0FBSyxDQUFDa0IsU0FBTixDQUFnQixNQUFNO0FBQ3JCLFVBQU1DLEtBQUssR0FBR0MsV0FBVyxDQUFDLE1BQU07QUFDOUI7QUFDQTtBQUNBO0FBQ0FOLE1BQUFBLFFBQVEsQ0FBQ0QsS0FBSyxJQUFHQSxLQUFLLEdBQUMsQ0FBZixDQUFSO0FBQ0EsS0FMdUIsRUFNdkIsSUFOdUIsQ0FBekI7QUFPQSxXQUFPLE1BQU07QUFDWlEsTUFBQUEsYUFBYSxDQUFDRixLQUFELENBQWI7QUFDQSxLQUZEO0FBR0EsR0FYRCxFQVdHLEVBWEg7QUFZQSxzQkFDQyxvQkFBQyxHQUFELHFCQUVDLG9CQUFDLElBQUQsbUJBQWNOLEtBQWQsQ0FGRCxlQUdDLG9CQUFDLEtBQUQsT0FIRCxDQUREO0FBT0EsQ0F6Q0Q7O0FBMkNBUyxNQUFNLENBQUNDLE9BQVAsR0FBaUJiLEdBQWpCLEMsQ0FNQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3VzZUlucHV0LCByZW5kZXIsIFRleHQsIENvbG9yLCBCb3h9ID0gcmVxdWlyZSgnaW5rJyk7XG4vLyBjb25zdCBUZXh0SW5wdXQgPSByZXF1aXJlKCdpbmstdGV4dC1pbnB1dCcpLmRlZmF1bHQ7XG5jb25zdCBNdWx0aVNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUnKTtcbmNvbnN0IERlY2sgPSByZXF1aXJlKCcuL2RlY2snKTtcbmNvbnN0IENoaWxkID0gcmVxdWlyZSgnLi9jaGlsZCcpO1xuXG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcblx0Y29uc29sZS5sb2coXCJQQVJFTlRcIik7XG5cdGNvbnN0IFtjb3VudCwgc2V0Q291bnRdID0gUmVhY3QudXNlU3RhdGUoMCk7XG5cblx0Y29uc3QgcmVzZXRDb3VudCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcblx0XHRzZXRDb3VudCgwKTtcblx0fSwgW3NldENvdW50XSk7XG5cblxuXHQvLyBjb25zdCBbcGxheWluZ0RlY2ssIHNldERlY2tdID0gUmVhY3QudXNlU3RhdGUoTXVsdGlTaHVmZmxlKCkpO1xuXHQvLyBjb25zdCBbdmFsdWUsIHNldFZhbHVlXSA9IHVzZVN0YXRlKFwiXCIpO1xuXHQvLyBjb25zdCBhZGRIZWxsbyA9IHVzZUNhbGxiYWNrKCgpID0+IHNldFZhbHVlKHZhbHVlICsgXCJIZWxsbyFcIiksIFt2YWx1ZV0pO1xuXG5cdC8vIGNvbnN0IFtwbGF5ZXJIYW5kLCBzZXRQbGF5ZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXHQvLyBjb25zdCBbZGVhbGVySGFuZCwgc2V0RGVhbGVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Ly8gY29uc3QgW2NvdW50ZXIsIHNldENvdW50ZXJdID0gUmVhY3QudXNlU3RhdGUoMCk7XG5cblx0Ly8gc2V0RGVjayhbXG5cdC8vIFx0Li4ucGxheWluZ0RlY2ssXG5cdC8vIFx0Li4uZGVja1xuXHQvLyBdKTtcblxuXHRSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdJbnRlcnZhbGxlZCcpO1xuXHRcdFx0XHQvLyBwbGF5aW5nRGVjay5wb3AoKTtcblx0XHRcdFx0Ly8gc2V0Q291bnRlcihNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxNSkpO1xuXHRcdFx0XHRzZXRDb3VudChjb3VudD0+KGNvdW50KzEpKTtcblx0XHRcdH1cblx0XHRcdCwyMDAwKTtcblx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0Y2xlYXJJbnRlcnZhbCh0aW1lcik7XG5cdFx0fTtcblx0fSwgW10pO1xuXHRyZXR1cm4gKFxuXHRcdDxCb3g+XG5cdFx0XHR7LyogPFRleHQ+Q2FyZCBDb3VudDoge3BsYXlpbmdEZWNrLmxlbmd0aH0gPC9UZXh0PiAqL31cblx0XHRcdDxUZXh0PkNvdW50OiB7Y291bnR9PC9UZXh0PlxuXHRcdFx0PENoaWxkIC8+XG5cdFx0PC9Cb3g+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcblxuXG5cblxuXG4vLyBpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbi8vIGltcG9ydCB1c2VTZWFyY2ggZnJvbSAnLi9mZXRjaC1pdGVtcyc7XG5cbi8vIGZ1bmN0aW9uIE15UGFyZW50KHsgdGVybSB9KSB7XG4vLyAgIGNvbnN0IGhhbmRsZUNsaWNrID0gdXNlQ2FsbGJhY2soKGl0ZW0pID0+IHtcbi8vICAgICBjb25zb2xlLmxvZygnWW91IGNsaWNrZWQgJywgaXRlbSk7XG4vLyAgIH0sIFt0ZXJtXSk7XG5cbi8vICAgY29uc3QgaXRlbXMgPSB1c2VTZWFyY2godGVybSk7XG5cbi8vICAgcmV0dXJuIChcbi8vICAgICA8TXlCaWdMaXN0XG4vLyAgICAgICBpdGVtcz17aXRlbXN9XG4vLyAgICAgICBoYW5kbGVDbGljaz17aGFuZGxlQ2xpY2t9XG4vLyAgICAgLz5cbi8vICAgKTtcbi8vIH0iXX0=