'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  const [playingDeck, setDeck] = React.useState(MultiShuffle()); // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  React.useEffect(() => {
    const timer = setInterval(() => {
      console.log('.'); // setDeck([
      // 	...playingDeck,
      // 	...deck
      // ]);

      var array = [...playingDeck]; // make a separate copy of the array

      console.log(array.length);
      var index = array.indexOf(array.length - 1);

      if (index !== -1) {
        array.splice(index, 1);
        this.setState(array);
      } // playingDeck.pop();
      // setCounter(Math.round(Math.random() * 15));
      // setCount(count=>(count+1));

    }, 2000);
    return () => {
      clearInterval(timer);
    };
  }, []);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Card Count: ", playingDeck.length, " "));
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkFwcCIsInBsYXlpbmdEZWNrIiwic2V0RGVjayIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidGltZXIiLCJzZXRJbnRlcnZhbCIsImNvbnNvbGUiLCJsb2ciLCJhcnJheSIsImxlbmd0aCIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsInNldFN0YXRlIiwiY2xlYXJJbnRlcnZhbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDQyxFQUFBQSxRQUFEO0FBQVdDLEVBQUFBLE1BQVg7QUFBbUJDLEVBQUFBLElBQW5CO0FBQXlCQyxFQUFBQSxLQUF6QjtBQUFnQ0MsRUFBQUE7QUFBaEMsSUFBdUNMLE9BQU8sQ0FBQyxLQUFELENBQXBELEMsQ0FDQTs7O0FBQ0EsTUFBTU0sWUFBWSxHQUFHTixPQUFPLENBQUMsV0FBRCxDQUE1Qjs7QUFDQSxNQUFNTyxJQUFJLEdBQUdQLE9BQU8sQ0FBQyxRQUFELENBQXBCOztBQUlBLE1BQU1RLEdBQUcsR0FBRyxNQUFNO0FBQ2pCLFFBQU0sQ0FBQ0MsV0FBRCxFQUFjQyxPQUFkLElBQXlCWCxLQUFLLENBQUNZLFFBQU4sQ0FBZUwsWUFBWSxFQUEzQixDQUEvQixDQURpQixDQUVqQjtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFQLEVBQUFBLEtBQUssQ0FBQ2EsU0FBTixDQUFnQixNQUFNO0FBQ3JCLFVBQU1DLEtBQUssR0FBR0MsV0FBVyxDQUFDLE1BQU07QUFDOUJDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLEdBQVosRUFEOEIsQ0FFOUI7QUFDQTtBQUNBO0FBQ0E7O0FBS0EsVUFBSUMsS0FBSyxHQUFHLENBQUMsR0FBR1IsV0FBSixDQUFaLENBVjhCLENBVUE7O0FBQzlCTSxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsS0FBSyxDQUFDQyxNQUFsQjtBQUNBLFVBQUlDLEtBQUssR0FBR0YsS0FBSyxDQUFDRyxPQUFOLENBQWNILEtBQUssQ0FBQ0MsTUFBTixHQUFlLENBQTdCLENBQVo7O0FBQ0EsVUFBSUMsS0FBSyxLQUFLLENBQUMsQ0FBZixFQUFrQjtBQUNqQkYsUUFBQUEsS0FBSyxDQUFDSSxNQUFOLENBQWFGLEtBQWIsRUFBb0IsQ0FBcEI7QUFDQSxhQUFLRyxRQUFMLENBQWNMLEtBQWQ7QUFDQSxPQWhCNkIsQ0FxQjlCO0FBQ0E7QUFDQTs7QUFDQSxLQXhCdUIsRUF5QnZCLElBekJ1QixDQUF6QjtBQTBCQSxXQUFPLE1BQU07QUFDWk0sTUFBQUEsYUFBYSxDQUFDVixLQUFELENBQWI7QUFDQSxLQUZEO0FBR0EsR0E5QkQsRUE4QkcsRUE5Qkg7QUErQkEsc0JBQ0Msb0JBQUMsR0FBRCxxQkFDQyxvQkFBQyxJQUFELHdCQUFtQkosV0FBVyxDQUFDUyxNQUEvQixNQURELENBREQ7QUFNQSxDQWhERDs7QUFrREFNLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmpCLEdBQWpCLEMsQ0FNQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3VzZUlucHV0LCByZW5kZXIsIFRleHQsIENvbG9yLCBCb3h9ID0gcmVxdWlyZSgnaW5rJyk7XG4vLyBjb25zdCBUZXh0SW5wdXQgPSByZXF1aXJlKCdpbmstdGV4dC1pbnB1dCcpLmRlZmF1bHQ7XG5jb25zdCBNdWx0aVNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUnKTtcbmNvbnN0IERlY2sgPSByZXF1aXJlKCcuL2RlY2snKTtcblxuXG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcblx0Y29uc3QgW3BsYXlpbmdEZWNrLCBzZXREZWNrXSA9IFJlYWN0LnVzZVN0YXRlKE11bHRpU2h1ZmZsZSgpKTtcblx0Ly8gY29uc3QgW3BsYXllckhhbmQsIHNldFBsYXllcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdC8vIGNvbnN0IFtkZWFsZXJIYW5kLCBzZXREZWFsZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXG5cblx0Ly8gc2V0RGVjayhbXG5cdC8vIFx0Li4ucGxheWluZ0RlY2ssXG5cdC8vIFx0Li4uZGVja1xuXHQvLyBdKTtcblxuXHRSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnLicpO1xuXHRcdFx0XHQvLyBzZXREZWNrKFtcblx0XHRcdFx0Ly8gXHQuLi5wbGF5aW5nRGVjayxcblx0XHRcdFx0Ly8gXHQuLi5kZWNrXG5cdFx0XHRcdC8vIF0pO1xuXG5cblxuXG5cdFx0XHRcdHZhciBhcnJheSA9IFsuLi5wbGF5aW5nRGVja107IC8vIG1ha2UgYSBzZXBhcmF0ZSBjb3B5IG9mIHRoZSBhcnJheVxuXHRcdFx0XHRjb25zb2xlLmxvZyhhcnJheS5sZW5ndGgpO1xuXHRcdFx0XHR2YXIgaW5kZXggPSBhcnJheS5pbmRleE9mKGFycmF5Lmxlbmd0aCAtIDEpO1xuXHRcdFx0XHRpZiAoaW5kZXggIT09IC0xKSB7XG5cdFx0XHRcdFx0YXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHR0aGlzLnNldFN0YXRlKGFycmF5KTtcblx0XHRcdFx0fVxuXG5cblxuXG5cdFx0XHRcdC8vIHBsYXlpbmdEZWNrLnBvcCgpO1xuXHRcdFx0XHQvLyBzZXRDb3VudGVyKE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDE1KSk7XG5cdFx0XHRcdC8vIHNldENvdW50KGNvdW50PT4oY291bnQrMSkpO1xuXHRcdFx0fVxuXHRcdFx0LDIwMDApO1xuXHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRjbGVhckludGVydmFsKHRpbWVyKTtcblx0XHR9O1xuXHR9LCBbXSk7XG5cdHJldHVybiAoXG5cdFx0PEJveD5cblx0XHRcdDxUZXh0PkNhcmQgQ291bnQ6IHtwbGF5aW5nRGVjay5sZW5ndGh9IDwvVGV4dD5cblx0XHRcdHsvKiA8VGV4dD5Db3VudDoge2NvdW50fTwvVGV4dD4gKi99XG5cdFx0PC9Cb3g+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcblxuXG5cblxuXG4vLyBpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbi8vIGltcG9ydCB1c2VTZWFyY2ggZnJvbSAnLi9mZXRjaC1pdGVtcyc7XG5cbi8vIGZ1bmN0aW9uIE15UGFyZW50KHsgdGVybSB9KSB7XG4vLyAgIGNvbnN0IGhhbmRsZUNsaWNrID0gdXNlQ2FsbGJhY2soKGl0ZW0pID0+IHtcbi8vICAgICBjb25zb2xlLmxvZygnWW91IGNsaWNrZWQgJywgaXRlbSk7XG4vLyAgIH0sIFt0ZXJtXSk7XG5cbi8vICAgY29uc3QgaXRlbXMgPSB1c2VTZWFyY2godGVybSk7XG5cbi8vICAgcmV0dXJuIChcbi8vICAgICA8TXlCaWdMaXN0XG4vLyAgICAgICBpdGVtcz17aXRlbXN9XG4vLyAgICAgICBoYW5kbGVDbGljaz17aGFuZGxlQ2xpY2t9XG4vLyAgICAgLz5cbi8vICAgKTtcbi8vIH0iXX0=