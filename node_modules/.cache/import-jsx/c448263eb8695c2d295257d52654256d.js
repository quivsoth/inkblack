'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  const [playingDeck, setDeck] = React.useState(MultiShuffle()); // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  const [, forceUpdate] = useReducer(x => x + 1, 0);
  React.useEffect(() => {
    console.log('e');
    const timer = setInterval(() => {
      // setDeck([
      playingDeck.pop(); // 	...playingDeck,
      // 	...deck
      // ]);
      // var array = [...playingDeck]; // make a separate copy of the array
      // array.pop();
      // setDeck(array);
      // setDeck([
      // 		...playingDeck,
      // 		null
      // 	]);

      console.log(playingDeck.length);
      forceUpdate();
    }, 1000); //clearInterval(timer);

    return () => {};
  }, []);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Card Count: ", playingDeck.length, " "));
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkFwcCIsInBsYXlpbmdEZWNrIiwic2V0RGVjayIsInVzZVN0YXRlIiwiZm9yY2VVcGRhdGUiLCJ1c2VSZWR1Y2VyIiwieCIsInVzZUVmZmVjdCIsImNvbnNvbGUiLCJsb2ciLCJ0aW1lciIsInNldEludGVydmFsIiwicG9wIiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBLFFBQUQ7QUFBV0MsRUFBQUEsTUFBWDtBQUFtQkMsRUFBQUEsSUFBbkI7QUFBeUJDLEVBQUFBLEtBQXpCO0FBQWdDQyxFQUFBQTtBQUFoQyxJQUF1Q0wsT0FBTyxDQUFDLEtBQUQsQ0FBcEQsQyxDQUNBOzs7QUFDQSxNQUFNTSxZQUFZLEdBQUdOLE9BQU8sQ0FBQyxXQUFELENBQTVCOztBQUNBLE1BQU1PLElBQUksR0FBR1AsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBSUEsTUFBTVEsR0FBRyxHQUFHLE1BQU07QUFDakIsUUFBTSxDQUFDQyxXQUFELEVBQWNDLE9BQWQsSUFBeUJYLEtBQUssQ0FBQ1ksUUFBTixDQUFlTCxZQUFZLEVBQTNCLENBQS9CLENBRGlCLENBR2pCO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFNLEdBQUdNLFdBQUgsSUFBa0JDLFVBQVUsQ0FBQ0MsQ0FBQyxJQUFJQSxDQUFDLEdBQUcsQ0FBVixFQUFhLENBQWIsQ0FBbEM7QUFFQWYsRUFBQUEsS0FBSyxDQUFDZ0IsU0FBTixDQUFnQixNQUFNO0FBQ3JCQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxHQUFaO0FBQ0EsVUFBTUMsS0FBSyxHQUFHQyxXQUFXLENBQUMsTUFBTTtBQUUvQjtBQUNBVixNQUFBQSxXQUFXLENBQUNXLEdBQVosR0FIK0IsQ0FJOUI7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFKLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZUixXQUFXLENBQUNZLE1BQXhCO0FBQ0FULE1BQUFBLFdBQVc7QUFDWCxLQWxCdUIsRUFtQnZCLElBbkJ1QixDQUF6QixDQUZxQixDQXNCcEI7O0FBQ0QsV0FBTyxNQUFNLENBQUUsQ0FBZjtBQUNBLEdBeEJELEVBd0JHLEVBeEJIO0FBeUJBLHNCQUNDLG9CQUFDLEdBQUQscUJBQ0Msb0JBQUMsSUFBRCx3QkFBbUJILFdBQVcsQ0FBQ1ksTUFBL0IsTUFERCxDQUREO0FBTUEsQ0E3Q0Q7O0FBK0NBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJmLEdBQWpCLEMsQ0FNQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3VzZUlucHV0LCByZW5kZXIsIFRleHQsIENvbG9yLCBCb3h9ID0gcmVxdWlyZSgnaW5rJyk7XG4vLyBjb25zdCBUZXh0SW5wdXQgPSByZXF1aXJlKCdpbmstdGV4dC1pbnB1dCcpLmRlZmF1bHQ7XG5jb25zdCBNdWx0aVNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUnKTtcbmNvbnN0IERlY2sgPSByZXF1aXJlKCcuL2RlY2snKTtcblxuXG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcblx0Y29uc3QgW3BsYXlpbmdEZWNrLCBzZXREZWNrXSA9IFJlYWN0LnVzZVN0YXRlKE11bHRpU2h1ZmZsZSgpKTtcblxuXHQvLyBjb25zdCBbcGxheWVySGFuZCwgc2V0UGxheWVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Ly8gY29uc3QgW2RlYWxlckhhbmQsIHNldERlYWxlcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cblxuXHQvLyBzZXREZWNrKFtcblx0Ly8gXHQuLi5wbGF5aW5nRGVjayxcblx0Ly8gXHQuLi5kZWNrXG5cdC8vIF0pO1xuXG5cdGNvbnN0IFssIGZvcmNlVXBkYXRlXSA9IHVzZVJlZHVjZXIoeCA9PiB4ICsgMSwgMCk7XG5cblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0XHRjb25zb2xlLmxvZygnZScpO1xuXHRcdGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXG5cdFx0XHQvLyBzZXREZWNrKFtcblx0XHRcdHBsYXlpbmdEZWNrLnBvcCgpO1xuXHRcdFx0XHQvLyBcdC4uLnBsYXlpbmdEZWNrLFxuXHRcdFx0XHQvLyBcdC4uLmRlY2tcblx0XHRcdFx0Ly8gXSk7XG5cblx0XHRcdFx0Ly8gdmFyIGFycmF5ID0gWy4uLnBsYXlpbmdEZWNrXTsgLy8gbWFrZSBhIHNlcGFyYXRlIGNvcHkgb2YgdGhlIGFycmF5XG5cdFx0XHRcdC8vIGFycmF5LnBvcCgpO1xuXHRcdFx0XHQvLyBzZXREZWNrKGFycmF5KTtcblx0XHRcdFx0Ly8gc2V0RGVjayhbXG5cdFx0XHRcdC8vIFx0XHQuLi5wbGF5aW5nRGVjayxcblx0XHRcdFx0Ly8gXHRcdG51bGxcblx0XHRcdFx0Ly8gXHRdKTtcblxuXHRcdFx0XHRjb25zb2xlLmxvZyhwbGF5aW5nRGVjay5sZW5ndGgpO1xuXHRcdFx0XHRmb3JjZVVwZGF0ZSgpO1xuXHRcdFx0fVxuXHRcdFx0LDEwMDApO1xuXHRcdFx0Ly9jbGVhckludGVydmFsKHRpbWVyKTtcblx0XHRyZXR1cm4gKCkgPT4ge307XG5cdH0sIFtdKTtcblx0cmV0dXJuIChcblx0XHQ8Qm94PlxuXHRcdFx0PFRleHQ+Q2FyZCBDb3VudDoge3BsYXlpbmdEZWNrLmxlbmd0aH0gPC9UZXh0PlxuXHRcdFx0ey8qIDxUZXh0PkNvdW50OiB7Y291bnR9PC9UZXh0PiAqL31cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuXG5cblxuXG5cbi8vIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuLy8gaW1wb3J0IHVzZVNlYXJjaCBmcm9tICcuL2ZldGNoLWl0ZW1zJztcblxuLy8gZnVuY3Rpb24gTXlQYXJlbnQoeyB0ZXJtIH0pIHtcbi8vICAgY29uc3QgaGFuZGxlQ2xpY2sgPSB1c2VDYWxsYmFjaygoaXRlbSkgPT4ge1xuLy8gICAgIGNvbnNvbGUubG9nKCdZb3UgY2xpY2tlZCAnLCBpdGVtKTtcbi8vICAgfSwgW3Rlcm1dKTtcblxuLy8gICBjb25zdCBpdGVtcyA9IHVzZVNlYXJjaCh0ZXJtKTtcblxuLy8gICByZXR1cm4gKFxuLy8gICAgIDxNeUJpZ0xpc3Rcbi8vICAgICAgIGl0ZW1zPXtpdGVtc31cbi8vICAgICAgIGhhbmRsZUNsaWNrPXtoYW5kbGVDbGlja31cbi8vICAgICAvPlxuLy8gICApO1xuLy8gfSJdfQ==