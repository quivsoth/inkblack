'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  const [playingDeck, setDeck] = React.useState(MultiShuffle()); // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  playingDeck.pop();
  playingDeck.pop();
  React.useEffect(() => {
    const timer = setInterval(() => {
      // setDeck([
      playingDeck.pop(); // 	...playingDeck,
      // 	...deck
      // ]);
      // var array = [...playingDeck]; // make a separate copy of the array
      // array.pop();
      // setDeck(array);
      // setDeck([
      // 		...playingDeck,
      // 		null
      // 	]);
      // console.log(array.length);
    }, 1000);
    clearInterval(timer);
    return () => {};
  }, []);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Card Count: ", playingDeck.length, " "));
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkFwcCIsInBsYXlpbmdEZWNrIiwic2V0RGVjayIsInVzZVN0YXRlIiwicG9wIiwidXNlRWZmZWN0IiwidGltZXIiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQSxNQUFYO0FBQW1CQyxFQUFBQSxJQUFuQjtBQUF5QkMsRUFBQUEsS0FBekI7QUFBZ0NDLEVBQUFBO0FBQWhDLElBQXVDTCxPQUFPLENBQUMsS0FBRCxDQUFwRCxDLENBQ0E7OztBQUNBLE1BQU1NLFlBQVksR0FBR04sT0FBTyxDQUFDLFdBQUQsQ0FBNUI7O0FBQ0EsTUFBTU8sSUFBSSxHQUFHUCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFJQSxNQUFNUSxHQUFHLEdBQUcsTUFBTTtBQUNqQixRQUFNLENBQUNDLFdBQUQsRUFBY0MsT0FBZCxJQUF5QlgsS0FBSyxDQUFDWSxRQUFOLENBQWVMLFlBQVksRUFBM0IsQ0FBL0IsQ0FEaUIsQ0FHakI7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUNBRyxFQUFBQSxXQUFXLENBQUNHLEdBQVo7QUFDQUgsRUFBQUEsV0FBVyxDQUFDRyxHQUFaO0FBQ0FiLEVBQUFBLEtBQUssQ0FBQ2MsU0FBTixDQUFnQixNQUFNO0FBQ3JCLFVBQU1DLEtBQUssR0FBR0MsV0FBVyxDQUFDLE1BQU07QUFFL0I7QUFDQU4sTUFBQUEsV0FBVyxDQUFDRyxHQUFaLEdBSCtCLENBSTlCO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQSxLQWpCdUIsRUFrQnZCLElBbEJ1QixDQUF6QjtBQW1CQ0ksSUFBQUEsYUFBYSxDQUFDRixLQUFELENBQWI7QUFDRCxXQUFPLE1BQU0sQ0FBRSxDQUFmO0FBQ0EsR0F0QkQsRUFzQkcsRUF0Qkg7QUF1QkEsc0JBQ0Msb0JBQUMsR0FBRCxxQkFDQyxvQkFBQyxJQUFELHdCQUFtQkwsV0FBVyxDQUFDUSxNQUEvQixNQURELENBREQ7QUFNQSxDQTFDRDs7QUE0Q0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlgsR0FBakIsQyxDQU1BO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlSW5wdXQsIHJlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbi8vIGNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IE11bHRpU2h1ZmZsZSA9IHJlcXVpcmUoJy4vc2h1ZmZsZScpO1xuY29uc3QgRGVjayA9IHJlcXVpcmUoJy4vZGVjaycpO1xuXG5cblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHRjb25zdCBbcGxheWluZ0RlY2ssIHNldERlY2tdID0gUmVhY3QudXNlU3RhdGUoTXVsdGlTaHVmZmxlKCkpO1xuXG5cdC8vIGNvbnN0IFtwbGF5ZXJIYW5kLCBzZXRQbGF5ZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXHQvLyBjb25zdCBbZGVhbGVySGFuZCwgc2V0RGVhbGVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblxuXG5cdC8vIHNldERlY2soW1xuXHQvLyBcdC4uLnBsYXlpbmdEZWNrLFxuXHQvLyBcdC4uLmRlY2tcblx0Ly8gXSk7XG5cdHBsYXlpbmdEZWNrLnBvcCgpO1xuXHRwbGF5aW5nRGVjay5wb3AoKTtcblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblxuXHRcdFx0Ly8gc2V0RGVjayhbXG5cdFx0XHRwbGF5aW5nRGVjay5wb3AoKTtcblx0XHRcdFx0Ly8gXHQuLi5wbGF5aW5nRGVjayxcblx0XHRcdFx0Ly8gXHQuLi5kZWNrXG5cdFx0XHRcdC8vIF0pO1xuXG5cdFx0XHRcdC8vIHZhciBhcnJheSA9IFsuLi5wbGF5aW5nRGVja107IC8vIG1ha2UgYSBzZXBhcmF0ZSBjb3B5IG9mIHRoZSBhcnJheVxuXHRcdFx0XHQvLyBhcnJheS5wb3AoKTtcblx0XHRcdFx0Ly8gc2V0RGVjayhhcnJheSk7XG5cdFx0XHRcdC8vIHNldERlY2soW1xuXHRcdFx0XHQvLyBcdFx0Li4ucGxheWluZ0RlY2ssXG5cdFx0XHRcdC8vIFx0XHRudWxsXG5cdFx0XHRcdC8vIFx0XSk7XG5cblx0XHRcdFx0Ly8gY29uc29sZS5sb2coYXJyYXkubGVuZ3RoKTtcblx0XHRcdH1cblx0XHRcdCwxMDAwKTtcblx0XHRcdGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHRcdHJldHVybiAoKSA9PiB7fTtcblx0fSwgW10pO1xuXHRyZXR1cm4gKFxuXHRcdDxCb3g+XG5cdFx0XHQ8VGV4dD5DYXJkIENvdW50OiB7cGxheWluZ0RlY2subGVuZ3RofSA8L1RleHQ+XG5cdFx0XHR7LyogPFRleHQ+Q291bnQ6IHtjb3VudH08L1RleHQ+ICovfVxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG5cblxuXG5cblxuLy8gaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG4vLyBpbXBvcnQgdXNlU2VhcmNoIGZyb20gJy4vZmV0Y2gtaXRlbXMnO1xuXG4vLyBmdW5jdGlvbiBNeVBhcmVudCh7IHRlcm0gfSkge1xuLy8gICBjb25zdCBoYW5kbGVDbGljayA9IHVzZUNhbGxiYWNrKChpdGVtKSA9PiB7XG4vLyAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkICcsIGl0ZW0pO1xuLy8gICB9LCBbdGVybV0pO1xuXG4vLyAgIGNvbnN0IGl0ZW1zID0gdXNlU2VhcmNoKHRlcm0pO1xuXG4vLyAgIHJldHVybiAoXG4vLyAgICAgPE15QmlnTGlzdFxuLy8gICAgICAgaXRlbXM9e2l0ZW1zfVxuLy8gICAgICAgaGFuZGxlQ2xpY2s9e2hhbmRsZUNsaWNrfVxuLy8gICAgIC8+XG4vLyAgICk7XG4vLyB9Il19