'use strict';

const React = require('react');

const {
  render,
  Text,
  Color,
  Box
} = require('ink');

const TextInput = require('ink-text-input').default;

const Shuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // const [playingDeck, setDeck] = React.useState([]);
  let deck = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck2 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck3 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck4 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck5 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck6 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  deck.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
  React.useEffect(() => {
    console.log('decker');
  }, [deck]); // setInterval(() => {
  // 	console.log('pp');
  // 	deck.pop();
  // }, 4000);
  // setTimeout(() => {
  // 	deck.pop()
  // }, 5000);
  // const shuffleNewDeck = () => {
  // 	//event.preventDefault();
  // 	let deck1 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck2 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck3 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck4 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck5 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck6 = Shuffle({Deck}).map(a => ({...a}));
  // 	deck1.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
  // 	setDeck([
  // 	  ...playingDeck,
  // 	  ...deck1
  // 	]);
  // };

  const deal = person => {
    var card = playingDeck.pop();

    switch (person) {
      case "player":
        setPlayer([...playerHand, card]);
        break;

      case "dealer":
        setDealer([...playerHand, card]);
        break;

      default:
        break;
    }
  }; // React.useEffect(() => {
  //   shuffleNewDeck();
  // }, []);
  // setInterval(() => {
  // 	// deal("player");
  // 	console.log("111");
  // }, 10000);


  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Deck Count: ", deck.length));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInJlbmRlciIsIlRleHQiLCJDb2xvciIsIkJveCIsIlRleHRJbnB1dCIsImRlZmF1bHQiLCJTaHVmZmxlIiwiRGVjayIsIkFwcCIsImRlY2siLCJtYXAiLCJhIiwiZGVjazIiLCJkZWNrMyIsImRlY2s0IiwiZGVjazUiLCJkZWNrNiIsInB1c2giLCJ1c2VFZmZlY3QiLCJjb25zb2xlIiwibG9nIiwiZGVhbCIsInBlcnNvbiIsImNhcmQiLCJwbGF5aW5nRGVjayIsInBvcCIsInNldFBsYXllciIsInBsYXllckhhbmQiLCJzZXREZWFsZXIiLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsTUFBRDtBQUFTQyxFQUFBQSxJQUFUO0FBQWVDLEVBQUFBLEtBQWY7QUFBc0JDLEVBQUFBO0FBQXRCLElBQTZCSixPQUFPLENBQUMsS0FBRCxDQUExQzs7QUFDQSxNQUFNSyxTQUFTLEdBQUdMLE9BQU8sQ0FBQyxnQkFBRCxDQUFQLENBQTBCTSxPQUE1Qzs7QUFDQSxNQUFNQyxPQUFPLEdBQUdQLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUNBLE1BQU1RLElBQUksR0FBR1IsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBRUEsTUFBTVMsR0FBRyxHQUFHLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBRUEsTUFBSUMsSUFBSSxHQUFHSCxPQUFPLENBQUM7QUFBQ0MsSUFBQUE7QUFBRCxHQUFELENBQVAsQ0FBZ0JHLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEdBQUwsQ0FBckIsQ0FBWDtBQUNBLE1BQUlDLEtBQUssR0FBR04sT0FBTyxDQUFDO0FBQUNDLElBQUFBO0FBQUQsR0FBRCxDQUFQLENBQWdCRyxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixHQUFMLENBQXJCLENBQVo7QUFDQSxNQUFJRSxLQUFLLEdBQUdQLE9BQU8sQ0FBQztBQUFDQyxJQUFBQTtBQUFELEdBQUQsQ0FBUCxDQUFnQkcsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosR0FBTCxDQUFyQixDQUFaO0FBQ0EsTUFBSUcsS0FBSyxHQUFHUixPQUFPLENBQUM7QUFBQ0MsSUFBQUE7QUFBRCxHQUFELENBQVAsQ0FBZ0JHLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEdBQUwsQ0FBckIsQ0FBWjtBQUNBLE1BQUlJLEtBQUssR0FBR1QsT0FBTyxDQUFDO0FBQUNDLElBQUFBO0FBQUQsR0FBRCxDQUFQLENBQWdCRyxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixHQUFMLENBQXJCLENBQVo7QUFDQSxNQUFJSyxLQUFLLEdBQUdWLE9BQU8sQ0FBQztBQUFDQyxJQUFBQTtBQUFELEdBQUQsQ0FBUCxDQUFnQkcsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosR0FBTCxDQUFyQixDQUFaO0FBRUFGLEVBQUFBLElBQUksQ0FBQ1EsSUFBTCxDQUFVLEdBQUdMLEtBQWIsRUFBb0IsR0FBR0MsS0FBdkIsRUFBOEIsR0FBR0MsS0FBakMsRUFBd0MsR0FBR0MsS0FBM0MsRUFBa0QsR0FBR0MsS0FBckQ7QUFFQWxCLEVBQUFBLEtBQUssQ0FBQ29CLFNBQU4sQ0FBZ0IsTUFBTTtBQUNyQkMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksUUFBWjtBQUNBLEdBRkQsRUFFRyxDQUFDWCxJQUFELENBRkgsRUFkaUIsQ0FvQmpCO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFNWSxJQUFJLEdBQUlDLE1BQUQsSUFBWTtBQUN4QixRQUFJQyxJQUFJLEdBQUdDLFdBQVcsQ0FBQ0MsR0FBWixFQUFYOztBQUNBLFlBQVFILE1BQVI7QUFDQyxXQUFLLFFBQUw7QUFDQ0ksUUFBQUEsU0FBUyxDQUFDLENBQUMsR0FBR0MsVUFBSixFQUFlSixJQUFmLENBQUQsQ0FBVDtBQUNBOztBQUNELFdBQUssUUFBTDtBQUNDSyxRQUFBQSxTQUFTLENBQUMsQ0FBQyxHQUFHRCxVQUFKLEVBQWVKLElBQWYsQ0FBRCxDQUFUO0FBQ0E7O0FBQ0Q7QUFDQztBQVJGO0FBVUEsR0FaRCxDQTdDaUIsQ0EyRGpCO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQyxzQkFDRSxvQkFBQyxHQUFELHFCQUNGLG9CQUFDLElBQUQsd0JBQW1CZCxJQUFJLENBQUNvQixNQUF4QixDQURFLENBREY7QUFLRCxDQXpFRDs7QUEyRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnZCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3JlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IFNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUnKTtcbmNvbnN0IERlY2sgPSByZXF1aXJlKCcuL2RlY2snKTtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHQvLyBjb25zdCBbcGxheWVySGFuZCwgc2V0UGxheWVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Ly8gY29uc3QgW2RlYWxlckhhbmQsIHNldERlYWxlcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdC8vIGNvbnN0IFtwbGF5aW5nRGVjaywgc2V0RGVja10gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cblx0bGV0IGRlY2sgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRsZXQgZGVjazIgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRsZXQgZGVjazMgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRsZXQgZGVjazQgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRsZXQgZGVjazUgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRsZXQgZGVjazYgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRcblx0ZGVjay5wdXNoKC4uLmRlY2syLCAuLi5kZWNrMywgLi4uZGVjazQsIC4uLmRlY2s1LCAuLi5kZWNrNik7XG5cdFxuXHRSZWFjdC51c2VFZmZlY3QoKCkgPT4geyBcblx0XHRjb25zb2xlLmxvZygnZGVja2VyJyk7XG5cdH0sIFtkZWNrXSlcblx0XG5cblx0XG5cdC8vIHNldEludGVydmFsKCgpID0+IHtcblx0Ly8gXHRjb25zb2xlLmxvZygncHAnKTtcblx0Ly8gXHRkZWNrLnBvcCgpO1xuXHQvLyB9LCA0MDAwKTtcblxuXHQvLyBzZXRUaW1lb3V0KCgpID0+IHtcblx0Ly8gXHRkZWNrLnBvcCgpXG5cdC8vIH0sIDUwMDApO1xuXHRcblx0Ly8gY29uc3Qgc2h1ZmZsZU5ld0RlY2sgPSAoKSA9PiB7XG5cdC8vIFx0Ly9ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHQvLyBcdGxldCBkZWNrMSA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdC8vIFx0bGV0IGRlY2syID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0Ly8gXHRsZXQgZGVjazMgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHQvLyBcdGxldCBkZWNrNCA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdC8vIFx0bGV0IGRlY2s1ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0Ly8gXHRsZXQgZGVjazYgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXG5cdC8vIFx0ZGVjazEucHVzaCguLi5kZWNrMiwgLi4uZGVjazMsIC4uLmRlY2s0LCAuLi5kZWNrNSwgLi4uZGVjazYpO1xuXHQvLyBcdHNldERlY2soW1xuXHQvLyBcdCAgLi4ucGxheWluZ0RlY2ssXG5cdC8vIFx0ICAuLi5kZWNrMVxuXHQvLyBcdF0pO1xuXHQvLyB9O1xuXG5cdGNvbnN0IGRlYWwgPSAocGVyc29uKSA9PiB7XG5cdFx0dmFyIGNhcmQgPSBwbGF5aW5nRGVjay5wb3AoKTtcblx0XHRzd2l0Y2ggKHBlcnNvbikge1xuXHRcdFx0Y2FzZSBcInBsYXllclwiOlxuXHRcdFx0XHRzZXRQbGF5ZXIoWy4uLnBsYXllckhhbmQsY2FyZF0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJkZWFsZXJcIjpcblx0XHRcdFx0c2V0RGVhbGVyKFsuLi5wbGF5ZXJIYW5kLGNhcmRdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH07XG5cblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gICBzaHVmZmxlTmV3RGVjaygpO1xuXHQvLyB9LCBbXSk7XG5cblx0Ly8gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHQvLyBcdC8vIGRlYWwoXCJwbGF5ZXJcIik7XG5cdC8vIFx0Y29uc29sZS5sb2coXCIxMTFcIik7XG5cdC8vIH0sIDEwMDAwKTtcblxuICByZXR1cm4gKFxuICAgIDxCb3g+XG5cdFx0PFRleHQ+RGVjayBDb3VudDoge2RlY2subGVuZ3RofTwvVGV4dD5cbiAgICA8L0JveD5cbiAgKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwOyJdfQ==