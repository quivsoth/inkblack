'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  const [playingDeck, setDeck] = React.useState(MultiShuffle()); // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  React.useEffect(() => {
    const timer = setInterval(() => {
      console.log('.'); // setDeck([
      // 	...playingDeck,
      // 	...deck
      // ]);

      var array = [...playingDeck]; // make a separate copy of the array

      console.log(array.length);
      var index = array.indexOf(array.lengt - 1);

      if (index !== -1) {
        array.splice(index, 1);
        this.setState(array);
      } // playingDeck.pop();
      // setCounter(Math.round(Math.random() * 15));
      // setCount(count=>(count+1));

    }, 2000);
    return () => {
      clearInterval(timer);
    };
  }, []);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Card Count: ", playingDeck.length, " "));
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkFwcCIsInBsYXlpbmdEZWNrIiwic2V0RGVjayIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidGltZXIiLCJzZXRJbnRlcnZhbCIsImNvbnNvbGUiLCJsb2ciLCJhcnJheSIsImxlbmd0aCIsImluZGV4IiwiaW5kZXhPZiIsImxlbmd0Iiwic3BsaWNlIiwic2V0U3RhdGUiLCJjbGVhckludGVydmFsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBLFFBQUQ7QUFBV0MsRUFBQUEsTUFBWDtBQUFtQkMsRUFBQUEsSUFBbkI7QUFBeUJDLEVBQUFBLEtBQXpCO0FBQWdDQyxFQUFBQTtBQUFoQyxJQUF1Q0wsT0FBTyxDQUFDLEtBQUQsQ0FBcEQsQyxDQUNBOzs7QUFDQSxNQUFNTSxZQUFZLEdBQUdOLE9BQU8sQ0FBQyxXQUFELENBQTVCOztBQUNBLE1BQU1PLElBQUksR0FBR1AsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBSUEsTUFBTVEsR0FBRyxHQUFHLE1BQU07QUFDakIsUUFBTSxDQUFDQyxXQUFELEVBQWNDLE9BQWQsSUFBeUJYLEtBQUssQ0FBQ1ksUUFBTixDQUFlTCxZQUFZLEVBQTNCLENBQS9CLENBRGlCLENBRWpCO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQVAsRUFBQUEsS0FBSyxDQUFDYSxTQUFOLENBQWdCLE1BQU07QUFDckIsVUFBTUMsS0FBSyxHQUFHQyxXQUFXLENBQUMsTUFBTTtBQUM5QkMsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksR0FBWixFQUQ4QixDQUU5QjtBQUNBO0FBQ0E7QUFDQTs7QUFLQSxVQUFJQyxLQUFLLEdBQUcsQ0FBQyxHQUFHUixXQUFKLENBQVosQ0FWOEIsQ0FVQTs7QUFDOUJNLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxLQUFLLENBQUNDLE1BQWxCO0FBQ0EsVUFBSUMsS0FBSyxHQUFHRixLQUFLLENBQUNHLE9BQU4sQ0FBY0gsS0FBSyxDQUFDSSxLQUFOLEdBQWMsQ0FBNUIsQ0FBWjs7QUFDQSxVQUFJRixLQUFLLEtBQUssQ0FBQyxDQUFmLEVBQWtCO0FBQ2pCRixRQUFBQSxLQUFLLENBQUNLLE1BQU4sQ0FBYUgsS0FBYixFQUFvQixDQUFwQjtBQUNBLGFBQUtJLFFBQUwsQ0FBY04sS0FBZDtBQUNBLE9BaEI2QixDQXFCOUI7QUFDQTtBQUNBOztBQUNBLEtBeEJ1QixFQXlCdkIsSUF6QnVCLENBQXpCO0FBMEJBLFdBQU8sTUFBTTtBQUNaTyxNQUFBQSxhQUFhLENBQUNYLEtBQUQsQ0FBYjtBQUNBLEtBRkQ7QUFHQSxHQTlCRCxFQThCRyxFQTlCSDtBQStCQSxzQkFDQyxvQkFBQyxHQUFELHFCQUNDLG9CQUFDLElBQUQsd0JBQW1CSixXQUFXLENBQUNTLE1BQS9CLE1BREQsQ0FERDtBQU1BLENBaEREOztBQWtEQU8sTUFBTSxDQUFDQyxPQUFQLEdBQWlCbEIsR0FBakIsQyxDQU1BO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlSW5wdXQsIHJlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbi8vIGNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IE11bHRpU2h1ZmZsZSA9IHJlcXVpcmUoJy4vc2h1ZmZsZScpO1xuY29uc3QgRGVjayA9IHJlcXVpcmUoJy4vZGVjaycpO1xuXG5cblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHRjb25zdCBbcGxheWluZ0RlY2ssIHNldERlY2tdID0gUmVhY3QudXNlU3RhdGUoTXVsdGlTaHVmZmxlKCkpO1xuXHQvLyBjb25zdCBbcGxheWVySGFuZCwgc2V0UGxheWVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Ly8gY29uc3QgW2RlYWxlckhhbmQsIHNldERlYWxlcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cblxuXHQvLyBzZXREZWNrKFtcblx0Ly8gXHQuLi5wbGF5aW5nRGVjayxcblx0Ly8gXHQuLi5kZWNrXG5cdC8vIF0pO1xuXG5cdFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0Y29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCcuJyk7XG5cdFx0XHRcdC8vIHNldERlY2soW1xuXHRcdFx0XHQvLyBcdC4uLnBsYXlpbmdEZWNrLFxuXHRcdFx0XHQvLyBcdC4uLmRlY2tcblx0XHRcdFx0Ly8gXSk7XG5cblxuXG5cblx0XHRcdFx0dmFyIGFycmF5ID0gWy4uLnBsYXlpbmdEZWNrXTsgLy8gbWFrZSBhIHNlcGFyYXRlIGNvcHkgb2YgdGhlIGFycmF5XG5cdFx0XHRcdGNvbnNvbGUubG9nKGFycmF5Lmxlbmd0aCk7XG5cdFx0XHRcdHZhciBpbmRleCA9IGFycmF5LmluZGV4T2YoYXJyYXkubGVuZ3QgLSAxKTtcblx0XHRcdFx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0XHRcdGFycmF5LnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0dGhpcy5zZXRTdGF0ZShhcnJheSk7XG5cdFx0XHRcdH1cblxuXG5cblxuXHRcdFx0XHQvLyBwbGF5aW5nRGVjay5wb3AoKTtcblx0XHRcdFx0Ly8gc2V0Q291bnRlcihNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxNSkpO1xuXHRcdFx0XHQvLyBzZXRDb3VudChjb3VudD0+KGNvdW50KzEpKTtcblx0XHRcdH1cblx0XHRcdCwyMDAwKTtcblx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0Y2xlYXJJbnRlcnZhbCh0aW1lcik7XG5cdFx0fTtcblx0fSwgW10pO1xuXHRyZXR1cm4gKFxuXHRcdDxCb3g+XG5cdFx0XHQ8VGV4dD5DYXJkIENvdW50OiB7cGxheWluZ0RlY2subGVuZ3RofSA8L1RleHQ+XG5cdFx0XHR7LyogPFRleHQ+Q291bnQ6IHtjb3VudH08L1RleHQ+ICovfVxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG5cblxuXG5cblxuLy8gaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG4vLyBpbXBvcnQgdXNlU2VhcmNoIGZyb20gJy4vZmV0Y2gtaXRlbXMnO1xuXG4vLyBmdW5jdGlvbiBNeVBhcmVudCh7IHRlcm0gfSkge1xuLy8gICBjb25zdCBoYW5kbGVDbGljayA9IHVzZUNhbGxiYWNrKChpdGVtKSA9PiB7XG4vLyAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkICcsIGl0ZW0pO1xuLy8gICB9LCBbdGVybV0pO1xuXG4vLyAgIGNvbnN0IGl0ZW1zID0gdXNlU2VhcmNoKHRlcm0pO1xuXG4vLyAgIHJldHVybiAoXG4vLyAgICAgPE15QmlnTGlzdFxuLy8gICAgICAgaXRlbXM9e2l0ZW1zfVxuLy8gICAgICAgaGFuZGxlQ2xpY2s9e2hhbmRsZUNsaWNrfVxuLy8gICAgIC8+XG4vLyAgICk7XG4vLyB9Il19