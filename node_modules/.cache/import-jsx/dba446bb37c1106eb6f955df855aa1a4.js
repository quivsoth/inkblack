'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  const [playingDeck, setDeck] = React.useState(MultiShuffle()); // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  React.useEffect(() => {
    const timer = setInterval(() => {
      console.log('.'); // setDeck([
      // 	...playingDeck,
      // 	...deck
      // ]);

      var array = [...playingDeck]; // make a separate copy of the array

      console.log(array.length - 1);
      array.splice(array, 1);
      setDeck(array); // var index = array.indexOf(array.length - 1);
      // if (index !== -1) {
      // 	array.splice(index, 1);
      // 	this.setState(array);
      // }

      console.log(array.length); // playingDeck.pop();
      // setCounter(Math.round(Math.random() * 15));
      // setCount(count=>(count+1));
    }, 1000);
    return () => {
      clearInterval(timer);
    };
  }, []);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Card Count: ", playingDeck.length, " "));
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkFwcCIsInBsYXlpbmdEZWNrIiwic2V0RGVjayIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidGltZXIiLCJzZXRJbnRlcnZhbCIsImNvbnNvbGUiLCJsb2ciLCJhcnJheSIsImxlbmd0aCIsInNwbGljZSIsImNsZWFySW50ZXJ2YWwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQSxNQUFYO0FBQW1CQyxFQUFBQSxJQUFuQjtBQUF5QkMsRUFBQUEsS0FBekI7QUFBZ0NDLEVBQUFBO0FBQWhDLElBQXVDTCxPQUFPLENBQUMsS0FBRCxDQUFwRCxDLENBQ0E7OztBQUNBLE1BQU1NLFlBQVksR0FBR04sT0FBTyxDQUFDLFdBQUQsQ0FBNUI7O0FBQ0EsTUFBTU8sSUFBSSxHQUFHUCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFJQSxNQUFNUSxHQUFHLEdBQUcsTUFBTTtBQUNqQixRQUFNLENBQUNDLFdBQUQsRUFBY0MsT0FBZCxJQUF5QlgsS0FBSyxDQUFDWSxRQUFOLENBQWVMLFlBQVksRUFBM0IsQ0FBL0IsQ0FEaUIsQ0FFakI7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBUCxFQUFBQSxLQUFLLENBQUNhLFNBQU4sQ0FBZ0IsTUFBTTtBQUNyQixVQUFNQyxLQUFLLEdBQUdDLFdBQVcsQ0FBQyxNQUFNO0FBQzlCQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxHQUFaLEVBRDhCLENBRTlCO0FBQ0E7QUFDQTtBQUNBOztBQUtBLFVBQUlDLEtBQUssR0FBRyxDQUFDLEdBQUdSLFdBQUosQ0FBWixDQVY4QixDQVVBOztBQUM5Qk0sTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlDLEtBQUssQ0FBQ0MsTUFBTixHQUFlLENBQTNCO0FBQ0FELE1BQUFBLEtBQUssQ0FBQ0UsTUFBTixDQUFhRixLQUFiLEVBQW9CLENBQXBCO0FBQ0FQLE1BQUFBLE9BQU8sQ0FBQ08sS0FBRCxDQUFQLENBYjhCLENBZTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0FGLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxLQUFLLENBQUNDLE1BQWxCLEVBcEI4QixDQXdCOUI7QUFDQTtBQUNBO0FBQ0EsS0EzQnVCLEVBNEJ2QixJQTVCdUIsQ0FBekI7QUE2QkEsV0FBTyxNQUFNO0FBQ1pFLE1BQUFBLGFBQWEsQ0FBQ1AsS0FBRCxDQUFiO0FBQ0EsS0FGRDtBQUdBLEdBakNELEVBaUNHLEVBakNIO0FBa0NBLHNCQUNDLG9CQUFDLEdBQUQscUJBQ0Msb0JBQUMsSUFBRCx3QkFBbUJKLFdBQVcsQ0FBQ1MsTUFBL0IsTUFERCxDQUREO0FBTUEsQ0FuREQ7O0FBcURBRyxNQUFNLENBQUNDLE9BQVAsR0FBaUJkLEdBQWpCLEMsQ0FNQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3VzZUlucHV0LCByZW5kZXIsIFRleHQsIENvbG9yLCBCb3h9ID0gcmVxdWlyZSgnaW5rJyk7XG4vLyBjb25zdCBUZXh0SW5wdXQgPSByZXF1aXJlKCdpbmstdGV4dC1pbnB1dCcpLmRlZmF1bHQ7XG5jb25zdCBNdWx0aVNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUnKTtcbmNvbnN0IERlY2sgPSByZXF1aXJlKCcuL2RlY2snKTtcblxuXG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcblx0Y29uc3QgW3BsYXlpbmdEZWNrLCBzZXREZWNrXSA9IFJlYWN0LnVzZVN0YXRlKE11bHRpU2h1ZmZsZSgpKTtcblx0Ly8gY29uc3QgW3BsYXllckhhbmQsIHNldFBsYXllcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdC8vIGNvbnN0IFtkZWFsZXJIYW5kLCBzZXREZWFsZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXG5cblx0Ly8gc2V0RGVjayhbXG5cdC8vIFx0Li4ucGxheWluZ0RlY2ssXG5cdC8vIFx0Li4uZGVja1xuXHQvLyBdKTtcblxuXHRSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnLicpO1xuXHRcdFx0XHQvLyBzZXREZWNrKFtcblx0XHRcdFx0Ly8gXHQuLi5wbGF5aW5nRGVjayxcblx0XHRcdFx0Ly8gXHQuLi5kZWNrXG5cdFx0XHRcdC8vIF0pO1xuXG5cblxuXG5cdFx0XHRcdHZhciBhcnJheSA9IFsuLi5wbGF5aW5nRGVja107IC8vIG1ha2UgYSBzZXBhcmF0ZSBjb3B5IG9mIHRoZSBhcnJheVxuXHRcdFx0XHRjb25zb2xlLmxvZyhhcnJheS5sZW5ndGggLSAxKTtcblx0XHRcdFx0YXJyYXkuc3BsaWNlKGFycmF5LCAxKTtcblx0XHRcdFx0c2V0RGVjayhhcnJheSk7XG5cblx0XHRcdFx0Ly8gdmFyIGluZGV4ID0gYXJyYXkuaW5kZXhPZihhcnJheS5sZW5ndGggLSAxKTtcblx0XHRcdFx0Ly8gaWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0XHQvLyBcdGFycmF5LnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdC8vIFx0dGhpcy5zZXRTdGF0ZShhcnJheSk7XG5cdFx0XHRcdC8vIH1cblx0XHRcdFx0Y29uc29sZS5sb2coYXJyYXkubGVuZ3RoKTtcblxuXG5cblx0XHRcdFx0Ly8gcGxheWluZ0RlY2sucG9wKCk7XG5cdFx0XHRcdC8vIHNldENvdW50ZXIoTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTUpKTtcblx0XHRcdFx0Ly8gc2V0Q291bnQoY291bnQ9Pihjb3VudCsxKSk7XG5cdFx0XHR9XG5cdFx0XHQsMTAwMCk7XG5cdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHRcdH07XG5cdH0sIFtdKTtcblx0cmV0dXJuIChcblx0XHQ8Qm94PlxuXHRcdFx0PFRleHQ+Q2FyZCBDb3VudDoge3BsYXlpbmdEZWNrLmxlbmd0aH0gPC9UZXh0PlxuXHRcdFx0ey8qIDxUZXh0PkNvdW50OiB7Y291bnR9PC9UZXh0PiAqL31cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuXG5cblxuXG5cbi8vIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuLy8gaW1wb3J0IHVzZVNlYXJjaCBmcm9tICcuL2ZldGNoLWl0ZW1zJztcblxuLy8gZnVuY3Rpb24gTXlQYXJlbnQoeyB0ZXJtIH0pIHtcbi8vICAgY29uc3QgaGFuZGxlQ2xpY2sgPSB1c2VDYWxsYmFjaygoaXRlbSkgPT4ge1xuLy8gICAgIGNvbnNvbGUubG9nKCdZb3UgY2xpY2tlZCAnLCBpdGVtKTtcbi8vICAgfSwgW3Rlcm1dKTtcblxuLy8gICBjb25zdCBpdGVtcyA9IHVzZVNlYXJjaCh0ZXJtKTtcblxuLy8gICByZXR1cm4gKFxuLy8gICAgIDxNeUJpZ0xpc3Rcbi8vICAgICAgIGl0ZW1zPXtpdGVtc31cbi8vICAgICAgIGhhbmRsZUNsaWNrPXtoYW5kbGVDbGlja31cbi8vICAgICAvPlxuLy8gICApO1xuLy8gfSJdfQ==