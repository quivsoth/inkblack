'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const Shuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  let deck = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck2 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck3 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck4 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck5 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck6 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  deck.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
  const [playingDeck, setDeck] = React.useState(deck);
  const [playerHand, setPlayer] = React.useState([]);
  const [dealerHand, setDealer] = React.useState([]); // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  React.useEffect(() => {
    const timer = setInterval(() => handleRemoveItem(), 1000);
    return () => {
      clearInterval(timer);
    };
  }, []);

  const handleRemoveItem = () => {
    let e = playingDeck[playingDeck.length - 1];
    console.log(e);
    setDeck(playingDeck.pop()); // console.log(playingDeck.length);
  };

  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Card Count: ", playingDeck.length, " "));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiU2h1ZmZsZSIsIkRlY2siLCJBcHAiLCJkZWNrIiwibWFwIiwiYSIsImRlY2syIiwiZGVjazMiLCJkZWNrNCIsImRlY2s1IiwiZGVjazYiLCJwdXNoIiwicGxheWluZ0RlY2siLCJzZXREZWNrIiwidXNlU3RhdGUiLCJwbGF5ZXJIYW5kIiwic2V0UGxheWVyIiwiZGVhbGVySGFuZCIsInNldERlYWxlciIsInVzZUVmZmVjdCIsInRpbWVyIiwic2V0SW50ZXJ2YWwiLCJoYW5kbGVSZW1vdmVJdGVtIiwiY2xlYXJJbnRlcnZhbCIsImUiLCJsZW5ndGgiLCJjb25zb2xlIiwibG9nIiwicG9wIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBLFFBQUQ7QUFBV0MsRUFBQUEsTUFBWDtBQUFtQkMsRUFBQUEsSUFBbkI7QUFBeUJDLEVBQUFBLEtBQXpCO0FBQWdDQyxFQUFBQTtBQUFoQyxJQUF1Q0wsT0FBTyxDQUFDLEtBQUQsQ0FBcEQsQyxDQUNBOzs7QUFDQSxNQUFNTSxPQUFPLEdBQUdOLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUNBLE1BQU1PLElBQUksR0FBR1AsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBRUEsTUFBTVEsR0FBRyxHQUFHLE1BQU07QUFJakIsTUFBSUMsSUFBSSxHQUFHSCxPQUFPLENBQUM7QUFBQ0MsSUFBQUE7QUFBRCxHQUFELENBQVAsQ0FBZ0JHLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEdBQUwsQ0FBckIsQ0FBWDtBQUNBLE1BQUlDLEtBQUssR0FBR04sT0FBTyxDQUFDO0FBQUNDLElBQUFBO0FBQUQsR0FBRCxDQUFQLENBQWdCRyxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixHQUFMLENBQXJCLENBQVo7QUFDQSxNQUFJRSxLQUFLLEdBQUdQLE9BQU8sQ0FBQztBQUFDQyxJQUFBQTtBQUFELEdBQUQsQ0FBUCxDQUFnQkcsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosR0FBTCxDQUFyQixDQUFaO0FBQ0EsTUFBSUcsS0FBSyxHQUFHUixPQUFPLENBQUM7QUFBQ0MsSUFBQUE7QUFBRCxHQUFELENBQVAsQ0FBZ0JHLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEdBQUwsQ0FBckIsQ0FBWjtBQUNBLE1BQUlJLEtBQUssR0FBR1QsT0FBTyxDQUFDO0FBQUNDLElBQUFBO0FBQUQsR0FBRCxDQUFQLENBQWdCRyxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixHQUFMLENBQXJCLENBQVo7QUFDQSxNQUFJSyxLQUFLLEdBQUdWLE9BQU8sQ0FBQztBQUFDQyxJQUFBQTtBQUFELEdBQUQsQ0FBUCxDQUFnQkcsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosR0FBTCxDQUFyQixDQUFaO0FBQ0FGLEVBQUFBLElBQUksQ0FBQ1EsSUFBTCxDQUFVLEdBQUdMLEtBQWIsRUFBb0IsR0FBR0MsS0FBdkIsRUFBOEIsR0FBR0MsS0FBakMsRUFBd0MsR0FBR0MsS0FBM0MsRUFBa0QsR0FBR0MsS0FBckQ7QUFFQSxRQUFNLENBQUNFLFdBQUQsRUFBY0MsT0FBZCxJQUF5QnBCLEtBQUssQ0FBQ3FCLFFBQU4sQ0FBZVgsSUFBZixDQUEvQjtBQUNBLFFBQU0sQ0FBQ1ksVUFBRCxFQUFhQyxTQUFiLElBQTBCdkIsS0FBSyxDQUFDcUIsUUFBTixDQUFlLEVBQWYsQ0FBaEM7QUFDQSxRQUFNLENBQUNHLFVBQUQsRUFBYUMsU0FBYixJQUEwQnpCLEtBQUssQ0FBQ3FCLFFBQU4sQ0FBZSxFQUFmLENBQWhDLENBZGlCLENBZ0JqQjtBQUNBO0FBQ0E7QUFDQTs7QUFJQXJCLEVBQUFBLEtBQUssQ0FBQzBCLFNBQU4sQ0FBZ0IsTUFBTTtBQUNyQixVQUFNQyxLQUFLLEdBQUdDLFdBQVcsQ0FBQyxNQUFNQyxnQkFBZ0IsRUFBdkIsRUFBMkIsSUFBM0IsQ0FBekI7QUFDQSxXQUFPLE1BQU07QUFDWkMsTUFBQUEsYUFBYSxDQUFDSCxLQUFELENBQWI7QUFDQSxLQUZEO0FBR0EsR0FMRCxFQUtHLEVBTEg7O0FBT0EsUUFBTUUsZ0JBQWdCLEdBQUcsTUFBTTtBQUM5QixRQUFJRSxDQUFDLEdBQUdaLFdBQVcsQ0FBQ0EsV0FBVyxDQUFDYSxNQUFaLEdBQXFCLENBQXRCLENBQW5CO0FBQ0FDLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSCxDQUFaO0FBQ0FYLElBQUFBLE9BQU8sQ0FBQ0QsV0FBVyxDQUFDZ0IsR0FBWixFQUFELENBQVAsQ0FIOEIsQ0FJOUI7QUFDQSxHQUxEOztBQVFDLHNCQUNFLG9CQUFDLEdBQUQscUJBQ0Ysb0JBQUMsSUFBRCx3QkFBbUJoQixXQUFXLENBQUNhLE1BQS9CLE1BREUsQ0FERjtBQUtELENBM0NEOztBQTZDQUksTUFBTSxDQUFDQyxPQUFQLEdBQWlCNUIsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlSW5wdXQsIHJlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbi8vIGNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IFNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUnKTtcbmNvbnN0IERlY2sgPSByZXF1aXJlKCcuL2RlY2snKTtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXG5cblxuXHRsZXQgZGVjayA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdGxldCBkZWNrMiA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdGxldCBkZWNrMyA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdGxldCBkZWNrNCA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdGxldCBkZWNrNSA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdGxldCBkZWNrNiA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdGRlY2sucHVzaCguLi5kZWNrMiwgLi4uZGVjazMsIC4uLmRlY2s0LCAuLi5kZWNrNSwgLi4uZGVjazYpO1xuXG5cdGNvbnN0IFtwbGF5aW5nRGVjaywgc2V0RGVja10gPSBSZWFjdC51c2VTdGF0ZShkZWNrKTtcblx0Y29uc3QgW3BsYXllckhhbmQsIHNldFBsYXllcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdGNvbnN0IFtkZWFsZXJIYW5kLCBzZXREZWFsZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXG5cdC8vIHNldERlY2soW1xuXHQvLyBcdC4uLnBsYXlpbmdEZWNrLFxuXHQvLyBcdC4uLmRlY2tcblx0Ly8gXSk7XG5cblxuXG5cdFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0Y29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiBoYW5kbGVSZW1vdmVJdGVtKCksIDEwMDApO1xuXHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRjbGVhckludGVydmFsKHRpbWVyKTtcblx0XHR9O1xuXHR9LCBbXSk7XG5cblx0Y29uc3QgaGFuZGxlUmVtb3ZlSXRlbSA9ICgpID0+IHtcblx0XHRsZXQgZSA9IHBsYXlpbmdEZWNrW3BsYXlpbmdEZWNrLmxlbmd0aCAtIDFdO1xuXHRcdGNvbnNvbGUubG9nKGUpO1xuXHRcdHNldERlY2socGxheWluZ0RlY2sucG9wKCkpO1xuXHRcdC8vIGNvbnNvbGUubG9nKHBsYXlpbmdEZWNrLmxlbmd0aCk7XG5cdH1cblxuXG4gIHJldHVybiAoXG4gICAgPEJveD5cblx0XHQ8VGV4dD5DYXJkIENvdW50OiB7cGxheWluZ0RlY2subGVuZ3RofSA8L1RleHQ+XG4gICAgPC9Cb3g+XG4gICk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDsiXX0=