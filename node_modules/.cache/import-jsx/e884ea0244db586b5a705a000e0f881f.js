'use strict';

const React = require('react');

const {
  render,
  Text,
  Color,
  Box
} = require('ink');

const TextInput = require('ink-text-input').default;

const Shuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  const [playerHand, setPlayer] = React.useState([]);
  const [dealerHand, setDealer] = React.useState([]);
  const [playingDeck, setDeck] = React.useState([]);

  const shuffleNewDeck = () => {
    //event.preventDefault();
    let deck1 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck2 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck3 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck4 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck5 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck6 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    deck1.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
    setDeck([...playingDeck, ...deck1]);
  };

  const deal = person => {
    var card = playingDeck.pop();

    switch (key) {
      case "player":
        setPlayer([...playerHand, card]);
        break;

      case "dealer":
        setDealer([...playerHand, card]);
        break;

      default:
        break;
    }
  };

  React.useEffect(() => {
    shuffleNewDeck();
  }, []);
  deal("person");
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Deck Count: ", playingDeck.length));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInJlbmRlciIsIlRleHQiLCJDb2xvciIsIkJveCIsIlRleHRJbnB1dCIsImRlZmF1bHQiLCJTaHVmZmxlIiwiRGVjayIsIkFwcCIsInBsYXllckhhbmQiLCJzZXRQbGF5ZXIiLCJ1c2VTdGF0ZSIsImRlYWxlckhhbmQiLCJzZXREZWFsZXIiLCJwbGF5aW5nRGVjayIsInNldERlY2siLCJzaHVmZmxlTmV3RGVjayIsImRlY2sxIiwibWFwIiwiYSIsImRlY2syIiwiZGVjazMiLCJkZWNrNCIsImRlY2s1IiwiZGVjazYiLCJwdXNoIiwiZGVhbCIsInBlcnNvbiIsImNhcmQiLCJwb3AiLCJrZXkiLCJ1c2VFZmZlY3QiLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsTUFBRDtBQUFTQyxFQUFBQSxJQUFUO0FBQWVDLEVBQUFBLEtBQWY7QUFBc0JDLEVBQUFBO0FBQXRCLElBQTZCSixPQUFPLENBQUMsS0FBRCxDQUExQzs7QUFDQSxNQUFNSyxTQUFTLEdBQUdMLE9BQU8sQ0FBQyxnQkFBRCxDQUFQLENBQTBCTSxPQUE1Qzs7QUFDQSxNQUFNQyxPQUFPLEdBQUdQLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUNBLE1BQU1RLElBQUksR0FBR1IsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBRUEsTUFBTVMsR0FBRyxHQUFHLE1BQU07QUFDakIsUUFBTSxDQUFDQyxVQUFELEVBQWFDLFNBQWIsSUFBMEJaLEtBQUssQ0FBQ2EsUUFBTixDQUFlLEVBQWYsQ0FBaEM7QUFDQSxRQUFNLENBQUNDLFVBQUQsRUFBYUMsU0FBYixJQUEwQmYsS0FBSyxDQUFDYSxRQUFOLENBQWUsRUFBZixDQUFoQztBQUNBLFFBQU0sQ0FBQ0csV0FBRCxFQUFjQyxPQUFkLElBQXlCakIsS0FBSyxDQUFDYSxRQUFOLENBQWUsRUFBZixDQUEvQjs7QUFFQSxRQUFNSyxjQUFjLEdBQUcsTUFBTTtBQUM1QjtBQUNBLFFBQUlDLEtBQUssR0FBR1gsT0FBTyxDQUFDO0FBQUNDLE1BQUFBO0FBQUQsS0FBRCxDQUFQLENBQWdCVyxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixLQUFMLENBQXJCLENBQVo7QUFDQSxRQUFJQyxLQUFLLEdBQUdkLE9BQU8sQ0FBQztBQUFDQyxNQUFBQTtBQUFELEtBQUQsQ0FBUCxDQUFnQlcsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosS0FBTCxDQUFyQixDQUFaO0FBQ0EsUUFBSUUsS0FBSyxHQUFHZixPQUFPLENBQUM7QUFBQ0MsTUFBQUE7QUFBRCxLQUFELENBQVAsQ0FBZ0JXLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEtBQUwsQ0FBckIsQ0FBWjtBQUNBLFFBQUlHLEtBQUssR0FBR2hCLE9BQU8sQ0FBQztBQUFDQyxNQUFBQTtBQUFELEtBQUQsQ0FBUCxDQUFnQlcsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosS0FBTCxDQUFyQixDQUFaO0FBQ0EsUUFBSUksS0FBSyxHQUFHakIsT0FBTyxDQUFDO0FBQUNDLE1BQUFBO0FBQUQsS0FBRCxDQUFQLENBQWdCVyxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixLQUFMLENBQXJCLENBQVo7QUFDQSxRQUFJSyxLQUFLLEdBQUdsQixPQUFPLENBQUM7QUFBQ0MsTUFBQUE7QUFBRCxLQUFELENBQVAsQ0FBZ0JXLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEtBQUwsQ0FBckIsQ0FBWjtBQUVBRixJQUFBQSxLQUFLLENBQUNRLElBQU4sQ0FBVyxHQUFHTCxLQUFkLEVBQXFCLEdBQUdDLEtBQXhCLEVBQStCLEdBQUdDLEtBQWxDLEVBQXlDLEdBQUdDLEtBQTVDLEVBQW1ELEdBQUdDLEtBQXREO0FBQ0FULElBQUFBLE9BQU8sQ0FBQyxDQUNOLEdBQUdELFdBREcsRUFFTixHQUFHRyxLQUZHLENBQUQsQ0FBUDtBQUlBLEdBZEQ7O0FBZ0JBLFFBQU1TLElBQUksR0FBSUMsTUFBRCxJQUFZO0FBQ3hCLFFBQUlDLElBQUksR0FBR2QsV0FBVyxDQUFDZSxHQUFaLEVBQVg7O0FBQ0EsWUFBUUMsR0FBUjtBQUNDLFdBQUssUUFBTDtBQUNDcEIsUUFBQUEsU0FBUyxDQUFDLENBQUMsR0FBR0QsVUFBSixFQUFlbUIsSUFBZixDQUFELENBQVQ7QUFDQTs7QUFDRCxXQUFLLFFBQUw7QUFDQ2YsUUFBQUEsU0FBUyxDQUFDLENBQUMsR0FBR0osVUFBSixFQUFlbUIsSUFBZixDQUFELENBQVQ7QUFDQTs7QUFDRDtBQUNDO0FBUkY7QUFXQSxHQWJEOztBQWVBOUIsRUFBQUEsS0FBSyxDQUFDaUMsU0FBTixDQUFnQixNQUFNO0FBQ3BCZixJQUFBQSxjQUFjO0FBQ2YsR0FGRCxFQUVHLEVBRkg7QUFJQVUsRUFBQUEsSUFBSSxDQUFDLFFBQUQsQ0FBSjtBQUVDLHNCQUNFLG9CQUFDLEdBQUQscUJBQ0Ysb0JBQUMsSUFBRCx3QkFBbUJaLFdBQVcsQ0FBQ2tCLE1BQS9CLENBREUsQ0FERjtBQUtELENBL0NEOztBQWdEQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCMUIsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7cmVuZGVyLCBUZXh0LCBDb2xvciwgQm94fSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZSgnaW5rLXRleHQtaW5wdXQnKS5kZWZhdWx0O1xuY29uc3QgU2h1ZmZsZSA9IHJlcXVpcmUoJy4vc2h1ZmZsZScpO1xuY29uc3QgRGVjayA9IHJlcXVpcmUoJy4vZGVjaycpO1xuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG5cdGNvbnN0IFtwbGF5ZXJIYW5kLCBzZXRQbGF5ZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXHRjb25zdCBbZGVhbGVySGFuZCwgc2V0RGVhbGVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Y29uc3QgW3BsYXlpbmdEZWNrLCBzZXREZWNrXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblxuXHRjb25zdCBzaHVmZmxlTmV3RGVjayA9ICgpID0+IHtcblx0XHQvL2V2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0bGV0IGRlY2sxID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0XHRsZXQgZGVjazIgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRcdGxldCBkZWNrMyA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdFx0bGV0IGRlY2s0ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0XHRsZXQgZGVjazUgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRcdGxldCBkZWNrNiA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cblx0XHRkZWNrMS5wdXNoKC4uLmRlY2syLCAuLi5kZWNrMywgLi4uZGVjazQsIC4uLmRlY2s1LCAuLi5kZWNrNik7XG5cdFx0c2V0RGVjayhbXG5cdFx0ICAuLi5wbGF5aW5nRGVjayxcblx0XHQgIC4uLmRlY2sxXG5cdFx0XSk7XG5cdH07XG5cblx0Y29uc3QgZGVhbCA9IChwZXJzb24pID0+IHtcblx0XHR2YXIgY2FyZCA9IHBsYXlpbmdEZWNrLnBvcCgpO1xuXHRcdHN3aXRjaCAoa2V5KSB7XG5cdFx0XHRjYXNlIFwicGxheWVyXCI6XG5cdFx0XHRcdHNldFBsYXllcihbLi4ucGxheWVySGFuZCxjYXJkXSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcImRlYWxlclwiOlxuXHRcdFx0XHRzZXREZWFsZXIoWy4uLnBsYXllckhhbmQsY2FyZF0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHR9O1xuXG5cdFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdCAgc2h1ZmZsZU5ld0RlY2soKVxuXHR9LCBbXSk7XG5cblx0ZGVhbChcInBlcnNvblwiKTtcblxuICByZXR1cm4gKFxuICAgIDxCb3g+XG5cdFx0PFRleHQ+RGVjayBDb3VudDoge3BsYXlpbmdEZWNrLmxlbmd0aH08L1RleHQ+XG4gICAgPC9Cb3g+XG4gICk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBBcHA7Il19