'use strict';

const React = require('react');

const {
  render,
  Text,
  Color,
  Box
} = require('ink');

const {
  useInput
} = require('ink');

const TextInput = require('ink-text-input').default;

const Shuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // const [playingDeck, setDeck] = React.useState([]);
  let deck = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck2 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck3 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck4 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck5 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck6 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  deck.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
  React.useEffect(() => {
    console.log('decker');
  }, [deck]);
  deck.pop();
  deck.pop();
  deck.pop();
  deck.pop();
  deck.pop();
  deck.pop(); // setInterval(() => {
  // 	console.log('pp');
  // 	deck.pop();
  // }, 4000);
  // setTimeout(() => {
  // 	deck.pop()
  // }, 5000);
  // const shuffleNewDeck = () => {
  // 	//event.preventDefault();
  // 	let deck1 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck2 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck3 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck4 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck5 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck6 = Shuffle({Deck}).map(a => ({...a}));
  // 	deck1.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
  // 	setDeck([
  // 	  ...playingDeck,
  // 	  ...deck1
  // 	]);
  // };

  const deal = person => {
    var card = playingDeck.pop();

    switch (person) {
      case "player":
        setPlayer([...playerHand, card]);
        break;

      case "dealer":
        setDealer([...playerHand, card]);
        break;

      default:
        break;
    }
  }; // React.useEffect(() => {
  //   shuffleNewDeck();
  // }, []);
  // setInterval(() => {
  // 	// deal("player");
  // 	console.log("111");
  // }, 10000);


  const UserInput = () => {
    useInput((input, key) => {
      if (input === 'q') {
        console.log("quitty");
      }

      if (key.leftArrow) {
        // Left arrow key pressed
        console.log("lefty");
      }
    });
    return "";
  };

  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Deck Count: ", deck.length));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInJlbmRlciIsIlRleHQiLCJDb2xvciIsIkJveCIsInVzZUlucHV0IiwiVGV4dElucHV0IiwiZGVmYXVsdCIsIlNodWZmbGUiLCJEZWNrIiwiQXBwIiwiZGVjayIsIm1hcCIsImEiLCJkZWNrMiIsImRlY2szIiwiZGVjazQiLCJkZWNrNSIsImRlY2s2IiwicHVzaCIsInVzZUVmZmVjdCIsImNvbnNvbGUiLCJsb2ciLCJwb3AiLCJkZWFsIiwicGVyc29uIiwiY2FyZCIsInBsYXlpbmdEZWNrIiwic2V0UGxheWVyIiwicGxheWVySGFuZCIsInNldERlYWxlciIsIlVzZXJJbnB1dCIsImlucHV0Iiwia2V5IiwibGVmdEFycm93IiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBLE1BQUQ7QUFBU0MsRUFBQUEsSUFBVDtBQUFlQyxFQUFBQSxLQUFmO0FBQXNCQyxFQUFBQTtBQUF0QixJQUE2QkosT0FBTyxDQUFDLEtBQUQsQ0FBMUM7O0FBQ0EsTUFBTTtBQUFDSyxFQUFBQTtBQUFELElBQWFMLE9BQU8sQ0FBQyxLQUFELENBQTFCOztBQUVBLE1BQU1NLFNBQVMsR0FBR04sT0FBTyxDQUFDLGdCQUFELENBQVAsQ0FBMEJPLE9BQTVDOztBQUNBLE1BQU1DLE9BQU8sR0FBR1IsT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBQ0EsTUFBTVMsSUFBSSxHQUFHVCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFFQSxNQUFNVSxHQUFHLEdBQUcsTUFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFFQSxNQUFJQyxJQUFJLEdBQUdILE9BQU8sQ0FBQztBQUFDQyxJQUFBQTtBQUFELEdBQUQsQ0FBUCxDQUFnQkcsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosR0FBTCxDQUFyQixDQUFYO0FBQ0EsTUFBSUMsS0FBSyxHQUFHTixPQUFPLENBQUM7QUFBQ0MsSUFBQUE7QUFBRCxHQUFELENBQVAsQ0FBZ0JHLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEdBQUwsQ0FBckIsQ0FBWjtBQUNBLE1BQUlFLEtBQUssR0FBR1AsT0FBTyxDQUFDO0FBQUNDLElBQUFBO0FBQUQsR0FBRCxDQUFQLENBQWdCRyxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixHQUFMLENBQXJCLENBQVo7QUFDQSxNQUFJRyxLQUFLLEdBQUdSLE9BQU8sQ0FBQztBQUFDQyxJQUFBQTtBQUFELEdBQUQsQ0FBUCxDQUFnQkcsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosR0FBTCxDQUFyQixDQUFaO0FBQ0EsTUFBSUksS0FBSyxHQUFHVCxPQUFPLENBQUM7QUFBQ0MsSUFBQUE7QUFBRCxHQUFELENBQVAsQ0FBZ0JHLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEdBQUwsQ0FBckIsQ0FBWjtBQUNBLE1BQUlLLEtBQUssR0FBR1YsT0FBTyxDQUFDO0FBQUNDLElBQUFBO0FBQUQsR0FBRCxDQUFQLENBQWdCRyxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixHQUFMLENBQXJCLENBQVo7QUFFQUYsRUFBQUEsSUFBSSxDQUFDUSxJQUFMLENBQVUsR0FBR0wsS0FBYixFQUFvQixHQUFHQyxLQUF2QixFQUE4QixHQUFHQyxLQUFqQyxFQUF3QyxHQUFHQyxLQUEzQyxFQUFrRCxHQUFHQyxLQUFyRDtBQUVBbkIsRUFBQUEsS0FBSyxDQUFDcUIsU0FBTixDQUFnQixNQUFNO0FBQ3JCQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxRQUFaO0FBQ0EsR0FGRCxFQUVHLENBQUNYLElBQUQsQ0FGSDtBQUlEQSxFQUFBQSxJQUFJLENBQUNZLEdBQUw7QUFDQVosRUFBQUEsSUFBSSxDQUFDWSxHQUFMO0FBQ0FaLEVBQUFBLElBQUksQ0FBQ1ksR0FBTDtBQUNBWixFQUFBQSxJQUFJLENBQUNZLEdBQUw7QUFDQVosRUFBQUEsSUFBSSxDQUFDWSxHQUFMO0FBQ0FaLEVBQUFBLElBQUksQ0FBQ1ksR0FBTCxHQXZCa0IsQ0F3QmpCO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFNQyxJQUFJLEdBQUlDLE1BQUQsSUFBWTtBQUN4QixRQUFJQyxJQUFJLEdBQUdDLFdBQVcsQ0FBQ0osR0FBWixFQUFYOztBQUNBLFlBQVFFLE1BQVI7QUFDQyxXQUFLLFFBQUw7QUFDQ0csUUFBQUEsU0FBUyxDQUFDLENBQUMsR0FBR0MsVUFBSixFQUFlSCxJQUFmLENBQUQsQ0FBVDtBQUNBOztBQUNELFdBQUssUUFBTDtBQUNDSSxRQUFBQSxTQUFTLENBQUMsQ0FBQyxHQUFHRCxVQUFKLEVBQWVILElBQWYsQ0FBRCxDQUFUO0FBQ0E7O0FBQ0Q7QUFDQztBQVJGO0FBVUEsR0FaRCxDQWpEaUIsQ0ErRGpCO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQSxRQUFNSyxTQUFTLEdBQUcsTUFBTTtBQUN2QjFCLElBQUFBLFFBQVEsQ0FBQyxDQUFDMkIsS0FBRCxFQUFRQyxHQUFSLEtBQWdCO0FBQ3hCLFVBQUlELEtBQUssS0FBSyxHQUFkLEVBQW1CO0FBQ2xCWCxRQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxRQUFaO0FBQ0E7O0FBRUQsVUFBSVcsR0FBRyxDQUFDQyxTQUFSLEVBQW1CO0FBQ2xCO0FBQ0FiLFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLE9BQVo7QUFDQTtBQUNELEtBVE8sQ0FBUjtBQVdBLFdBQU8sRUFBUDtBQUNBLEdBYkQ7O0FBZ0JDLHNCQUNFLG9CQUFDLEdBQUQscUJBQ0Ysb0JBQUMsSUFBRCx3QkFBbUJYLElBQUksQ0FBQ3dCLE1BQXhCLENBREUsQ0FERjtBQUtELENBN0ZEOztBQStGQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCM0IsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7cmVuZGVyLCBUZXh0LCBDb2xvciwgQm94fSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3Qge3VzZUlucHV0fSA9IHJlcXVpcmUoJ2luaycpO1xuXG5jb25zdCBUZXh0SW5wdXQgPSByZXF1aXJlKCdpbmstdGV4dC1pbnB1dCcpLmRlZmF1bHQ7XG5jb25zdCBTaHVmZmxlID0gcmVxdWlyZSgnLi9zaHVmZmxlJyk7XG5jb25zdCBEZWNrID0gcmVxdWlyZSgnLi9kZWNrJyk7XG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcblx0Ly8gY29uc3QgW3BsYXllckhhbmQsIHNldFBsYXllcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdC8vIGNvbnN0IFtkZWFsZXJIYW5kLCBzZXREZWFsZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXHQvLyBjb25zdCBbcGxheWluZ0RlY2ssIHNldERlY2tdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXG5cdGxldCBkZWNrID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0bGV0IGRlY2syID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0bGV0IGRlY2szID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0bGV0IGRlY2s0ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0bGV0IGRlY2s1ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0bGV0IGRlY2s2ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0XG5cdGRlY2sucHVzaCguLi5kZWNrMiwgLi4uZGVjazMsIC4uLmRlY2s0LCAuLi5kZWNrNSwgLi4uZGVjazYpO1xuXHRcblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHsgXG5cdFx0Y29uc29sZS5sb2coJ2RlY2tlcicpO1xuXHR9LCBbZGVja10pXG5cbmRlY2sucG9wKCk7XG5kZWNrLnBvcCgpO1xuZGVjay5wb3AoKTtcbmRlY2sucG9wKCk7XG5kZWNrLnBvcCgpO1xuZGVjay5wb3AoKTtcblx0Ly8gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHQvLyBcdGNvbnNvbGUubG9nKCdwcCcpO1xuXHQvLyBcdGRlY2sucG9wKCk7XG5cdC8vIH0sIDQwMDApO1xuXG5cdC8vIHNldFRpbWVvdXQoKCkgPT4ge1xuXHQvLyBcdGRlY2sucG9wKClcblx0Ly8gfSwgNTAwMCk7XG5cdFxuXHQvLyBjb25zdCBzaHVmZmxlTmV3RGVjayA9ICgpID0+IHtcblx0Ly8gXHQvL2V2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdC8vIFx0bGV0IGRlY2sxID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0Ly8gXHRsZXQgZGVjazIgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHQvLyBcdGxldCBkZWNrMyA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdC8vIFx0bGV0IGRlY2s0ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0Ly8gXHRsZXQgZGVjazUgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHQvLyBcdGxldCBkZWNrNiA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cblx0Ly8gXHRkZWNrMS5wdXNoKC4uLmRlY2syLCAuLi5kZWNrMywgLi4uZGVjazQsIC4uLmRlY2s1LCAuLi5kZWNrNik7XG5cdC8vIFx0c2V0RGVjayhbXG5cdC8vIFx0ICAuLi5wbGF5aW5nRGVjayxcblx0Ly8gXHQgIC4uLmRlY2sxXG5cdC8vIFx0XSk7XG5cdC8vIH07XG5cblx0Y29uc3QgZGVhbCA9IChwZXJzb24pID0+IHtcblx0XHR2YXIgY2FyZCA9IHBsYXlpbmdEZWNrLnBvcCgpO1xuXHRcdHN3aXRjaCAocGVyc29uKSB7XG5cdFx0XHRjYXNlIFwicGxheWVyXCI6XG5cdFx0XHRcdHNldFBsYXllcihbLi4ucGxheWVySGFuZCxjYXJkXSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcImRlYWxlclwiOlxuXHRcdFx0XHRzZXREZWFsZXIoWy4uLnBsYXllckhhbmQsY2FyZF0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fTtcblxuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyAgIHNodWZmbGVOZXdEZWNrKCk7XG5cdC8vIH0sIFtdKTtcblxuXHQvLyBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdC8vIFx0Ly8gZGVhbChcInBsYXllclwiKTtcblx0Ly8gXHRjb25zb2xlLmxvZyhcIjExMVwiKTtcblx0Ly8gfSwgMTAwMDApO1xuXG5cdGNvbnN0IFVzZXJJbnB1dCA9ICgpID0+IHtcblx0XHR1c2VJbnB1dCgoaW5wdXQsIGtleSkgPT4ge1xuXHRcdFx0aWYgKGlucHV0ID09PSAncScpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJxdWl0dHlcIik7XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKGtleS5sZWZ0QXJyb3cpIHtcblx0XHRcdFx0Ly8gTGVmdCBhcnJvdyBrZXkgcHJlc3NlZFxuXHRcdFx0XHRjb25zb2xlLmxvZyhcImxlZnR5XCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcblx0XHRyZXR1cm4gXCJcIjtcblx0fTtcblxuXG4gIHJldHVybiAoXG4gICAgPEJveD5cblx0XHQ8VGV4dD5EZWNrIENvdW50OiB7ZGVjay5sZW5ndGh9PC9UZXh0PlxuICAgIDwvQm94PlxuICApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7Il19