'use strict';

const React = require('react');

const {
  render,
  Text,
  Color,
  Box
} = require('ink');

const {
  useInput
} = require('ink');

const TextInput = require('ink-text-input').default;

const Shuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // const [playingDeck, setDeck] = React.useState([]);
  const [count, setCount] = useState(0); // let deck = Shuffle({Deck}).map(a => ({...a}));
  // let deck2 = Shuffle({Deck}).map(a => ({...a}));
  // let deck3 = Shuffle({Deck}).map(a => ({...a}));
  // let deck4 = Shuffle({Deck}).map(a => ({...a}));
  // let deck5 = Shuffle({Deck}).map(a => ({...a}));
  // let deck6 = Shuffle({Deck}).map(a => ({...a}));
  // deck.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
  // React.useEffect(() => {
  // 	console.log('decker');
  // }, [deck])

  React.useEffect(() => {
    const interval = setInterval(() => {
      setCount(count => count + 1);
    }, 100);
    return () => clearInterval(interval);
  }, []); // setInterval(() => {
  // 	console.log('pp');
  // 	deck.pop();
  // }, 4000);

  setTimeout(() => {
    deck.pop();
  }, 5000); // const shuffleNewDeck = () => {
  // 	//event.preventDefault();
  // 	let deck1 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck2 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck3 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck4 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck5 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck6 = Shuffle({Deck}).map(a => ({...a}));
  // 	deck1.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
  // 	setDeck([
  // 	  ...playingDeck,
  // 	  ...deck1
  // 	]);
  // };

  const deal = person => {
    var card = playingDeck.pop();

    switch (person) {
      case "player":
        setPlayer([...playerHand, card]);
        break;

      case "dealer":
        setDealer([...playerHand, card]);
        break;

      default:
        break;
    }
  }; // React.useEffect(() => {
  //   shuffleNewDeck();
  // }, []);
  // setInterval(() => {
  // 	// deal("player");
  // 	console.log("111");
  // }, 10000);


  const UserInput = () => {
    useInput((input, key) => {
      if (input === 'q') {
        console.log("quitty");
      }

      if (key.leftArrow) {
        // Left arrow key pressed
        console.log("lefty");
      }
    });
    return "";
  };

  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Deck Count: ", deck.length), /*#__PURE__*/React.createElement(Text, null, "Count: ", count), ";");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInJlbmRlciIsIlRleHQiLCJDb2xvciIsIkJveCIsInVzZUlucHV0IiwiVGV4dElucHV0IiwiZGVmYXVsdCIsIlNodWZmbGUiLCJEZWNrIiwiQXBwIiwiY291bnQiLCJzZXRDb3VudCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzZXRUaW1lb3V0IiwiZGVjayIsInBvcCIsImRlYWwiLCJwZXJzb24iLCJjYXJkIiwicGxheWluZ0RlY2siLCJzZXRQbGF5ZXIiLCJwbGF5ZXJIYW5kIiwic2V0RGVhbGVyIiwiVXNlcklucHV0IiwiaW5wdXQiLCJrZXkiLCJjb25zb2xlIiwibG9nIiwibGVmdEFycm93IiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBLE1BQUQ7QUFBU0MsRUFBQUEsSUFBVDtBQUFlQyxFQUFBQSxLQUFmO0FBQXNCQyxFQUFBQTtBQUF0QixJQUE2QkosT0FBTyxDQUFDLEtBQUQsQ0FBMUM7O0FBQ0EsTUFBTTtBQUFDSyxFQUFBQTtBQUFELElBQWFMLE9BQU8sQ0FBQyxLQUFELENBQTFCOztBQUVBLE1BQU1NLFNBQVMsR0FBR04sT0FBTyxDQUFDLGdCQUFELENBQVAsQ0FBMEJPLE9BQTVDOztBQUNBLE1BQU1DLE9BQU8sR0FBR1IsT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBQ0EsTUFBTVMsSUFBSSxHQUFHVCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFFQSxNQUFNVSxHQUFHLEdBQUcsTUFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQkMsUUFBUSxDQUFDLENBQUQsQ0FBbEMsQ0FKaUIsQ0FPakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7O0FBRUFkLEVBQUFBLEtBQUssQ0FBQ2UsU0FBTixDQUFnQixNQUFNO0FBQ3JCLFVBQU1DLFFBQVEsR0FBR0MsV0FBVyxDQUFDLE1BQU07QUFDakNKLE1BQUFBLFFBQVEsQ0FBQ0QsS0FBSyxJQUFJQSxLQUFLLEdBQUcsQ0FBbEIsQ0FBUjtBQUNELEtBRjJCLEVBRXpCLEdBRnlCLENBQTVCO0FBR0EsV0FBTyxNQUFNTSxhQUFhLENBQUNGLFFBQUQsQ0FBMUI7QUFDQyxHQUxGLEVBS0ksRUFMSixFQXBCaUIsQ0E0QmpCO0FBQ0E7QUFDQTtBQUNBOztBQUVBRyxFQUFBQSxVQUFVLENBQUMsTUFBTTtBQUNoQkMsSUFBQUEsSUFBSSxDQUFDQyxHQUFMO0FBQ0EsR0FGUyxFQUVQLElBRk8sQ0FBVixDQWpDaUIsQ0FxQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBTUMsSUFBSSxHQUFJQyxNQUFELElBQVk7QUFDeEIsUUFBSUMsSUFBSSxHQUFHQyxXQUFXLENBQUNKLEdBQVosRUFBWDs7QUFDQSxZQUFRRSxNQUFSO0FBQ0MsV0FBSyxRQUFMO0FBQ0NHLFFBQUFBLFNBQVMsQ0FBQyxDQUFDLEdBQUdDLFVBQUosRUFBZUgsSUFBZixDQUFELENBQVQ7QUFDQTs7QUFDRCxXQUFLLFFBQUw7QUFDQ0ksUUFBQUEsU0FBUyxDQUFDLENBQUMsR0FBR0QsVUFBSixFQUFlSCxJQUFmLENBQUQsQ0FBVDtBQUNBOztBQUNEO0FBQ0M7QUFSRjtBQVVBLEdBWkQsQ0FyRGlCLENBbUVqQjtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUEsUUFBTUssU0FBUyxHQUFHLE1BQU07QUFDdkJ2QixJQUFBQSxRQUFRLENBQUMsQ0FBQ3dCLEtBQUQsRUFBUUMsR0FBUixLQUFnQjtBQUN4QixVQUFJRCxLQUFLLEtBQUssR0FBZCxFQUFtQjtBQUNsQkUsUUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksUUFBWjtBQUNBOztBQUVELFVBQUlGLEdBQUcsQ0FBQ0csU0FBUixFQUFtQjtBQUNsQjtBQUNBRixRQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaO0FBQ0E7QUFDRCxLQVRPLENBQVI7QUFXQSxXQUFPLEVBQVA7QUFDQSxHQWJEOztBQWdCQyxzQkFDRSxvQkFBQyxHQUFELHFCQUNGLG9CQUFDLElBQUQsd0JBQW1CYixJQUFJLENBQUNlLE1BQXhCLENBREUsZUFFRixvQkFBQyxJQUFELG1CQUFjdkIsS0FBZCxDQUZFLE1BREY7QUFNRCxDQWxHRDs7QUFvR0F3QixNQUFNLENBQUNDLE9BQVAsR0FBaUIxQixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHtyZW5kZXIsIFRleHQsIENvbG9yLCBCb3h9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCB7dXNlSW5wdXR9ID0gcmVxdWlyZSgnaW5rJyk7XG5cbmNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IFNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUnKTtcbmNvbnN0IERlY2sgPSByZXF1aXJlKCcuL2RlY2snKTtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHQvLyBjb25zdCBbcGxheWVySGFuZCwgc2V0UGxheWVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Ly8gY29uc3QgW2RlYWxlckhhbmQsIHNldERlYWxlcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdC8vIGNvbnN0IFtwbGF5aW5nRGVjaywgc2V0RGVja10gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdGNvbnN0IFtjb3VudCwgc2V0Q291bnRdID0gdXNlU3RhdGUoMCk7XG5cblxuXHQvLyBsZXQgZGVjayA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdC8vIGxldCBkZWNrMiA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdC8vIGxldCBkZWNrMyA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdC8vIGxldCBkZWNrNCA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdC8vIGxldCBkZWNrNSA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdC8vIGxldCBkZWNrNiA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cblx0Ly8gZGVjay5wdXNoKC4uLmRlY2syLCAuLi5kZWNrMywgLi4uZGVjazQsIC4uLmRlY2s1LCAuLi5kZWNrNik7XG5cblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zb2xlLmxvZygnZGVja2VyJyk7XG5cdC8vIH0sIFtkZWNrXSlcblxuXHRSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdCAgc2V0Q291bnQoY291bnQgPT4gY291bnQgKyAxKTtcblx0XHR9LCAxMDApO1xuXHRcdHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGludGVydmFsKTtcblx0XHR9LCBbXSk7XG5cblxuXHQvLyBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdC8vIFx0Y29uc29sZS5sb2coJ3BwJyk7XG5cdC8vIFx0ZGVjay5wb3AoKTtcblx0Ly8gfSwgNDAwMCk7XG5cblx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0ZGVjay5wb3AoKVxuXHR9LCA1MDAwKTtcblx0XG5cdC8vIGNvbnN0IHNodWZmbGVOZXdEZWNrID0gKCkgPT4ge1xuXHQvLyBcdC8vZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0Ly8gXHRsZXQgZGVjazEgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHQvLyBcdGxldCBkZWNrMiA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdC8vIFx0bGV0IGRlY2szID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0Ly8gXHRsZXQgZGVjazQgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHQvLyBcdGxldCBkZWNrNSA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdC8vIFx0bGV0IGRlY2s2ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblxuXHQvLyBcdGRlY2sxLnB1c2goLi4uZGVjazIsIC4uLmRlY2szLCAuLi5kZWNrNCwgLi4uZGVjazUsIC4uLmRlY2s2KTtcblx0Ly8gXHRzZXREZWNrKFtcblx0Ly8gXHQgIC4uLnBsYXlpbmdEZWNrLFxuXHQvLyBcdCAgLi4uZGVjazFcblx0Ly8gXHRdKTtcblx0Ly8gfTtcblxuXHRjb25zdCBkZWFsID0gKHBlcnNvbikgPT4ge1xuXHRcdHZhciBjYXJkID0gcGxheWluZ0RlY2sucG9wKCk7XG5cdFx0c3dpdGNoIChwZXJzb24pIHtcblx0XHRcdGNhc2UgXCJwbGF5ZXJcIjpcblx0XHRcdFx0c2V0UGxheWVyKFsuLi5wbGF5ZXJIYW5kLGNhcmRdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiZGVhbGVyXCI6XG5cdFx0XHRcdHNldERlYWxlcihbLi4ucGxheWVySGFuZCxjYXJkXSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vICAgc2h1ZmZsZU5ld0RlY2soKTtcblx0Ly8gfSwgW10pO1xuXG5cdC8vIHNldEludGVydmFsKCgpID0+IHtcblx0Ly8gXHQvLyBkZWFsKFwicGxheWVyXCIpO1xuXHQvLyBcdGNvbnNvbGUubG9nKFwiMTExXCIpO1xuXHQvLyB9LCAxMDAwMCk7XG5cblx0Y29uc3QgVXNlcklucHV0ID0gKCkgPT4ge1xuXHRcdHVzZUlucHV0KChpbnB1dCwga2V5KSA9PiB7XG5cdFx0XHRpZiAoaW5wdXQgPT09ICdxJykge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcInF1aXR0eVwiKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoa2V5LmxlZnRBcnJvdykge1xuXHRcdFx0XHQvLyBMZWZ0IGFycm93IGtleSBwcmVzc2VkXG5cdFx0XHRcdGNvbnNvbGUubG9nKFwibGVmdHlcIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFxuXHRcdHJldHVybiBcIlwiO1xuXHR9O1xuXG5cbiAgcmV0dXJuIChcbiAgICA8Qm94PlxuXHRcdDxUZXh0PkRlY2sgQ291bnQ6IHtkZWNrLmxlbmd0aH08L1RleHQ+XG5cdFx0PFRleHQ+Q291bnQ6IHtjb3VudH08L1RleHQ+O1xuICAgIDwvQm94PlxuICApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7Il19