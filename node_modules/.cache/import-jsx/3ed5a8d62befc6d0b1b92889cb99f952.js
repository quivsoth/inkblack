'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  //const [playingDeck, setDeck] = React.useState(MultiShuffle());
  const [state, dispatch] = React.useReducer(reducer, playingDeck);
  const initialState = 0;

  const reducer = (state, action) => {
    switch (action) {
      case 'update':
        return state + 1;

      case 'delete':
        return state - 1;

      default:
        throw new Error('Unexpected action');
    }

    ;
  }; // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);


  React.useEffect(() => {
    const timer = setInterval(() => {
      // setDeck([
      // 	...playingDeck,
      // 	...deck
      // ]);
      var array = [...playingDeck]; // make a separate copy of the array

      array.pop(); // setDeck(array);

      setDeck([...playingDeck, null]);
      console.log(array.length);
    }, 1000);
    return () => {
      clearInterval(timer);
    };
  }, []);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Card Count: ", playingDeck.length, " "));
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkFwcCIsInN0YXRlIiwiZGlzcGF0Y2giLCJ1c2VSZWR1Y2VyIiwicmVkdWNlciIsInBsYXlpbmdEZWNrIiwiaW5pdGlhbFN0YXRlIiwiYWN0aW9uIiwiRXJyb3IiLCJ1c2VFZmZlY3QiLCJ0aW1lciIsInNldEludGVydmFsIiwiYXJyYXkiLCJwb3AiLCJzZXREZWNrIiwiY29uc29sZSIsImxvZyIsImxlbmd0aCIsImNsZWFySW50ZXJ2YWwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQSxNQUFYO0FBQW1CQyxFQUFBQSxJQUFuQjtBQUF5QkMsRUFBQUEsS0FBekI7QUFBZ0NDLEVBQUFBO0FBQWhDLElBQXVDTCxPQUFPLENBQUMsS0FBRCxDQUFwRCxDLENBQ0E7OztBQUNBLE1BQU1NLFlBQVksR0FBR04sT0FBTyxDQUFDLFdBQUQsQ0FBNUI7O0FBQ0EsTUFBTU8sSUFBSSxHQUFHUCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFJQSxNQUFNUSxHQUFHLEdBQUcsTUFBTTtBQUNqQjtBQUVBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CWCxLQUFLLENBQUNZLFVBQU4sQ0FBaUJDLE9BQWpCLEVBQTBCQyxXQUExQixDQUExQjtBQUNBLFFBQU1DLFlBQVksR0FBRyxDQUFyQjs7QUFDQSxRQUFNRixPQUFPLEdBQUcsQ0FBQ0gsS0FBRCxFQUFRTSxNQUFSLEtBQW1CO0FBQ2hDLFlBQVFBLE1BQVI7QUFDRSxXQUFLLFFBQUw7QUFBZSxlQUFPTixLQUFLLEdBQUcsQ0FBZjs7QUFDZixXQUFLLFFBQUw7QUFBZSxlQUFPQSxLQUFLLEdBQUcsQ0FBZjs7QUFDZjtBQUFTLGNBQU0sSUFBSU8sS0FBSixDQUFVLG1CQUFWLENBQU47QUFIWDs7QUFJRDtBQUNELEdBTkQsQ0FMaUIsQ0FjakI7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQWpCLEVBQUFBLEtBQUssQ0FBQ2tCLFNBQU4sQ0FBZ0IsTUFBTTtBQUNyQixVQUFNQyxLQUFLLEdBQUdDLFdBQVcsQ0FBQyxNQUFNO0FBQy9CO0FBRUM7QUFDQTtBQUNBO0FBRUEsVUFBSUMsS0FBSyxHQUFHLENBQUMsR0FBR1AsV0FBSixDQUFaLENBUDhCLENBT0E7O0FBQzlCTyxNQUFBQSxLQUFLLENBQUNDLEdBQU4sR0FSOEIsQ0FTOUI7O0FBQ0FDLE1BQUFBLE9BQU8sQ0FBQyxDQUNOLEdBQUdULFdBREcsRUFFTixJQUZNLENBQUQsQ0FBUDtBQUtBVSxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUosS0FBSyxDQUFDSyxNQUFsQjtBQUNBLEtBaEJ1QixFQWlCdkIsSUFqQnVCLENBQXpCO0FBa0JBLFdBQU8sTUFBTTtBQUNaQyxNQUFBQSxhQUFhLENBQUNSLEtBQUQsQ0FBYjtBQUNBLEtBRkQ7QUFHQSxHQXRCRCxFQXNCRyxFQXRCSDtBQXVCQSxzQkFDQyxvQkFBQyxHQUFELHFCQUNDLG9CQUFDLElBQUQsd0JBQW1CTCxXQUFXLENBQUNZLE1BQS9CLE1BREQsQ0FERDtBQU1BLENBcEREOztBQXNEQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCcEIsR0FBakIsQyxDQU1BO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlSW5wdXQsIHJlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbi8vIGNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IE11bHRpU2h1ZmZsZSA9IHJlcXVpcmUoJy4vc2h1ZmZsZScpO1xuY29uc3QgRGVjayA9IHJlcXVpcmUoJy4vZGVjaycpO1xuXG5cblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHQvL2NvbnN0IFtwbGF5aW5nRGVjaywgc2V0RGVja10gPSBSZWFjdC51c2VTdGF0ZShNdWx0aVNodWZmbGUoKSk7XG5cblx0Y29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSBSZWFjdC51c2VSZWR1Y2VyKHJlZHVjZXIsIHBsYXlpbmdEZWNrKTtcblx0Y29uc3QgaW5pdGlhbFN0YXRlID0gMDtcblx0Y29uc3QgcmVkdWNlciA9IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gIFx0XHRzd2l0Y2ggKGFjdGlvbikge1xuICAgIFx0XHRjYXNlICd1cGRhdGUnOiByZXR1cm4gc3RhdGUgKyAxO1xuICAgIFx0XHRjYXNlICdkZWxldGUnOiByZXR1cm4gc3RhdGUgLSAxO1xuICAgIFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgYWN0aW9uJyk7XG5cdFx0fTtcblx0fTtcblxuXG5cdC8vIGNvbnN0IFtwbGF5ZXJIYW5kLCBzZXRQbGF5ZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXHQvLyBjb25zdCBbZGVhbGVySGFuZCwgc2V0RGVhbGVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblxuXG5cdC8vIHNldERlY2soW1xuXHQvLyBcdC4uLnBsYXlpbmdEZWNrLFxuXHQvLyBcdC4uLmRlY2tcblx0Ly8gXSk7XG5cblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdC8vIHNldERlY2soW1xuXG5cdFx0XHRcdC8vIFx0Li4ucGxheWluZ0RlY2ssXG5cdFx0XHRcdC8vIFx0Li4uZGVja1xuXHRcdFx0XHQvLyBdKTtcblxuXHRcdFx0XHR2YXIgYXJyYXkgPSBbLi4ucGxheWluZ0RlY2tdOyAvLyBtYWtlIGEgc2VwYXJhdGUgY29weSBvZiB0aGUgYXJyYXlcblx0XHRcdFx0YXJyYXkucG9wKCk7XG5cdFx0XHRcdC8vIHNldERlY2soYXJyYXkpO1xuXHRcdFx0XHRzZXREZWNrKFtcblx0XHRcdFx0XHRcdC4uLnBsYXlpbmdEZWNrLFxuXHRcdFx0XHRcdFx0bnVsbFxuXHRcdFx0XHRcdF0pO1xuXG5cdFx0XHRcdGNvbnNvbGUubG9nKGFycmF5Lmxlbmd0aCk7XG5cdFx0XHR9XG5cdFx0XHQsMTAwMCk7XG5cdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHRcdH07XG5cdH0sIFtdKTtcblx0cmV0dXJuIChcblx0XHQ8Qm94PlxuXHRcdFx0PFRleHQ+Q2FyZCBDb3VudDoge3BsYXlpbmdEZWNrLmxlbmd0aH0gPC9UZXh0PlxuXHRcdFx0ey8qIDxUZXh0PkNvdW50OiB7Y291bnR9PC9UZXh0PiAqL31cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuXG5cblxuXG5cbi8vIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuLy8gaW1wb3J0IHVzZVNlYXJjaCBmcm9tICcuL2ZldGNoLWl0ZW1zJztcblxuLy8gZnVuY3Rpb24gTXlQYXJlbnQoeyB0ZXJtIH0pIHtcbi8vICAgY29uc3QgaGFuZGxlQ2xpY2sgPSB1c2VDYWxsYmFjaygoaXRlbSkgPT4ge1xuLy8gICAgIGNvbnNvbGUubG9nKCdZb3UgY2xpY2tlZCAnLCBpdGVtKTtcbi8vICAgfSwgW3Rlcm1dKTtcblxuLy8gICBjb25zdCBpdGVtcyA9IHVzZVNlYXJjaCh0ZXJtKTtcblxuLy8gICByZXR1cm4gKFxuLy8gICAgIDxNeUJpZ0xpc3Rcbi8vICAgICAgIGl0ZW1zPXtpdGVtc31cbi8vICAgICAgIGhhbmRsZUNsaWNrPXtoYW5kbGVDbGlja31cbi8vICAgICAvPlxuLy8gICApO1xuLy8gfSJdfQ==