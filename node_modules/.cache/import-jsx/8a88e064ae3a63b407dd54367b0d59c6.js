'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  const [count, setCount] = React.useState(0); // const [playingDeck, setDeck] = React.useState(MultiShuffle());
  // const [value, setValue] = useState("");
  // const addHello = useCallback(() => setValue(value + "Hello!"), [value]);
  // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // const [counter, setCounter] = React.useState(0);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  React.useEffect(() => {
    setCount(count => count + 1);
  }); // React.useEffect(() => {
  // 	const timer = setInterval(() => {
  // 			//console.log('Intervalled');
  // 			playingDeck.pop();
  // 			setCounter(Math.round(Math.random() * 15));
  // 		}
  // 		,200);
  // 	return () => {
  // 		clearInterval(timer);
  // 	};
  // }, []);

  return /*#__PURE__*/React.createElement(Box, null, "Count: ", count);
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkFwcCIsImNvdW50Iiwic2V0Q291bnQiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDQyxFQUFBQSxRQUFEO0FBQVdDLEVBQUFBLE1BQVg7QUFBbUJDLEVBQUFBLElBQW5CO0FBQXlCQyxFQUFBQSxLQUF6QjtBQUFnQ0MsRUFBQUE7QUFBaEMsSUFBdUNMLE9BQU8sQ0FBQyxLQUFELENBQXBELEMsQ0FDQTs7O0FBQ0EsTUFBTU0sWUFBWSxHQUFHTixPQUFPLENBQUMsV0FBRCxDQUE1Qjs7QUFDQSxNQUFNTyxJQUFJLEdBQUdQLE9BQU8sQ0FBQyxRQUFELENBQXBCOztBQUdBLE1BQU1RLEdBQUcsR0FBRyxNQUFNO0FBRWpCLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CWCxLQUFLLENBQUNZLFFBQU4sQ0FBZSxDQUFmLENBQTFCLENBRmlCLENBSWpCO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBWixFQUFBQSxLQUFLLENBQUNhLFNBQU4sQ0FBZ0IsTUFBTTtBQUNyQkYsSUFBQUEsUUFBUSxDQUFDRCxLQUFLLElBQUdBLEtBQUssR0FBQyxDQUFmLENBQVI7QUFDQSxHQUZELEVBbkJpQixDQXVCakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQkFDQyxvQkFBQyxHQUFELG1CQUdTQSxLQUhULENBREQ7QUFPQSxDQTFDRDs7QUE0Q0FJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQk4sR0FBakIsQyxDQU1BO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlSW5wdXQsIHJlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbi8vIGNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IE11bHRpU2h1ZmZsZSA9IHJlcXVpcmUoJy4vc2h1ZmZsZScpO1xuY29uc3QgRGVjayA9IHJlcXVpcmUoJy4vZGVjaycpO1xuXG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcblxuXHRjb25zdCBbY291bnQsIHNldENvdW50XSA9IFJlYWN0LnVzZVN0YXRlKDApO1xuXG5cdC8vIGNvbnN0IFtwbGF5aW5nRGVjaywgc2V0RGVja10gPSBSZWFjdC51c2VTdGF0ZShNdWx0aVNodWZmbGUoKSk7XG5cblx0Ly8gY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VTdGF0ZShcIlwiKTtcblx0Ly8gY29uc3QgYWRkSGVsbG8gPSB1c2VDYWxsYmFjaygoKSA9PiBzZXRWYWx1ZSh2YWx1ZSArIFwiSGVsbG8hXCIpLCBbdmFsdWVdKTtcblxuXG5cdC8vIGNvbnN0IFtwbGF5ZXJIYW5kLCBzZXRQbGF5ZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXHQvLyBjb25zdCBbZGVhbGVySGFuZCwgc2V0RGVhbGVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Ly8gY29uc3QgW2NvdW50ZXIsIHNldENvdW50ZXJdID0gUmVhY3QudXNlU3RhdGUoMCk7XG5cblx0Ly8gc2V0RGVjayhbXG5cdC8vIFx0Li4ucGxheWluZ0RlY2ssXG5cdC8vIFx0Li4uZGVja1xuXHQvLyBdKTtcblxuXHRSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHRcdHNldENvdW50KGNvdW50PT4oY291bnQrMSkpO1xuXHR9KTtcblxuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHQvLyBcdFx0XHQvL2NvbnNvbGUubG9nKCdJbnRlcnZhbGxlZCcpO1xuXHQvLyBcdFx0XHRwbGF5aW5nRGVjay5wb3AoKTtcblx0Ly8gXHRcdFx0c2V0Q291bnRlcihNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxNSkpO1xuXHQvLyBcdFx0fVxuXHQvLyBcdFx0LDIwMCk7XG5cdC8vIFx0cmV0dXJuICgpID0+IHtcblx0Ly8gXHRcdGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHQvLyBcdH07XG5cdC8vIH0sIFtdKTtcblxuXHRyZXR1cm4gKFxuXHRcdDxCb3g+XG5cdFx0XHR7LyogPFRleHQ+Q2FyZCBDb3VudDoge3BsYXlpbmdEZWNrLmxlbmd0aH0gPC9UZXh0PlxuXHRcdFx0PENvdW50ZXIgYWRkSGVsbG89e2FkZEhlbGxvfSBteU9iamVjdD17eyBrZXk6IFwidmFsdWVcIiB9fSAvPiAqL31cblx0XHRcdENvdW50OiB7Y291bnR9XG5cdFx0PC9Cb3g+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcblxuXG5cblxuXG4vLyBpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbi8vIGltcG9ydCB1c2VTZWFyY2ggZnJvbSAnLi9mZXRjaC1pdGVtcyc7XG5cbi8vIGZ1bmN0aW9uIE15UGFyZW50KHsgdGVybSB9KSB7XG4vLyAgIGNvbnN0IGhhbmRsZUNsaWNrID0gdXNlQ2FsbGJhY2soKGl0ZW0pID0+IHtcbi8vICAgICBjb25zb2xlLmxvZygnWW91IGNsaWNrZWQgJywgaXRlbSk7XG4vLyAgIH0sIFt0ZXJtXSk7XG5cbi8vICAgY29uc3QgaXRlbXMgPSB1c2VTZWFyY2godGVybSk7XG5cbi8vICAgcmV0dXJuIChcbi8vICAgICA8TXlCaWdMaXN0XG4vLyAgICAgICBpdGVtcz17aXRlbXN9XG4vLyAgICAgICBoYW5kbGVDbGljaz17aGFuZGxlQ2xpY2t9XG4vLyAgICAgLz5cbi8vICAgKTtcbi8vIH0iXX0=