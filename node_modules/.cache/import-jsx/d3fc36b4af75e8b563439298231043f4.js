'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  const [playingDeck, setDeck] = React.useState(MultiShuffle()); // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  React.useEffect(() => {
    const timer = setInterval(() => {
      console.log('.'); // setDeck([
      // 	...playingDeck,
      // 	...deck
      // ]);

      var array = [...playingDeck]; // make a separate copy of the array

      var index = array.indexOf(array.lengt - 1);

      if (index !== -1) {
        array.splice(index, 1);
        this.setState(array);
      } // playingDeck.pop();
      // setCounter(Math.round(Math.random() * 15));
      // setCount(count=>(count+1));

    }, 2000);
    return () => {
      clearInterval(timer);
    };
  }, []);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Card Count: ", playingDeck.length, " "));
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkFwcCIsInBsYXlpbmdEZWNrIiwic2V0RGVjayIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidGltZXIiLCJzZXRJbnRlcnZhbCIsImNvbnNvbGUiLCJsb2ciLCJhcnJheSIsImluZGV4IiwiaW5kZXhPZiIsImxlbmd0Iiwic3BsaWNlIiwic2V0U3RhdGUiLCJjbGVhckludGVydmFsIiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBLFFBQUQ7QUFBV0MsRUFBQUEsTUFBWDtBQUFtQkMsRUFBQUEsSUFBbkI7QUFBeUJDLEVBQUFBLEtBQXpCO0FBQWdDQyxFQUFBQTtBQUFoQyxJQUF1Q0wsT0FBTyxDQUFDLEtBQUQsQ0FBcEQsQyxDQUNBOzs7QUFDQSxNQUFNTSxZQUFZLEdBQUdOLE9BQU8sQ0FBQyxXQUFELENBQTVCOztBQUNBLE1BQU1PLElBQUksR0FBR1AsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBSUEsTUFBTVEsR0FBRyxHQUFHLE1BQU07QUFDakIsUUFBTSxDQUFDQyxXQUFELEVBQWNDLE9BQWQsSUFBeUJYLEtBQUssQ0FBQ1ksUUFBTixDQUFlTCxZQUFZLEVBQTNCLENBQS9CLENBRGlCLENBRWpCO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQVAsRUFBQUEsS0FBSyxDQUFDYSxTQUFOLENBQWdCLE1BQU07QUFDckIsVUFBTUMsS0FBSyxHQUFHQyxXQUFXLENBQUMsTUFBTTtBQUM5QkMsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksR0FBWixFQUQ4QixDQUU5QjtBQUNBO0FBQ0E7QUFDQTs7QUFLQSxVQUFJQyxLQUFLLEdBQUcsQ0FBQyxHQUFHUixXQUFKLENBQVosQ0FWOEIsQ0FVQTs7QUFDOUIsVUFBSVMsS0FBSyxHQUFHRCxLQUFLLENBQUNFLE9BQU4sQ0FBY0YsS0FBSyxDQUFDRyxLQUFOLEdBQWMsQ0FBNUIsQ0FBWjs7QUFDQSxVQUFJRixLQUFLLEtBQUssQ0FBQyxDQUFmLEVBQWtCO0FBQ2pCRCxRQUFBQSxLQUFLLENBQUNJLE1BQU4sQ0FBYUgsS0FBYixFQUFvQixDQUFwQjtBQUNBLGFBQUtJLFFBQUwsQ0FBY0wsS0FBZDtBQUNBLE9BZjZCLENBb0I5QjtBQUNBO0FBQ0E7O0FBQ0EsS0F2QnVCLEVBd0J2QixJQXhCdUIsQ0FBekI7QUF5QkEsV0FBTyxNQUFNO0FBQ1pNLE1BQUFBLGFBQWEsQ0FBQ1YsS0FBRCxDQUFiO0FBQ0EsS0FGRDtBQUdBLEdBN0JELEVBNkJHLEVBN0JIO0FBOEJBLHNCQUNDLG9CQUFDLEdBQUQscUJBQ0Msb0JBQUMsSUFBRCx3QkFBbUJKLFdBQVcsQ0FBQ2UsTUFBL0IsTUFERCxDQUREO0FBTUEsQ0EvQ0Q7O0FBaURBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJsQixHQUFqQixDLENBTUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHt1c2VJbnB1dCwgcmVuZGVyLCBUZXh0LCBDb2xvciwgQm94fSA9IHJlcXVpcmUoJ2luaycpO1xuLy8gY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZSgnaW5rLXRleHQtaW5wdXQnKS5kZWZhdWx0O1xuY29uc3QgTXVsdGlTaHVmZmxlID0gcmVxdWlyZSgnLi9zaHVmZmxlJyk7XG5jb25zdCBEZWNrID0gcmVxdWlyZSgnLi9kZWNrJyk7XG5cblxuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG5cdGNvbnN0IFtwbGF5aW5nRGVjaywgc2V0RGVja10gPSBSZWFjdC51c2VTdGF0ZShNdWx0aVNodWZmbGUoKSk7XG5cdC8vIGNvbnN0IFtwbGF5ZXJIYW5kLCBzZXRQbGF5ZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXHQvLyBjb25zdCBbZGVhbGVySGFuZCwgc2V0RGVhbGVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblxuXG5cdC8vIHNldERlY2soW1xuXHQvLyBcdC4uLnBsYXlpbmdEZWNrLFxuXHQvLyBcdC4uLmRlY2tcblx0Ly8gXSk7XG5cblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdFx0Y29uc29sZS5sb2coJy4nKTtcblx0XHRcdFx0Ly8gc2V0RGVjayhbXG5cdFx0XHRcdC8vIFx0Li4ucGxheWluZ0RlY2ssXG5cdFx0XHRcdC8vIFx0Li4uZGVja1xuXHRcdFx0XHQvLyBdKTtcblxuXG5cblxuXHRcdFx0XHR2YXIgYXJyYXkgPSBbLi4ucGxheWluZ0RlY2tdOyAvLyBtYWtlIGEgc2VwYXJhdGUgY29weSBvZiB0aGUgYXJyYXlcblx0XHRcdFx0dmFyIGluZGV4ID0gYXJyYXkuaW5kZXhPZihhcnJheS5sZW5ndCAtIDEpO1xuXHRcdFx0XHRpZiAoaW5kZXggIT09IC0xKSB7XG5cdFx0XHRcdFx0YXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHR0aGlzLnNldFN0YXRlKGFycmF5KTtcblx0XHRcdFx0fVxuXG5cblxuXG5cdFx0XHRcdC8vIHBsYXlpbmdEZWNrLnBvcCgpO1xuXHRcdFx0XHQvLyBzZXRDb3VudGVyKE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDE1KSk7XG5cdFx0XHRcdC8vIHNldENvdW50KGNvdW50PT4oY291bnQrMSkpO1xuXHRcdFx0fVxuXHRcdFx0LDIwMDApO1xuXHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRjbGVhckludGVydmFsKHRpbWVyKTtcblx0XHR9O1xuXHR9LCBbXSk7XG5cdHJldHVybiAoXG5cdFx0PEJveD5cblx0XHRcdDxUZXh0PkNhcmQgQ291bnQ6IHtwbGF5aW5nRGVjay5sZW5ndGh9IDwvVGV4dD5cblx0XHRcdHsvKiA8VGV4dD5Db3VudDoge2NvdW50fTwvVGV4dD4gKi99XG5cdFx0PC9Cb3g+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcblxuXG5cblxuXG4vLyBpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbi8vIGltcG9ydCB1c2VTZWFyY2ggZnJvbSAnLi9mZXRjaC1pdGVtcyc7XG5cbi8vIGZ1bmN0aW9uIE15UGFyZW50KHsgdGVybSB9KSB7XG4vLyAgIGNvbnN0IGhhbmRsZUNsaWNrID0gdXNlQ2FsbGJhY2soKGl0ZW0pID0+IHtcbi8vICAgICBjb25zb2xlLmxvZygnWW91IGNsaWNrZWQgJywgaXRlbSk7XG4vLyAgIH0sIFt0ZXJtXSk7XG5cbi8vICAgY29uc3QgaXRlbXMgPSB1c2VTZWFyY2godGVybSk7XG5cbi8vICAgcmV0dXJuIChcbi8vICAgICA8TXlCaWdMaXN0XG4vLyAgICAgICBpdGVtcz17aXRlbXN9XG4vLyAgICAgICBoYW5kbGVDbGljaz17aGFuZGxlQ2xpY2t9XG4vLyAgICAgLz5cbi8vICAgKTtcbi8vIH0iXX0=