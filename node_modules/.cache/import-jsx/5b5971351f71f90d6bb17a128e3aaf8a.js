'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  const [playingDeck, setDeck] = React.useState(MultiShuffle());
  const [playerHand, setPlayer] = React.useState([]);
  const [dealerHand, setDealer] = React.useState([]);
  const [counter, setCounter] = React.useState(0); // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  React.useEffect(() => {
    const timer = setInterval(() => handleRemoveItem(), 1000);
    return () => {
      clearInterval(timer);
    };
  }, []);

  const handleRemoveItem = () => {
    let e = playingDeck[playingDeck.length - 1];
    let newArray = playingDeck.filter(function (remainder) {
      return remainder != e;
    });
    console.log(newArray.length);
    setDeck(newArray); // setDeck(playingDeck.filter((e)=>(e !== e)));

    console.log("handleRemoveItem: " + playingDeck.length);
  };

  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Card Count: ", playingDeck.length, " "));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkFwcCIsInBsYXlpbmdEZWNrIiwic2V0RGVjayIsInVzZVN0YXRlIiwicGxheWVySGFuZCIsInNldFBsYXllciIsImRlYWxlckhhbmQiLCJzZXREZWFsZXIiLCJjb3VudGVyIiwic2V0Q291bnRlciIsInVzZUVmZmVjdCIsInRpbWVyIiwic2V0SW50ZXJ2YWwiLCJoYW5kbGVSZW1vdmVJdGVtIiwiY2xlYXJJbnRlcnZhbCIsImUiLCJsZW5ndGgiLCJuZXdBcnJheSIsImZpbHRlciIsInJlbWFpbmRlciIsImNvbnNvbGUiLCJsb2ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQSxNQUFYO0FBQW1CQyxFQUFBQSxJQUFuQjtBQUF5QkMsRUFBQUEsS0FBekI7QUFBZ0NDLEVBQUFBO0FBQWhDLElBQXVDTCxPQUFPLENBQUMsS0FBRCxDQUFwRCxDLENBQ0E7OztBQUNBLE1BQU1NLFlBQVksR0FBR04sT0FBTyxDQUFDLFdBQUQsQ0FBNUI7O0FBQ0EsTUFBTU8sSUFBSSxHQUFHUCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFFQSxNQUFNUSxHQUFHLEdBQUcsTUFBTTtBQUVqQixRQUFNLENBQUNDLFdBQUQsRUFBY0MsT0FBZCxJQUF5QlgsS0FBSyxDQUFDWSxRQUFOLENBQWVMLFlBQVksRUFBM0IsQ0FBL0I7QUFDQSxRQUFNLENBQUNNLFVBQUQsRUFBYUMsU0FBYixJQUEwQmQsS0FBSyxDQUFDWSxRQUFOLENBQWUsRUFBZixDQUFoQztBQUNBLFFBQU0sQ0FBQ0csVUFBRCxFQUFhQyxTQUFiLElBQTBCaEIsS0FBSyxDQUFDWSxRQUFOLENBQWUsRUFBZixDQUFoQztBQUNBLFFBQU0sQ0FBQ0ssT0FBRCxFQUFVQyxVQUFWLElBQXdCbEIsS0FBSyxDQUFDWSxRQUFOLENBQWUsQ0FBZixDQUE5QixDQUxpQixDQU9qQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQVosRUFBQUEsS0FBSyxDQUFDbUIsU0FBTixDQUFnQixNQUFNO0FBQ3JCLFVBQU1DLEtBQUssR0FBR0MsV0FBVyxDQUFDLE1BQU1DLGdCQUFnQixFQUF2QixFQUEyQixJQUEzQixDQUF6QjtBQUNBLFdBQU8sTUFBTTtBQUNaQyxNQUFBQSxhQUFhLENBQUNILEtBQUQsQ0FBYjtBQUNBLEtBRkQ7QUFHQSxHQUxELEVBS0csRUFMSDs7QUFPQSxRQUFNRSxnQkFBZ0IsR0FBRyxNQUFNO0FBQzlCLFFBQUlFLENBQUMsR0FBR2QsV0FBVyxDQUFDQSxXQUFXLENBQUNlLE1BQVosR0FBcUIsQ0FBdEIsQ0FBbkI7QUFDQSxRQUFJQyxRQUFRLEdBQUdoQixXQUFXLENBQUNpQixNQUFaLENBQW1CLFVBQVNDLFNBQVQsRUFBb0I7QUFDckQsYUFBT0EsU0FBUyxJQUFJSixDQUFwQjtBQUNBLEtBRmMsQ0FBZjtBQUdBSyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUosUUFBUSxDQUFDRCxNQUFyQjtBQUNBZCxJQUFBQSxPQUFPLENBQUNlLFFBQUQsQ0FBUCxDQU44QixDQU85Qjs7QUFDQUcsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksdUJBQXVCcEIsV0FBVyxDQUFDZSxNQUEvQztBQUNBLEdBVEQ7O0FBVUEsc0JBQ0Msb0JBQUMsR0FBRCxxQkFDQyxvQkFBQyxJQUFELHdCQUFtQmYsV0FBVyxDQUFDZSxNQUEvQixNQURELENBREQ7QUFLQSxDQWxDRDs7QUFvQ0FNLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnZCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3VzZUlucHV0LCByZW5kZXIsIFRleHQsIENvbG9yLCBCb3h9ID0gcmVxdWlyZSgnaW5rJyk7XG4vLyBjb25zdCBUZXh0SW5wdXQgPSByZXF1aXJlKCdpbmstdGV4dC1pbnB1dCcpLmRlZmF1bHQ7XG5jb25zdCBNdWx0aVNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUnKTtcbmNvbnN0IERlY2sgPSByZXF1aXJlKCcuL2RlY2snKTtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXG5cdGNvbnN0IFtwbGF5aW5nRGVjaywgc2V0RGVja10gPSBSZWFjdC51c2VTdGF0ZShNdWx0aVNodWZmbGUoKSk7XG5cdGNvbnN0IFtwbGF5ZXJIYW5kLCBzZXRQbGF5ZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXHRjb25zdCBbZGVhbGVySGFuZCwgc2V0RGVhbGVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Y29uc3QgW2NvdW50ZXIsIHNldENvdW50ZXJdID0gUmVhY3QudXNlU3RhdGUoMCk7XG5cblx0Ly8gc2V0RGVjayhbXG5cdC8vIFx0Li4ucGxheWluZ0RlY2ssXG5cdC8vIFx0Li4uZGVja1xuXHQvLyBdKTtcblxuXHRSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4gaGFuZGxlUmVtb3ZlSXRlbSgpLCAxMDAwKTtcblx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0Y2xlYXJJbnRlcnZhbCh0aW1lcik7XG5cdFx0fTtcblx0fSwgW10pO1xuXG5cdGNvbnN0IGhhbmRsZVJlbW92ZUl0ZW0gPSAoKSA9PiB7XG5cdFx0bGV0IGUgPSBwbGF5aW5nRGVja1twbGF5aW5nRGVjay5sZW5ndGggLSAxXTtcblx0XHRsZXQgbmV3QXJyYXkgPSBwbGF5aW5nRGVjay5maWx0ZXIoZnVuY3Rpb24ocmVtYWluZGVyKSB7XG5cdFx0XHRyZXR1cm4gcmVtYWluZGVyICE9IGU7XG5cdFx0fSk7XG5cdFx0Y29uc29sZS5sb2cobmV3QXJyYXkubGVuZ3RoKTtcblx0XHRzZXREZWNrKG5ld0FycmF5KTtcblx0XHQvLyBzZXREZWNrKHBsYXlpbmdEZWNrLmZpbHRlcigoZSk9PihlICE9PSBlKSkpO1xuXHRcdGNvbnNvbGUubG9nKFwiaGFuZGxlUmVtb3ZlSXRlbTogXCIgKyBwbGF5aW5nRGVjay5sZW5ndGgpO1xuXHR9XG5cdHJldHVybiAoXG5cdFx0PEJveD5cblx0XHRcdDxUZXh0PkNhcmQgQ291bnQ6IHtwbGF5aW5nRGVjay5sZW5ndGh9IDwvVGV4dD5cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwOyJdfQ==