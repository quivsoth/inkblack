'use strict';

const React = require('react');

const {
  render,
  Text,
  Color,
  Box
} = require('ink');

const TextInput = require('ink-text-input').default;

const Shuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  const [playerHand, setPlayer] = React.useState([]);
  const [dealerHand, setDealer] = React.useState([]); // const [playingDeck, setDeck] = React.useState([]);

  var playingDeck = [];

  const shuffleNewDeck = () => {
    //event.preventDefault();
    let deck1 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck2 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck3 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck4 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck5 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck6 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    deck1.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
    playeringDeck = [...deck1]; // setDeck([
    //   ...playingDeck,
    //   ...deck1
    // ]);
  };

  const deal = person => {
    var card = playingDeck.pop();

    switch (person) {
      case "player":
        setPlayer([...playerHand, card]);
        break;

      case "dealer":
        setDealer([...playerHand, card]);
        break;

      default:
        break;
    }
  };

  React.useEffect(() => {
    shuffleNewDeck();
  }, []);
  setInterval(() => {
    // deal("player");
    console.log("111");
  }, 10000);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Deck Count: ", playingDeck.length));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInJlbmRlciIsIlRleHQiLCJDb2xvciIsIkJveCIsIlRleHRJbnB1dCIsImRlZmF1bHQiLCJTaHVmZmxlIiwiRGVjayIsIkFwcCIsInBsYXllckhhbmQiLCJzZXRQbGF5ZXIiLCJ1c2VTdGF0ZSIsImRlYWxlckhhbmQiLCJzZXREZWFsZXIiLCJwbGF5aW5nRGVjayIsInNodWZmbGVOZXdEZWNrIiwiZGVjazEiLCJtYXAiLCJhIiwiZGVjazIiLCJkZWNrMyIsImRlY2s0IiwiZGVjazUiLCJkZWNrNiIsInB1c2giLCJwbGF5ZXJpbmdEZWNrIiwiZGVhbCIsInBlcnNvbiIsImNhcmQiLCJwb3AiLCJ1c2VFZmZlY3QiLCJzZXRJbnRlcnZhbCIsImNvbnNvbGUiLCJsb2ciLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsTUFBRDtBQUFTQyxFQUFBQSxJQUFUO0FBQWVDLEVBQUFBLEtBQWY7QUFBc0JDLEVBQUFBO0FBQXRCLElBQTZCSixPQUFPLENBQUMsS0FBRCxDQUExQzs7QUFDQSxNQUFNSyxTQUFTLEdBQUdMLE9BQU8sQ0FBQyxnQkFBRCxDQUFQLENBQTBCTSxPQUE1Qzs7QUFDQSxNQUFNQyxPQUFPLEdBQUdQLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUNBLE1BQU1RLElBQUksR0FBR1IsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBRUEsTUFBTVMsR0FBRyxHQUFHLE1BQU07QUFDakIsUUFBTSxDQUFDQyxVQUFELEVBQWFDLFNBQWIsSUFBMEJaLEtBQUssQ0FBQ2EsUUFBTixDQUFlLEVBQWYsQ0FBaEM7QUFDQSxRQUFNLENBQUNDLFVBQUQsRUFBYUMsU0FBYixJQUEwQmYsS0FBSyxDQUFDYSxRQUFOLENBQWUsRUFBZixDQUFoQyxDQUZpQixDQUdqQjs7QUFFQSxNQUFJRyxXQUFXLEdBQUcsRUFBbEI7O0FBRUEsUUFBTUMsY0FBYyxHQUFHLE1BQU07QUFDNUI7QUFDQSxRQUFJQyxLQUFLLEdBQUdWLE9BQU8sQ0FBQztBQUFDQyxNQUFBQTtBQUFELEtBQUQsQ0FBUCxDQUFnQlUsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosS0FBTCxDQUFyQixDQUFaO0FBQ0EsUUFBSUMsS0FBSyxHQUFHYixPQUFPLENBQUM7QUFBQ0MsTUFBQUE7QUFBRCxLQUFELENBQVAsQ0FBZ0JVLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEtBQUwsQ0FBckIsQ0FBWjtBQUNBLFFBQUlFLEtBQUssR0FBR2QsT0FBTyxDQUFDO0FBQUNDLE1BQUFBO0FBQUQsS0FBRCxDQUFQLENBQWdCVSxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixLQUFMLENBQXJCLENBQVo7QUFDQSxRQUFJRyxLQUFLLEdBQUdmLE9BQU8sQ0FBQztBQUFDQyxNQUFBQTtBQUFELEtBQUQsQ0FBUCxDQUFnQlUsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosS0FBTCxDQUFyQixDQUFaO0FBQ0EsUUFBSUksS0FBSyxHQUFHaEIsT0FBTyxDQUFDO0FBQUNDLE1BQUFBO0FBQUQsS0FBRCxDQUFQLENBQWdCVSxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixLQUFMLENBQXJCLENBQVo7QUFDQSxRQUFJSyxLQUFLLEdBQUdqQixPQUFPLENBQUM7QUFBQ0MsTUFBQUE7QUFBRCxLQUFELENBQVAsQ0FBZ0JVLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEtBQUwsQ0FBckIsQ0FBWjtBQUVBRixJQUFBQSxLQUFLLENBQUNRLElBQU4sQ0FBVyxHQUFHTCxLQUFkLEVBQXFCLEdBQUdDLEtBQXhCLEVBQStCLEdBQUdDLEtBQWxDLEVBQXlDLEdBQUdDLEtBQTVDLEVBQW1ELEdBQUdDLEtBQXREO0FBQ0FFLElBQUFBLGFBQWEsR0FBRyxDQUFDLEdBQUdULEtBQUosQ0FBaEIsQ0FWNEIsQ0FXNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQWZEOztBQWlCQSxRQUFNVSxJQUFJLEdBQUlDLE1BQUQsSUFBWTtBQUN4QixRQUFJQyxJQUFJLEdBQUdkLFdBQVcsQ0FBQ2UsR0FBWixFQUFYOztBQUNBLFlBQVFGLE1BQVI7QUFDQyxXQUFLLFFBQUw7QUFDQ2pCLFFBQUFBLFNBQVMsQ0FBQyxDQUFDLEdBQUdELFVBQUosRUFBZW1CLElBQWYsQ0FBRCxDQUFUO0FBQ0E7O0FBQ0QsV0FBSyxRQUFMO0FBQ0NmLFFBQUFBLFNBQVMsQ0FBQyxDQUFDLEdBQUdKLFVBQUosRUFBZW1CLElBQWYsQ0FBRCxDQUFUO0FBQ0E7O0FBQ0Q7QUFDQztBQVJGO0FBVUEsR0FaRDs7QUFjQTlCLEVBQUFBLEtBQUssQ0FBQ2dDLFNBQU4sQ0FBZ0IsTUFBTTtBQUNwQmYsSUFBQUEsY0FBYztBQUNmLEdBRkQsRUFFRyxFQUZIO0FBSUFnQixFQUFBQSxXQUFXLENBQUMsTUFBTTtBQUNqQjtBQUNBQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxLQUFaO0FBQ0EsR0FIVSxFQUdSLEtBSFEsQ0FBWDtBQUtDLHNCQUNFLG9CQUFDLEdBQUQscUJBQ0Ysb0JBQUMsSUFBRCx3QkFBbUJuQixXQUFXLENBQUNvQixNQUEvQixDQURFLENBREY7QUFLRCxDQXBERDs7QUFxREFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjVCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3JlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IFNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUnKTtcbmNvbnN0IERlY2sgPSByZXF1aXJlKCcuL2RlY2snKTtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHRjb25zdCBbcGxheWVySGFuZCwgc2V0UGxheWVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Y29uc3QgW2RlYWxlckhhbmQsIHNldERlYWxlcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdC8vIGNvbnN0IFtwbGF5aW5nRGVjaywgc2V0RGVja10gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cblx0dmFyIHBsYXlpbmdEZWNrID0gW107XG5cblx0Y29uc3Qgc2h1ZmZsZU5ld0RlY2sgPSAoKSA9PiB7XG5cdFx0Ly9ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGxldCBkZWNrMSA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdFx0bGV0IGRlY2syID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0XHRsZXQgZGVjazMgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRcdGxldCBkZWNrNCA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdFx0bGV0IGRlY2s1ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0XHRsZXQgZGVjazYgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXG5cdFx0ZGVjazEucHVzaCguLi5kZWNrMiwgLi4uZGVjazMsIC4uLmRlY2s0LCAuLi5kZWNrNSwgLi4uZGVjazYpO1xuXHRcdHBsYXllcmluZ0RlY2sgPSBbLi4uZGVjazFdO1xuXHRcdC8vIHNldERlY2soW1xuXHRcdC8vICAgLi4ucGxheWluZ0RlY2ssXG5cdFx0Ly8gICAuLi5kZWNrMVxuXHRcdC8vIF0pO1xuXHR9O1xuXG5cdGNvbnN0IGRlYWwgPSAocGVyc29uKSA9PiB7XG5cdFx0dmFyIGNhcmQgPSBwbGF5aW5nRGVjay5wb3AoKTtcblx0XHRzd2l0Y2ggKHBlcnNvbikge1xuXHRcdFx0Y2FzZSBcInBsYXllclwiOlxuXHRcdFx0XHRzZXRQbGF5ZXIoWy4uLnBsYXllckhhbmQsY2FyZF0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJkZWFsZXJcIjpcblx0XHRcdFx0c2V0RGVhbGVyKFsuLi5wbGF5ZXJIYW5kLGNhcmRdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH07XG5cblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0ICBzaHVmZmxlTmV3RGVjaygpO1xuXHR9LCBbXSk7XG5cblx0c2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdC8vIGRlYWwoXCJwbGF5ZXJcIik7XG5cdFx0Y29uc29sZS5sb2coXCIxMTFcIik7XG5cdH0sIDEwMDAwKTtcblxuICByZXR1cm4gKFxuICAgIDxCb3g+XG5cdFx0PFRleHQ+RGVjayBDb3VudDoge3BsYXlpbmdEZWNrLmxlbmd0aH08L1RleHQ+XG4gICAgPC9Cb3g+XG4gICk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBBcHA7Il19