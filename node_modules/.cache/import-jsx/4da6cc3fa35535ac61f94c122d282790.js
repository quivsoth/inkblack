'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const Child = require('./child');

const App = () => {
  console.log("PARENT");
  const [playingDeck, setDeck] = React.useState(MultiShuffle()); // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  React.useEffect(() => {
    const timer = setInterval(() => {
      console.log('.'); // playingDeck.pop();
      // setCounter(Math.round(Math.random() * 15));
      // setCount(count=>(count+1));
    }, 2000);
    return () => {
      clearInterval(timer);
    };
  }, []);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Count: ", count), /*#__PURE__*/React.createElement(Child, {
    reset: resetCount
  }));
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkNoaWxkIiwiQXBwIiwiY29uc29sZSIsImxvZyIsInBsYXlpbmdEZWNrIiwic2V0RGVjayIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidGltZXIiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJjb3VudCIsInJlc2V0Q291bnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQSxNQUFYO0FBQW1CQyxFQUFBQSxJQUFuQjtBQUF5QkMsRUFBQUEsS0FBekI7QUFBZ0NDLEVBQUFBO0FBQWhDLElBQXVDTCxPQUFPLENBQUMsS0FBRCxDQUFwRCxDLENBQ0E7OztBQUNBLE1BQU1NLFlBQVksR0FBR04sT0FBTyxDQUFDLFdBQUQsQ0FBNUI7O0FBQ0EsTUFBTU8sSUFBSSxHQUFHUCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFDQSxNQUFNUSxLQUFLLEdBQUdSLE9BQU8sQ0FBQyxTQUFELENBQXJCOztBQUdBLE1BQU1TLEdBQUcsR0FBRyxNQUFNO0FBQ2pCQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxRQUFaO0FBR0EsUUFBTSxDQUFDQyxXQUFELEVBQWNDLE9BQWQsSUFBeUJkLEtBQUssQ0FBQ2UsUUFBTixDQUFlUixZQUFZLEVBQTNCLENBQS9CLENBSmlCLENBS2pCO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQVAsRUFBQUEsS0FBSyxDQUFDZ0IsU0FBTixDQUFnQixNQUFNO0FBQ3JCLFVBQU1DLEtBQUssR0FBR0MsV0FBVyxDQUFDLE1BQU07QUFDOUJQLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLEdBQVosRUFEOEIsQ0FFOUI7QUFDQTtBQUNBO0FBQ0EsS0FMdUIsRUFNdkIsSUFOdUIsQ0FBekI7QUFPQSxXQUFPLE1BQU07QUFDWk8sTUFBQUEsYUFBYSxDQUFDRixLQUFELENBQWI7QUFDQSxLQUZEO0FBR0EsR0FYRCxFQVdHLEVBWEg7QUFZQSxzQkFDQyxvQkFBQyxHQUFELHFCQUVDLG9CQUFDLElBQUQsbUJBQWNHLEtBQWQsQ0FGRCxlQUdDLG9CQUFDLEtBQUQ7QUFBTyxJQUFBLEtBQUssRUFBRUM7QUFBZCxJQUhELENBREQ7QUFPQSxDQWpDRDs7QUFtQ0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmIsR0FBakIsQyxDQU1BO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlSW5wdXQsIHJlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbi8vIGNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IE11bHRpU2h1ZmZsZSA9IHJlcXVpcmUoJy4vc2h1ZmZsZScpO1xuY29uc3QgRGVjayA9IHJlcXVpcmUoJy4vZGVjaycpO1xuY29uc3QgQ2hpbGQgPSByZXF1aXJlKCcuL2NoaWxkJyk7XG5cblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHRjb25zb2xlLmxvZyhcIlBBUkVOVFwiKTtcblxuXG5cdGNvbnN0IFtwbGF5aW5nRGVjaywgc2V0RGVja10gPSBSZWFjdC51c2VTdGF0ZShNdWx0aVNodWZmbGUoKSk7XG5cdC8vIGNvbnN0IFtwbGF5ZXJIYW5kLCBzZXRQbGF5ZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXHQvLyBjb25zdCBbZGVhbGVySGFuZCwgc2V0RGVhbGVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblxuXG5cdC8vIHNldERlY2soW1xuXHQvLyBcdC4uLnBsYXlpbmdEZWNrLFxuXHQvLyBcdC4uLmRlY2tcblx0Ly8gXSk7XG5cblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdFx0Y29uc29sZS5sb2coJy4nKTtcblx0XHRcdFx0Ly8gcGxheWluZ0RlY2sucG9wKCk7XG5cdFx0XHRcdC8vIHNldENvdW50ZXIoTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTUpKTtcblx0XHRcdFx0Ly8gc2V0Q291bnQoY291bnQ9Pihjb3VudCsxKSk7XG5cdFx0XHR9XG5cdFx0XHQsMjAwMCk7XG5cdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHRcdH07XG5cdH0sIFtdKTtcblx0cmV0dXJuIChcblx0XHQ8Qm94PlxuXHRcdFx0ey8qIDxUZXh0PkNhcmQgQ291bnQ6IHtwbGF5aW5nRGVjay5sZW5ndGh9IDwvVGV4dD4gKi99XG5cdFx0XHQ8VGV4dD5Db3VudDoge2NvdW50fTwvVGV4dD5cblx0XHRcdDxDaGlsZCByZXNldD17cmVzZXRDb3VudH0gLz5cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuXG5cblxuXG5cbi8vIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuLy8gaW1wb3J0IHVzZVNlYXJjaCBmcm9tICcuL2ZldGNoLWl0ZW1zJztcblxuLy8gZnVuY3Rpb24gTXlQYXJlbnQoeyB0ZXJtIH0pIHtcbi8vICAgY29uc3QgaGFuZGxlQ2xpY2sgPSB1c2VDYWxsYmFjaygoaXRlbSkgPT4ge1xuLy8gICAgIGNvbnNvbGUubG9nKCdZb3UgY2xpY2tlZCAnLCBpdGVtKTtcbi8vICAgfSwgW3Rlcm1dKTtcblxuLy8gICBjb25zdCBpdGVtcyA9IHVzZVNlYXJjaCh0ZXJtKTtcblxuLy8gICByZXR1cm4gKFxuLy8gICAgIDxNeUJpZ0xpc3Rcbi8vICAgICAgIGl0ZW1zPXtpdGVtc31cbi8vICAgICAgIGhhbmRsZUNsaWNrPXtoYW5kbGVDbGlja31cbi8vICAgICAvPlxuLy8gICApO1xuLy8gfSJdfQ==