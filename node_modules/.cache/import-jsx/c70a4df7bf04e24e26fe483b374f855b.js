'use strict';

const React = require('react');

const {
  render,
  Text,
  Color,
  Box
} = require('ink');

const TextInput = require('ink-text-input').default;

const Shuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  const [playerHand, setPlayer] = React.useState([]);
  const [dealerHand, setDealer] = React.useState([]);
  const [playingDeck, setDeck] = React.useState([]);

  const shuffleNewDeck = () => {
    //event.preventDefault();
    let deck1 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck2 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck3 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck4 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck5 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck6 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    deck1.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
    setDeck([...playingDeck, ...deck1]);
  };

  const deal = person => {
    var card = playingDeck.pop();

    switch (person) {
      case "player":
        setPlayer([...playerHand, card]);
        break;

      case "dealer":
        setDealer([...playerHand, card]);
        break;

      default:
        break;
    }
  };

  React.useEffect(() => {
    shuffleNewDeck();
  }, []); // setInterval(() => {
  // 	// deal("player");
  // 	console.log("111");
  // }, 10000);

  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Deck Count: ", playingDeck.length));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInJlbmRlciIsIlRleHQiLCJDb2xvciIsIkJveCIsIlRleHRJbnB1dCIsImRlZmF1bHQiLCJTaHVmZmxlIiwiRGVjayIsIkFwcCIsInBsYXllckhhbmQiLCJzZXRQbGF5ZXIiLCJ1c2VTdGF0ZSIsImRlYWxlckhhbmQiLCJzZXREZWFsZXIiLCJwbGF5aW5nRGVjayIsInNldERlY2siLCJzaHVmZmxlTmV3RGVjayIsImRlY2sxIiwibWFwIiwiYSIsImRlY2syIiwiZGVjazMiLCJkZWNrNCIsImRlY2s1IiwiZGVjazYiLCJwdXNoIiwiZGVhbCIsInBlcnNvbiIsImNhcmQiLCJwb3AiLCJ1c2VFZmZlY3QiLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsTUFBRDtBQUFTQyxFQUFBQSxJQUFUO0FBQWVDLEVBQUFBLEtBQWY7QUFBc0JDLEVBQUFBO0FBQXRCLElBQTZCSixPQUFPLENBQUMsS0FBRCxDQUExQzs7QUFDQSxNQUFNSyxTQUFTLEdBQUdMLE9BQU8sQ0FBQyxnQkFBRCxDQUFQLENBQTBCTSxPQUE1Qzs7QUFDQSxNQUFNQyxPQUFPLEdBQUdQLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUNBLE1BQU1RLElBQUksR0FBR1IsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBRUEsTUFBTVMsR0FBRyxHQUFHLE1BQU07QUFDakIsUUFBTSxDQUFDQyxVQUFELEVBQWFDLFNBQWIsSUFBMEJaLEtBQUssQ0FBQ2EsUUFBTixDQUFlLEVBQWYsQ0FBaEM7QUFDQSxRQUFNLENBQUNDLFVBQUQsRUFBYUMsU0FBYixJQUEwQmYsS0FBSyxDQUFDYSxRQUFOLENBQWUsRUFBZixDQUFoQztBQUNBLFFBQU0sQ0FBQ0csV0FBRCxFQUFjQyxPQUFkLElBQXlCakIsS0FBSyxDQUFDYSxRQUFOLENBQWUsRUFBZixDQUEvQjs7QUFJQSxRQUFNSyxjQUFjLEdBQUcsTUFBTTtBQUM1QjtBQUNBLFFBQUlDLEtBQUssR0FBR1gsT0FBTyxDQUFDO0FBQUNDLE1BQUFBO0FBQUQsS0FBRCxDQUFQLENBQWdCVyxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixLQUFMLENBQXJCLENBQVo7QUFDQSxRQUFJQyxLQUFLLEdBQUdkLE9BQU8sQ0FBQztBQUFDQyxNQUFBQTtBQUFELEtBQUQsQ0FBUCxDQUFnQlcsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosS0FBTCxDQUFyQixDQUFaO0FBQ0EsUUFBSUUsS0FBSyxHQUFHZixPQUFPLENBQUM7QUFBQ0MsTUFBQUE7QUFBRCxLQUFELENBQVAsQ0FBZ0JXLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEtBQUwsQ0FBckIsQ0FBWjtBQUNBLFFBQUlHLEtBQUssR0FBR2hCLE9BQU8sQ0FBQztBQUFDQyxNQUFBQTtBQUFELEtBQUQsQ0FBUCxDQUFnQlcsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosS0FBTCxDQUFyQixDQUFaO0FBQ0EsUUFBSUksS0FBSyxHQUFHakIsT0FBTyxDQUFDO0FBQUNDLE1BQUFBO0FBQUQsS0FBRCxDQUFQLENBQWdCVyxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixLQUFMLENBQXJCLENBQVo7QUFDQSxRQUFJSyxLQUFLLEdBQUdsQixPQUFPLENBQUM7QUFBQ0MsTUFBQUE7QUFBRCxLQUFELENBQVAsQ0FBZ0JXLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEtBQUwsQ0FBckIsQ0FBWjtBQUVBRixJQUFBQSxLQUFLLENBQUNRLElBQU4sQ0FBVyxHQUFHTCxLQUFkLEVBQXFCLEdBQUdDLEtBQXhCLEVBQStCLEdBQUdDLEtBQWxDLEVBQXlDLEdBQUdDLEtBQTVDLEVBQW1ELEdBQUdDLEtBQXREO0FBQ0FULElBQUFBLE9BQU8sQ0FBQyxDQUNOLEdBQUdELFdBREcsRUFFTixHQUFHRyxLQUZHLENBQUQsQ0FBUDtBQUlBLEdBZEQ7O0FBZ0JBLFFBQU1TLElBQUksR0FBSUMsTUFBRCxJQUFZO0FBQ3hCLFFBQUlDLElBQUksR0FBR2QsV0FBVyxDQUFDZSxHQUFaLEVBQVg7O0FBQ0EsWUFBUUYsTUFBUjtBQUNDLFdBQUssUUFBTDtBQUNDakIsUUFBQUEsU0FBUyxDQUFDLENBQUMsR0FBR0QsVUFBSixFQUFlbUIsSUFBZixDQUFELENBQVQ7QUFDQTs7QUFDRCxXQUFLLFFBQUw7QUFDQ2YsUUFBQUEsU0FBUyxDQUFDLENBQUMsR0FBR0osVUFBSixFQUFlbUIsSUFBZixDQUFELENBQVQ7QUFDQTs7QUFDRDtBQUNDO0FBUkY7QUFVQSxHQVpEOztBQWNBOUIsRUFBQUEsS0FBSyxDQUFDZ0MsU0FBTixDQUFnQixNQUFNO0FBQ3BCZCxJQUFBQSxjQUFjO0FBQ2YsR0FGRCxFQUVHLEVBRkgsRUFyQ2lCLENBeUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQyxzQkFDRSxvQkFBQyxHQUFELHFCQUNGLG9CQUFDLElBQUQsd0JBQW1CRixXQUFXLENBQUNpQixNQUEvQixDQURFLENBREY7QUFLRCxDQW5ERDs7QUFvREFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnpCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3JlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IFNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUnKTtcbmNvbnN0IERlY2sgPSByZXF1aXJlKCcuL2RlY2snKTtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHRjb25zdCBbcGxheWVySGFuZCwgc2V0UGxheWVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Y29uc3QgW2RlYWxlckhhbmQsIHNldERlYWxlcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdGNvbnN0IFtwbGF5aW5nRGVjaywgc2V0RGVja10gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cblxuXHRcblx0Y29uc3Qgc2h1ZmZsZU5ld0RlY2sgPSAoKSA9PiB7XG5cdFx0Ly9ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGxldCBkZWNrMSA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdFx0bGV0IGRlY2syID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0XHRsZXQgZGVjazMgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRcdGxldCBkZWNrNCA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdFx0bGV0IGRlY2s1ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0XHRsZXQgZGVjazYgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXG5cdFx0ZGVjazEucHVzaCguLi5kZWNrMiwgLi4uZGVjazMsIC4uLmRlY2s0LCAuLi5kZWNrNSwgLi4uZGVjazYpO1xuXHRcdHNldERlY2soW1xuXHRcdCAgLi4ucGxheWluZ0RlY2ssXG5cdFx0ICAuLi5kZWNrMVxuXHRcdF0pO1xuXHR9O1xuXG5cdGNvbnN0IGRlYWwgPSAocGVyc29uKSA9PiB7XG5cdFx0dmFyIGNhcmQgPSBwbGF5aW5nRGVjay5wb3AoKTtcblx0XHRzd2l0Y2ggKHBlcnNvbikge1xuXHRcdFx0Y2FzZSBcInBsYXllclwiOlxuXHRcdFx0XHRzZXRQbGF5ZXIoWy4uLnBsYXllckhhbmQsY2FyZF0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJkZWFsZXJcIjpcblx0XHRcdFx0c2V0RGVhbGVyKFsuLi5wbGF5ZXJIYW5kLGNhcmRdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH07XG5cblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0ICBzaHVmZmxlTmV3RGVjaygpO1xuXHR9LCBbXSk7XG5cblx0Ly8gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHQvLyBcdC8vIGRlYWwoXCJwbGF5ZXJcIik7XG5cdC8vIFx0Y29uc29sZS5sb2coXCIxMTFcIik7XG5cdC8vIH0sIDEwMDAwKTtcblxuICByZXR1cm4gKFxuICAgIDxCb3g+XG5cdFx0PFRleHQ+RGVjayBDb3VudDoge3BsYXlpbmdEZWNrLmxlbmd0aH08L1RleHQ+XG4gICAgPC9Cb3g+XG4gICk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBBcHA7Il19