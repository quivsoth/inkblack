'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  //const [playingDeck, setDeck] = React.useState(MultiShuffle());
  const [state, dispatch] = React.useReducer(reducer, playingDeck);
  const initialState = 0;

  const reducer = (state, action) => {
    switch (action) {
      case 'update':
        return state + 1;

      case 'delete':
        return state - 1;

      default:
        throw new Error('Unexpected action');
    }

    ;
  }; // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);


  React.useEffect(() => {
    const timer = setInterval(() => {
      // setDeck([
      // 	...playingDeck,
      // 	...deck
      // ]);
      var array = [...playingDeck]; // make a separate copy of the array

      array.pop(); // setDeck(array);

      setDeck([...playingDeck, null]);
      console.log(array.length);
    }, 1000);
    return () => {
      clearInterval(timer);
    };
  }, []);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Card Count: ", playingDeck.length, " "));
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkFwcCIsInN0YXRlIiwiZGlzcGF0Y2giLCJ1c2VSZWR1Y2VyIiwicmVkdWNlciIsInBsYXlpbmdEZWNrIiwiaW5pdGlhbFN0YXRlIiwiYWN0aW9uIiwiRXJyb3IiLCJ1c2VFZmZlY3QiLCJ0aW1lciIsInNldEludGVydmFsIiwiYXJyYXkiLCJwb3AiLCJzZXREZWNrIiwiY29uc29sZSIsImxvZyIsImxlbmd0aCIsImNsZWFySW50ZXJ2YWwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQSxNQUFYO0FBQW1CQyxFQUFBQSxJQUFuQjtBQUF5QkMsRUFBQUEsS0FBekI7QUFBZ0NDLEVBQUFBO0FBQWhDLElBQXVDTCxPQUFPLENBQUMsS0FBRCxDQUFwRCxDLENBQ0E7OztBQUNBLE1BQU1NLFlBQVksR0FBR04sT0FBTyxDQUFDLFdBQUQsQ0FBNUI7O0FBQ0EsTUFBTU8sSUFBSSxHQUFHUCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFJQSxNQUFNUSxHQUFHLEdBQUcsTUFBTTtBQUNqQjtBQUVBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CWCxLQUFLLENBQUNZLFVBQU4sQ0FBaUJDLE9BQWpCLEVBQTBCQyxXQUExQixDQUExQjtBQUNBLFFBQU1DLFlBQVksR0FBRyxDQUFyQjs7QUFDQSxRQUFNRixPQUFPLEdBQUcsQ0FBQ0gsS0FBRCxFQUFRTSxNQUFSLEtBQW1CO0FBQ2hDLFlBQVFBLE1BQVI7QUFDRSxXQUFLLFFBQUw7QUFBZSxlQUFPTixLQUFLLEdBQUcsQ0FBZjs7QUFDZixXQUFLLFFBQUw7QUFBZSxlQUFPQSxLQUFLLEdBQUcsQ0FBZjs7QUFDZjtBQUFTLGNBQU0sSUFBSU8sS0FBSixDQUFVLG1CQUFWLENBQU47QUFIWDs7QUFJRDtBQUNELEdBTkQsQ0FMaUIsQ0FjakI7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQWpCLEVBQUFBLEtBQUssQ0FBQ2tCLFNBQU4sQ0FBZ0IsTUFBTTtBQUNyQixVQUFNQyxLQUFLLEdBQUdDLFdBQVcsQ0FBQyxNQUFNO0FBQy9CO0FBRUM7QUFDQTtBQUNBO0FBRUEsVUFBSUMsS0FBSyxHQUFHLENBQUMsR0FBR1AsV0FBSixDQUFaLENBUDhCLENBT0E7O0FBQzlCTyxNQUFBQSxLQUFLLENBQUNDLEdBQU4sR0FSOEIsQ0FTOUI7O0FBQ0FDLE1BQUFBLE9BQU8sQ0FBQyxDQUNOLEdBQUdULFdBREcsRUFFTixJQUZNLENBQUQsQ0FBUDtBQUtBVSxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUosS0FBSyxDQUFDSyxNQUFsQjtBQUNBLEtBaEJ1QixFQWlCdkIsSUFqQnVCLENBQXpCO0FBa0JBLFdBQU8sTUFBTTtBQUNaQyxNQUFBQSxhQUFhLENBQUNSLEtBQUQsQ0FBYjtBQUNBLEtBRkQ7QUFHQSxHQXRCRCxFQXNCRyxFQXRCSDtBQXVCQSxzQkFDQyxvQkFBQyxHQUFELHFCQUNDLG9CQUFDLElBQUQsd0JBQW1CTCxXQUFXLENBQUNZLE1BQS9CLE1BREQsQ0FERDtBQU1BLENBcEREOztBQXNEQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCcEIsR0FBakIsQyxDQU1BO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlSW5wdXQsIHJlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbi8vIGNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IE11bHRpU2h1ZmZsZSA9IHJlcXVpcmUoJy4vc2h1ZmZsZScpO1xuY29uc3QgRGVjayA9IHJlcXVpcmUoJy4vZGVjaycpO1xuXG5cblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHQvL2NvbnN0IFtwbGF5aW5nRGVjaywgc2V0RGVja10gPSBSZWFjdC51c2VTdGF0ZShNdWx0aVNodWZmbGUoKSk7XG5cblx0Y29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSBSZWFjdC51c2VSZWR1Y2VyKHJlZHVjZXIsIHBsYXlpbmdEZWNrKTtcblx0Y29uc3QgaW5pdGlhbFN0YXRlID0gMDtcblx0Y29uc3QgcmVkdWNlciA9IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gIFx0XHRzd2l0Y2ggKGFjdGlvbikge1xuICAgIFx0XHRjYXNlICd1cGRhdGUnOiByZXR1cm4gc3RhdGUgKyAxO1xuICAgIFx0XHRjYXNlICdkZWxldGUnOiByZXR1cm4gc3RhdGUgLSAxO1xuICAgIFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgYWN0aW9uJyk7XG5cdFx0fTtcblx0fVxuXG5cblx0Ly8gY29uc3QgW3BsYXllckhhbmQsIHNldFBsYXllcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdC8vIGNvbnN0IFtkZWFsZXJIYW5kLCBzZXREZWFsZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXG5cblx0Ly8gc2V0RGVjayhbXG5cdC8vIFx0Li4ucGxheWluZ0RlY2ssXG5cdC8vIFx0Li4uZGVja1xuXHQvLyBdKTtcblxuXHRSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0Ly8gc2V0RGVjayhbXG5cblx0XHRcdFx0Ly8gXHQuLi5wbGF5aW5nRGVjayxcblx0XHRcdFx0Ly8gXHQuLi5kZWNrXG5cdFx0XHRcdC8vIF0pO1xuXG5cdFx0XHRcdHZhciBhcnJheSA9IFsuLi5wbGF5aW5nRGVja107IC8vIG1ha2UgYSBzZXBhcmF0ZSBjb3B5IG9mIHRoZSBhcnJheVxuXHRcdFx0XHRhcnJheS5wb3AoKTtcblx0XHRcdFx0Ly8gc2V0RGVjayhhcnJheSk7XG5cdFx0XHRcdHNldERlY2soW1xuXHRcdFx0XHRcdFx0Li4ucGxheWluZ0RlY2ssXG5cdFx0XHRcdFx0XHRudWxsXG5cdFx0XHRcdFx0XSk7XG5cblx0XHRcdFx0Y29uc29sZS5sb2coYXJyYXkubGVuZ3RoKTtcblx0XHRcdH1cblx0XHRcdCwxMDAwKTtcblx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0Y2xlYXJJbnRlcnZhbCh0aW1lcik7XG5cdFx0fTtcblx0fSwgW10pO1xuXHRyZXR1cm4gKFxuXHRcdDxCb3g+XG5cdFx0XHQ8VGV4dD5DYXJkIENvdW50OiB7cGxheWluZ0RlY2subGVuZ3RofSA8L1RleHQ+XG5cdFx0XHR7LyogPFRleHQ+Q291bnQ6IHtjb3VudH08L1RleHQ+ICovfVxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG5cblxuXG5cblxuLy8gaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG4vLyBpbXBvcnQgdXNlU2VhcmNoIGZyb20gJy4vZmV0Y2gtaXRlbXMnO1xuXG4vLyBmdW5jdGlvbiBNeVBhcmVudCh7IHRlcm0gfSkge1xuLy8gICBjb25zdCBoYW5kbGVDbGljayA9IHVzZUNhbGxiYWNrKChpdGVtKSA9PiB7XG4vLyAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkICcsIGl0ZW0pO1xuLy8gICB9LCBbdGVybV0pO1xuXG4vLyAgIGNvbnN0IGl0ZW1zID0gdXNlU2VhcmNoKHRlcm0pO1xuXG4vLyAgIHJldHVybiAoXG4vLyAgICAgPE15QmlnTGlzdFxuLy8gICAgICAgaXRlbXM9e2l0ZW1zfVxuLy8gICAgICAgaGFuZGxlQ2xpY2s9e2hhbmRsZUNsaWNrfVxuLy8gICAgIC8+XG4vLyAgICk7XG4vLyB9Il19