'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  //const [playingDeck, setDeck] = React.useState(MultiShuffle());
  const [playingDeck, dispatch] = React.useReducer((state, action) => {
    switch (action.type) {
      case 'add':
        //console.log(state);
        return [...state, MultiShuffle()];

      default:
        return state;
    }
  }, []); //   dispatch({
  // 	type: 'add',
  // 	name: MultiShuffle()
  //   });
  // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  React.useEffect(() => {
    const timer = setInterval(() => {
      dispatch({
        type: 'add',
        name: MultiShuffle()
      }); //console.log(playingDeck.length);
      // setDeck([
      // playingDeck.pop();
      // 	...playingDeck,
      // 	...deck
      // ]);
      // var array = [...playingDeck]; // make a separate copy of the array
      // array.pop();
      // setDeck(array);
      // setDeck([
      // 		...playingDeck,
      // 		null
      // 	]);
      // console.log(array.length);
    }, 1000);
    clearInterval(timer);
    return () => {};
  }, []);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Card Count: ", playingDeck.length, " "));
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkFwcCIsInBsYXlpbmdEZWNrIiwiZGlzcGF0Y2giLCJ1c2VSZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJ0eXBlIiwidXNlRWZmZWN0IiwidGltZXIiLCJzZXRJbnRlcnZhbCIsIm5hbWUiLCJjbGVhckludGVydmFsIiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBLFFBQUQ7QUFBV0MsRUFBQUEsTUFBWDtBQUFtQkMsRUFBQUEsSUFBbkI7QUFBeUJDLEVBQUFBLEtBQXpCO0FBQWdDQyxFQUFBQTtBQUFoQyxJQUF1Q0wsT0FBTyxDQUFDLEtBQUQsQ0FBcEQsQyxDQUNBOzs7QUFDQSxNQUFNTSxZQUFZLEdBQUdOLE9BQU8sQ0FBQyxXQUFELENBQTVCOztBQUNBLE1BQU1PLElBQUksR0FBR1AsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBSUEsTUFBTVEsR0FBRyxHQUFHLE1BQU07QUFDakI7QUFHQSxRQUFNLENBQUNDLFdBQUQsRUFBY0MsUUFBZCxJQUEwQlgsS0FBSyxDQUFDWSxVQUFOLENBQWlCLENBQUNDLEtBQUQsRUFBUUMsTUFBUixLQUFtQjtBQUNuRSxZQUFRQSxNQUFNLENBQUNDLElBQWY7QUFDRSxXQUFLLEtBQUw7QUFDQztBQUNGLGVBQU8sQ0FDTCxHQUFHRixLQURFLEVBRUxOLFlBQVksRUFGUCxDQUFQOztBQUlDO0FBQ0QsZUFBT00sS0FBUDtBQVJEO0FBVUUsR0FYNkIsRUFXM0IsRUFYMkIsQ0FBaEMsQ0FKaUIsQ0FpQmpCO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBYixFQUFBQSxLQUFLLENBQUNnQixTQUFOLENBQWdCLE1BQU07QUFDckIsVUFBTUMsS0FBSyxHQUFHQyxXQUFXLENBQUMsTUFBTTtBQUU3QlAsTUFBQUEsUUFBUSxDQUFDO0FBQ1pJLFFBQUFBLElBQUksRUFBRSxLQURNO0FBRVpJLFFBQUFBLElBQUksRUFBRVosWUFBWTtBQUZOLE9BQUQsQ0FBUixDQUY2QixDQU8vQjtBQUNBO0FBRUE7QUFDQztBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0EsS0F4QnVCLEVBeUJ2QixJQXpCdUIsQ0FBekI7QUEwQkNhLElBQUFBLGFBQWEsQ0FBQ0gsS0FBRCxDQUFiO0FBQ0QsV0FBTyxNQUFNLENBR1osQ0FIRDtBQUlBLEdBaENELEVBZ0NHLEVBaENIO0FBaUNBLHNCQUNDLG9CQUFDLEdBQUQscUJBQ0Msb0JBQUMsSUFBRCx3QkFBbUJQLFdBQVcsQ0FBQ1csTUFBL0IsTUFERCxDQUREO0FBTUEsQ0F2RUQ7O0FBeUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJkLEdBQWpCLEMsQ0FNQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3VzZUlucHV0LCByZW5kZXIsIFRleHQsIENvbG9yLCBCb3h9ID0gcmVxdWlyZSgnaW5rJyk7XG4vLyBjb25zdCBUZXh0SW5wdXQgPSByZXF1aXJlKCdpbmstdGV4dC1pbnB1dCcpLmRlZmF1bHQ7XG5jb25zdCBNdWx0aVNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUnKTtcbmNvbnN0IERlY2sgPSByZXF1aXJlKCcuL2RlY2snKTtcblxuXG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcblx0Ly9jb25zdCBbcGxheWluZ0RlY2ssIHNldERlY2tdID0gUmVhY3QudXNlU3RhdGUoTXVsdGlTaHVmZmxlKCkpO1xuXG5cblx0Y29uc3QgW3BsYXlpbmdEZWNrLCBkaXNwYXRjaF0gPSBSZWFjdC51c2VSZWR1Y2VyKChzdGF0ZSwgYWN0aW9uKSA9PiB7XG5cdFx0c3dpdGNoIChhY3Rpb24udHlwZSkge1xuXHRcdCAgY2FzZSAnYWRkJzpcblx0XHRcdCAgLy9jb25zb2xlLmxvZyhzdGF0ZSk7XG5cdFx0XHRyZXR1cm4gW1xuXHRcdFx0ICAuLi5zdGF0ZSxcblx0XHRcdCAgTXVsdGlTaHVmZmxlKClcblx0XHRcdF07XG5cdFx0ICBkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdH1cblx0ICB9LCBbXSk7XG5cblx0Ly8gICBkaXNwYXRjaCh7XG5cdC8vIFx0dHlwZTogJ2FkZCcsXG5cdC8vIFx0bmFtZTogTXVsdGlTaHVmZmxlKClcblx0Ly8gICB9KTtcblxuXG5cdC8vIGNvbnN0IFtwbGF5ZXJIYW5kLCBzZXRQbGF5ZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXHQvLyBjb25zdCBbZGVhbGVySGFuZCwgc2V0RGVhbGVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblxuXG5cdC8vIHNldERlY2soW1xuXHQvLyBcdC4uLnBsYXlpbmdEZWNrLFxuXHQvLyBcdC4uLmRlY2tcblx0Ly8gXSk7XG5cblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblxuXHRcdFx0ICBkaXNwYXRjaCh7XG5cdFx0dHlwZTogJ2FkZCcsXG5cdFx0bmFtZTogTXVsdGlTaHVmZmxlKClcblx0ICB9KTtcblxuXHQgIC8vY29uc29sZS5sb2cocGxheWluZ0RlY2subGVuZ3RoKTtcblx0XHRcdC8vIHNldERlY2soW1xuXG5cdFx0XHQvLyBwbGF5aW5nRGVjay5wb3AoKTtcblx0XHRcdFx0Ly8gXHQuLi5wbGF5aW5nRGVjayxcblx0XHRcdFx0Ly8gXHQuLi5kZWNrXG5cdFx0XHRcdC8vIF0pO1xuXG5cdFx0XHRcdC8vIHZhciBhcnJheSA9IFsuLi5wbGF5aW5nRGVja107IC8vIG1ha2UgYSBzZXBhcmF0ZSBjb3B5IG9mIHRoZSBhcnJheVxuXHRcdFx0XHQvLyBhcnJheS5wb3AoKTtcblx0XHRcdFx0Ly8gc2V0RGVjayhhcnJheSk7XG5cdFx0XHRcdC8vIHNldERlY2soW1xuXHRcdFx0XHQvLyBcdFx0Li4ucGxheWluZ0RlY2ssXG5cdFx0XHRcdC8vIFx0XHRudWxsXG5cdFx0XHRcdC8vIFx0XSk7XG5cblx0XHRcdFx0Ly8gY29uc29sZS5sb2coYXJyYXkubGVuZ3RoKTtcblx0XHRcdH1cblx0XHRcdCwxMDAwKTtcblx0XHRcdGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHRcdHJldHVybiAoKSA9PiB7XG5cblxuXHRcdH07XG5cdH0sIFtdKTtcblx0cmV0dXJuIChcblx0XHQ8Qm94PlxuXHRcdFx0PFRleHQ+Q2FyZCBDb3VudDoge3BsYXlpbmdEZWNrLmxlbmd0aH0gPC9UZXh0PlxuXHRcdFx0ey8qIDxUZXh0PkNvdW50OiB7Y291bnR9PC9UZXh0PiAqL31cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuXG5cblxuXG5cbi8vIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuLy8gaW1wb3J0IHVzZVNlYXJjaCBmcm9tICcuL2ZldGNoLWl0ZW1zJztcblxuLy8gZnVuY3Rpb24gTXlQYXJlbnQoeyB0ZXJtIH0pIHtcbi8vICAgY29uc3QgaGFuZGxlQ2xpY2sgPSB1c2VDYWxsYmFjaygoaXRlbSkgPT4ge1xuLy8gICAgIGNvbnNvbGUubG9nKCdZb3UgY2xpY2tlZCAnLCBpdGVtKTtcbi8vICAgfSwgW3Rlcm1dKTtcblxuLy8gICBjb25zdCBpdGVtcyA9IHVzZVNlYXJjaCh0ZXJtKTtcblxuLy8gICByZXR1cm4gKFxuLy8gICAgIDxNeUJpZ0xpc3Rcbi8vICAgICAgIGl0ZW1zPXtpdGVtc31cbi8vICAgICAgIGhhbmRsZUNsaWNrPXtoYW5kbGVDbGlja31cbi8vICAgICAvPlxuLy8gICApO1xuLy8gfSJdfQ==