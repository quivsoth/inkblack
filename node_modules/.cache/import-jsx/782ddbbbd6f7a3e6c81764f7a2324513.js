'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const Shuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  let deck = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck2 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck3 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck4 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck5 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck6 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  deck.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
  const [playingDeck, setDeck] = React.useState(deck);
  const [playerHand, setPlayer] = React.useState([]);
  const [dealerHand, setDealer] = React.useState([]); // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  let e = playingDeck[playingDeck.length - 1];
  let newArray = playingDeck.filter(function (remainder) {
    return remainder.id != e.id;
  });
  console.log(newArray); // React.useEffect(() => {
  // 	const timer = setInterval(() => handleRemoveItem(), 1000);
  // 	return () => {
  // 		clearInterval(timer);
  // 	};
  // }, []);

  const handleRemoveItem = () => {
    let e = playingDeck[playingDeck.length - 1];
    console.log(e);
    let result = playingDeck.filter(e);
    console.log(result);
    let newArray = playingDeck.filter(function (remainder) {
      return remainder.id != e.id;
    });
    console.log(newArray); // setDeck(playingDeck.filter((e)=>(e !== e)));
    // console.log(playingDeck.length);
  };

  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Card Count: ", playingDeck.length, " "));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiU2h1ZmZsZSIsIkRlY2siLCJBcHAiLCJkZWNrIiwibWFwIiwiYSIsImRlY2syIiwiZGVjazMiLCJkZWNrNCIsImRlY2s1IiwiZGVjazYiLCJwdXNoIiwicGxheWluZ0RlY2siLCJzZXREZWNrIiwidXNlU3RhdGUiLCJwbGF5ZXJIYW5kIiwic2V0UGxheWVyIiwiZGVhbGVySGFuZCIsInNldERlYWxlciIsImUiLCJsZW5ndGgiLCJuZXdBcnJheSIsImZpbHRlciIsInJlbWFpbmRlciIsImlkIiwiY29uc29sZSIsImxvZyIsImhhbmRsZVJlbW92ZUl0ZW0iLCJyZXN1bHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQSxNQUFYO0FBQW1CQyxFQUFBQSxJQUFuQjtBQUF5QkMsRUFBQUEsS0FBekI7QUFBZ0NDLEVBQUFBO0FBQWhDLElBQXVDTCxPQUFPLENBQUMsS0FBRCxDQUFwRCxDLENBQ0E7OztBQUNBLE1BQU1NLE9BQU8sR0FBR04sT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBQ0EsTUFBTU8sSUFBSSxHQUFHUCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFFQSxNQUFNUSxHQUFHLEdBQUcsTUFBTTtBQUlqQixNQUFJQyxJQUFJLEdBQUdILE9BQU8sQ0FBQztBQUFDQyxJQUFBQTtBQUFELEdBQUQsQ0FBUCxDQUFnQkcsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosR0FBTCxDQUFyQixDQUFYO0FBQ0EsTUFBSUMsS0FBSyxHQUFHTixPQUFPLENBQUM7QUFBQ0MsSUFBQUE7QUFBRCxHQUFELENBQVAsQ0FBZ0JHLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEdBQUwsQ0FBckIsQ0FBWjtBQUNBLE1BQUlFLEtBQUssR0FBR1AsT0FBTyxDQUFDO0FBQUNDLElBQUFBO0FBQUQsR0FBRCxDQUFQLENBQWdCRyxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixHQUFMLENBQXJCLENBQVo7QUFDQSxNQUFJRyxLQUFLLEdBQUdSLE9BQU8sQ0FBQztBQUFDQyxJQUFBQTtBQUFELEdBQUQsQ0FBUCxDQUFnQkcsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosR0FBTCxDQUFyQixDQUFaO0FBQ0EsTUFBSUksS0FBSyxHQUFHVCxPQUFPLENBQUM7QUFBQ0MsSUFBQUE7QUFBRCxHQUFELENBQVAsQ0FBZ0JHLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEdBQUwsQ0FBckIsQ0FBWjtBQUNBLE1BQUlLLEtBQUssR0FBR1YsT0FBTyxDQUFDO0FBQUNDLElBQUFBO0FBQUQsR0FBRCxDQUFQLENBQWdCRyxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixHQUFMLENBQXJCLENBQVo7QUFDQUYsRUFBQUEsSUFBSSxDQUFDUSxJQUFMLENBQVUsR0FBR0wsS0FBYixFQUFvQixHQUFHQyxLQUF2QixFQUE4QixHQUFHQyxLQUFqQyxFQUF3QyxHQUFHQyxLQUEzQyxFQUFrRCxHQUFHQyxLQUFyRDtBQUVBLFFBQU0sQ0FBQ0UsV0FBRCxFQUFjQyxPQUFkLElBQXlCcEIsS0FBSyxDQUFDcUIsUUFBTixDQUFlWCxJQUFmLENBQS9CO0FBQ0EsUUFBTSxDQUFDWSxVQUFELEVBQWFDLFNBQWIsSUFBMEJ2QixLQUFLLENBQUNxQixRQUFOLENBQWUsRUFBZixDQUFoQztBQUNBLFFBQU0sQ0FBQ0csVUFBRCxFQUFhQyxTQUFiLElBQTBCekIsS0FBSyxDQUFDcUIsUUFBTixDQUFlLEVBQWYsQ0FBaEMsQ0FkaUIsQ0FnQmpCO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQUlLLENBQUMsR0FBR1AsV0FBVyxDQUFDQSxXQUFXLENBQUNRLE1BQVosR0FBcUIsQ0FBdEIsQ0FBbkI7QUFDQSxNQUFJQyxRQUFRLEdBQUdULFdBQVcsQ0FBQ1UsTUFBWixDQUFtQixVQUFTQyxTQUFULEVBQW9CO0FBQ3JELFdBQU9BLFNBQVMsQ0FBQ0MsRUFBVixJQUFnQkwsQ0FBQyxDQUFDSyxFQUF6QjtBQUNBLEdBRmMsQ0FBZjtBQUdBQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUwsUUFBWixFQXpCaUIsQ0E2QmpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFNTSxnQkFBZ0IsR0FBRyxNQUFNO0FBQzlCLFFBQUlSLENBQUMsR0FBR1AsV0FBVyxDQUFDQSxXQUFXLENBQUNRLE1BQVosR0FBcUIsQ0FBdEIsQ0FBbkI7QUFDQUssSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlQLENBQVo7QUFDQSxRQUFJUyxNQUFNLEdBQUdoQixXQUFXLENBQUNVLE1BQVosQ0FBbUJILENBQW5CLENBQWI7QUFDQU0sSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlFLE1BQVo7QUFFQSxRQUFJUCxRQUFRLEdBQUdULFdBQVcsQ0FBQ1UsTUFBWixDQUFtQixVQUFTQyxTQUFULEVBQW9CO0FBQ3JELGFBQU9BLFNBQVMsQ0FBQ0MsRUFBVixJQUFnQkwsQ0FBQyxDQUFDSyxFQUF6QjtBQUNBLEtBRmMsQ0FBZjtBQUtBQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUwsUUFBWixFQVg4QixDQWE5QjtBQUNBO0FBQ0EsR0FmRDs7QUFrQkMsc0JBQ0Usb0JBQUMsR0FBRCxxQkFDRixvQkFBQyxJQUFELHdCQUFtQlQsV0FBVyxDQUFDUSxNQUEvQixNQURFLENBREY7QUFLRCxDQTNERDs7QUE2REFTLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjVCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3VzZUlucHV0LCByZW5kZXIsIFRleHQsIENvbG9yLCBCb3h9ID0gcmVxdWlyZSgnaW5rJyk7XG4vLyBjb25zdCBUZXh0SW5wdXQgPSByZXF1aXJlKCdpbmstdGV4dC1pbnB1dCcpLmRlZmF1bHQ7XG5jb25zdCBTaHVmZmxlID0gcmVxdWlyZSgnLi9zaHVmZmxlJyk7XG5jb25zdCBEZWNrID0gcmVxdWlyZSgnLi9kZWNrJyk7XG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcblxuXG5cblx0bGV0IGRlY2sgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRsZXQgZGVjazIgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRsZXQgZGVjazMgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRsZXQgZGVjazQgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRsZXQgZGVjazUgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRsZXQgZGVjazYgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRkZWNrLnB1c2goLi4uZGVjazIsIC4uLmRlY2szLCAuLi5kZWNrNCwgLi4uZGVjazUsIC4uLmRlY2s2KTtcblxuXHRjb25zdCBbcGxheWluZ0RlY2ssIHNldERlY2tdID0gUmVhY3QudXNlU3RhdGUoZGVjayk7XG5cdGNvbnN0IFtwbGF5ZXJIYW5kLCBzZXRQbGF5ZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXHRjb25zdCBbZGVhbGVySGFuZCwgc2V0RGVhbGVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblxuXHQvLyBzZXREZWNrKFtcblx0Ly8gXHQuLi5wbGF5aW5nRGVjayxcblx0Ly8gXHQuLi5kZWNrXG5cdC8vIF0pO1xuXG5cdGxldCBlID0gcGxheWluZ0RlY2tbcGxheWluZ0RlY2subGVuZ3RoIC0gMV07XG5cdGxldCBuZXdBcnJheSA9IHBsYXlpbmdEZWNrLmZpbHRlcihmdW5jdGlvbihyZW1haW5kZXIpIHtcblx0XHRyZXR1cm4gcmVtYWluZGVyLmlkICE9IGUuaWQ7XG5cdH0pO1xuXHRjb25zb2xlLmxvZyhuZXdBcnJheSk7XG5cblxuXG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Y29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiBoYW5kbGVSZW1vdmVJdGVtKCksIDEwMDApO1xuXHQvLyBcdHJldHVybiAoKSA9PiB7XG5cdC8vIFx0XHRjbGVhckludGVydmFsKHRpbWVyKTtcblx0Ly8gXHR9O1xuXHQvLyB9LCBbXSk7XG5cblx0Y29uc3QgaGFuZGxlUmVtb3ZlSXRlbSA9ICgpID0+IHtcblx0XHRsZXQgZSA9IHBsYXlpbmdEZWNrW3BsYXlpbmdEZWNrLmxlbmd0aCAtIDFdO1xuXHRcdGNvbnNvbGUubG9nKGUpO1xuXHRcdGxldCByZXN1bHQgPSBwbGF5aW5nRGVjay5maWx0ZXIoZSk7XG5cdFx0Y29uc29sZS5sb2cocmVzdWx0KTtcblxuXHRcdGxldCBuZXdBcnJheSA9IHBsYXlpbmdEZWNrLmZpbHRlcihmdW5jdGlvbihyZW1haW5kZXIpIHtcblx0XHRcdHJldHVybiByZW1haW5kZXIuaWQgIT0gZS5pZDtcblx0XHR9KTtcblxuXG5cdFx0Y29uc29sZS5sb2cobmV3QXJyYXkpO1xuXG5cdFx0Ly8gc2V0RGVjayhwbGF5aW5nRGVjay5maWx0ZXIoKGUpPT4oZSAhPT0gZSkpKTtcblx0XHQvLyBjb25zb2xlLmxvZyhwbGF5aW5nRGVjay5sZW5ndGgpO1xuXHR9XG5cblxuICByZXR1cm4gKFxuICAgIDxCb3g+XG5cdFx0PFRleHQ+Q2FyZCBDb3VudDoge3BsYXlpbmdEZWNrLmxlbmd0aH0gPC9UZXh0PlxuICAgIDwvQm94PlxuICApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7Il19