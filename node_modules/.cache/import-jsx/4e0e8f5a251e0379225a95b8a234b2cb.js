'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  //const [playingDeck, setDeck] = React.useState(MultiShuffle());
  const [playingDeck, dispatch] = useReducer((state, action) => {
    switch (action.type) {
      case 'add':
        return [...state, ...playingDeck];

      default:
        return state;
    }
  }, []); // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  React.useEffect(() => {
    const timer = setInterval(() => {
      // setDeck([
      playingDeck.pop(); // 	...playingDeck,
      // 	...deck
      // ]);
      // var array = [...playingDeck]; // make a separate copy of the array
      // array.pop();
      // setDeck(array);
      // setDeck([
      // 		...playingDeck,
      // 		null
      // 	]);
      // console.log(array.length);
    }, 1000);
    return () => {
      clearInterval(timer);
    };
  }, []);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Card Count: ", playingDeck.length, " "));
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkFwcCIsInBsYXlpbmdEZWNrIiwiZGlzcGF0Y2giLCJ1c2VSZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJ0eXBlIiwidXNlRWZmZWN0IiwidGltZXIiLCJzZXRJbnRlcnZhbCIsInBvcCIsImNsZWFySW50ZXJ2YWwiLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQSxNQUFYO0FBQW1CQyxFQUFBQSxJQUFuQjtBQUF5QkMsRUFBQUEsS0FBekI7QUFBZ0NDLEVBQUFBO0FBQWhDLElBQXVDTCxPQUFPLENBQUMsS0FBRCxDQUFwRCxDLENBQ0E7OztBQUNBLE1BQU1NLFlBQVksR0FBR04sT0FBTyxDQUFDLFdBQUQsQ0FBNUI7O0FBQ0EsTUFBTU8sSUFBSSxHQUFHUCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFJQSxNQUFNUSxHQUFHLEdBQUcsTUFBTTtBQUNqQjtBQUdBLFFBQU0sQ0FBQ0MsV0FBRCxFQUFjQyxRQUFkLElBQTBCQyxVQUFVLENBQUMsQ0FBQ0MsS0FBRCxFQUFRQyxNQUFSLEtBQW1CO0FBQzdELFlBQVFBLE1BQU0sQ0FBQ0MsSUFBZjtBQUNFLFdBQUssS0FBTDtBQUNELGVBQU8sQ0FDTCxHQUFHRixLQURFLEVBRUwsR0FBR0gsV0FGRSxDQUFQOztBQUlDO0FBQ0QsZUFBT0csS0FBUDtBQVBEO0FBU0UsR0FWdUMsRUFVckMsRUFWcUMsQ0FBMUMsQ0FKaUIsQ0FpQmpCO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQWIsRUFBQUEsS0FBSyxDQUFDZ0IsU0FBTixDQUFnQixNQUFNO0FBQ3JCLFVBQU1DLEtBQUssR0FBR0MsV0FBVyxDQUFDLE1BQU07QUFDL0I7QUFFQVIsTUFBQUEsV0FBVyxDQUFDUyxHQUFaLEdBSCtCLENBSTlCO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQSxLQWpCdUIsRUFrQnZCLElBbEJ1QixDQUF6QjtBQW1CQSxXQUFPLE1BQU07QUFDWkMsTUFBQUEsYUFBYSxDQUFDSCxLQUFELENBQWI7QUFDQSxLQUZEO0FBR0EsR0F2QkQsRUF1QkcsRUF2Qkg7QUF3QkEsc0JBQ0Msb0JBQUMsR0FBRCxxQkFDQyxvQkFBQyxJQUFELHdCQUFtQlAsV0FBVyxDQUFDVyxNQUEvQixNQURELENBREQ7QUFNQSxDQXhERDs7QUEwREFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmQsR0FBakIsQyxDQU1BO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlSW5wdXQsIHJlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbi8vIGNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IE11bHRpU2h1ZmZsZSA9IHJlcXVpcmUoJy4vc2h1ZmZsZScpO1xuY29uc3QgRGVjayA9IHJlcXVpcmUoJy4vZGVjaycpO1xuXG5cblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHQvL2NvbnN0IFtwbGF5aW5nRGVjaywgc2V0RGVja10gPSBSZWFjdC51c2VTdGF0ZShNdWx0aVNodWZmbGUoKSk7XG5cblxuXHRjb25zdCBbcGxheWluZ0RlY2ssIGRpc3BhdGNoXSA9IHVzZVJlZHVjZXIoKHN0YXRlLCBhY3Rpb24pID0+IHtcblx0XHRzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG5cdFx0ICBjYXNlICdhZGQnOlxuXHRcdFx0cmV0dXJuIFtcblx0XHRcdCAgLi4uc3RhdGUsXG5cdFx0XHQgIC4uLnBsYXlpbmdEZWNrXG5cdFx0XHRdO1xuXHRcdCAgZGVmYXVsdDpcblx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHR9XG5cdCAgfSwgW10pO1xuXG5cblx0Ly8gY29uc3QgW3BsYXllckhhbmQsIHNldFBsYXllcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdC8vIGNvbnN0IFtkZWFsZXJIYW5kLCBzZXREZWFsZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXG5cblx0Ly8gc2V0RGVjayhbXG5cdC8vIFx0Li4ucGxheWluZ0RlY2ssXG5cdC8vIFx0Li4uZGVja1xuXHQvLyBdKTtcblxuXHRSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0Ly8gc2V0RGVjayhbXG5cblx0XHRcdHBsYXlpbmdEZWNrLnBvcCgpO1xuXHRcdFx0XHQvLyBcdC4uLnBsYXlpbmdEZWNrLFxuXHRcdFx0XHQvLyBcdC4uLmRlY2tcblx0XHRcdFx0Ly8gXSk7XG5cblx0XHRcdFx0Ly8gdmFyIGFycmF5ID0gWy4uLnBsYXlpbmdEZWNrXTsgLy8gbWFrZSBhIHNlcGFyYXRlIGNvcHkgb2YgdGhlIGFycmF5XG5cdFx0XHRcdC8vIGFycmF5LnBvcCgpO1xuXHRcdFx0XHQvLyBzZXREZWNrKGFycmF5KTtcblx0XHRcdFx0Ly8gc2V0RGVjayhbXG5cdFx0XHRcdC8vIFx0XHQuLi5wbGF5aW5nRGVjayxcblx0XHRcdFx0Ly8gXHRcdG51bGxcblx0XHRcdFx0Ly8gXHRdKTtcblxuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhhcnJheS5sZW5ndGgpO1xuXHRcdFx0fVxuXHRcdFx0LDEwMDApO1xuXHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRjbGVhckludGVydmFsKHRpbWVyKTtcblx0XHR9O1xuXHR9LCBbXSk7XG5cdHJldHVybiAoXG5cdFx0PEJveD5cblx0XHRcdDxUZXh0PkNhcmQgQ291bnQ6IHtwbGF5aW5nRGVjay5sZW5ndGh9IDwvVGV4dD5cblx0XHRcdHsvKiA8VGV4dD5Db3VudDoge2NvdW50fTwvVGV4dD4gKi99XG5cdFx0PC9Cb3g+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcblxuXG5cblxuXG4vLyBpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbi8vIGltcG9ydCB1c2VTZWFyY2ggZnJvbSAnLi9mZXRjaC1pdGVtcyc7XG5cbi8vIGZ1bmN0aW9uIE15UGFyZW50KHsgdGVybSB9KSB7XG4vLyAgIGNvbnN0IGhhbmRsZUNsaWNrID0gdXNlQ2FsbGJhY2soKGl0ZW0pID0+IHtcbi8vICAgICBjb25zb2xlLmxvZygnWW91IGNsaWNrZWQgJywgaXRlbSk7XG4vLyAgIH0sIFt0ZXJtXSk7XG5cbi8vICAgY29uc3QgaXRlbXMgPSB1c2VTZWFyY2godGVybSk7XG5cbi8vICAgcmV0dXJuIChcbi8vICAgICA8TXlCaWdMaXN0XG4vLyAgICAgICBpdGVtcz17aXRlbXN9XG4vLyAgICAgICBoYW5kbGVDbGljaz17aGFuZGxlQ2xpY2t9XG4vLyAgICAgLz5cbi8vICAgKTtcbi8vIH0iXX0=