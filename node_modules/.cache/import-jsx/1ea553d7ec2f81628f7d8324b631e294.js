'use strict';

const React = require('react');

const {
  render,
  Text,
  Color,
  Box
} = require('ink');

const TextInput = require('ink-text-input').default;

const Shuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // const [playingDeck, setDeck] = React.useState([]);
  React.useEffect(() => {}, []); // const shuffleNewDeck = () => {
  // 	//event.preventDefault();
  // 	let deck1 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck2 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck3 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck4 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck5 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck6 = Shuffle({Deck}).map(a => ({...a}));
  // 	deck1.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
  // 	setDeck([
  // 	  ...playingDeck,
  // 	  ...deck1
  // 	]);
  // };
  // const deal = (person) => {
  // 	var card = playingDeck.pop();
  // 	switch (person) {
  // 		case "player":
  // 			setPlayer([...playerHand,card]);
  // 			break;
  // 		case "dealer":
  // 			setDealer([...playerHand,card]);
  // 			break;
  // 		default:
  // 			break;
  // 	}
  // };
  // React.useEffect(() => {
  //   shuffleNewDeck();
  // }, []);
  // setInterval(() => {
  // 	// deal("player");
  // 	console.log("111");
  // }, 10000);

  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Deck Count: ", playingDeck.length));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInJlbmRlciIsIlRleHQiLCJDb2xvciIsIkJveCIsIlRleHRJbnB1dCIsImRlZmF1bHQiLCJTaHVmZmxlIiwiRGVjayIsIkFwcCIsInVzZUVmZmVjdCIsInBsYXlpbmdEZWNrIiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBLE1BQUQ7QUFBU0MsRUFBQUEsSUFBVDtBQUFlQyxFQUFBQSxLQUFmO0FBQXNCQyxFQUFBQTtBQUF0QixJQUE2QkosT0FBTyxDQUFDLEtBQUQsQ0FBMUM7O0FBQ0EsTUFBTUssU0FBUyxHQUFHTCxPQUFPLENBQUMsZ0JBQUQsQ0FBUCxDQUEwQk0sT0FBNUM7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHUCxPQUFPLENBQUMsV0FBRCxDQUF2Qjs7QUFDQSxNQUFNUSxJQUFJLEdBQUdSLE9BQU8sQ0FBQyxRQUFELENBQXBCOztBQUVBLE1BQU1TLEdBQUcsR0FBRyxNQUFNO0FBQ2pCO0FBQ0E7QUFDQTtBQUlBVixFQUFBQSxLQUFLLENBQUNXLFNBQU4sQ0FBZ0IsTUFBTSxDQUVyQixDQUZELEVBRUcsRUFGSCxFQVBpQixDQWFqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQyxzQkFDRSxvQkFBQyxHQUFELHFCQUNGLG9CQUFDLElBQUQsd0JBQW1CQyxXQUFXLENBQUNDLE1BQS9CLENBREUsQ0FERjtBQUtELENBekREOztBQTBEQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCTCxHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHtyZW5kZXIsIFRleHQsIENvbG9yLCBCb3h9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBUZXh0SW5wdXQgPSByZXF1aXJlKCdpbmstdGV4dC1pbnB1dCcpLmRlZmF1bHQ7XG5jb25zdCBTaHVmZmxlID0gcmVxdWlyZSgnLi9zaHVmZmxlJyk7XG5jb25zdCBEZWNrID0gcmVxdWlyZSgnLi9kZWNrJyk7XG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcblx0Ly8gY29uc3QgW3BsYXllckhhbmQsIHNldFBsYXllcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdC8vIGNvbnN0IFtkZWFsZXJIYW5kLCBzZXREZWFsZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXHQvLyBjb25zdCBbcGxheWluZ0RlY2ssIHNldERlY2tdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXG5cblx0XG5cdFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cblx0fSwgW10pXG5cdFxuXG5cdFxuXHQvLyBjb25zdCBzaHVmZmxlTmV3RGVjayA9ICgpID0+IHtcblx0Ly8gXHQvL2V2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdC8vIFx0bGV0IGRlY2sxID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0Ly8gXHRsZXQgZGVjazIgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHQvLyBcdGxldCBkZWNrMyA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdC8vIFx0bGV0IGRlY2s0ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0Ly8gXHRsZXQgZGVjazUgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHQvLyBcdGxldCBkZWNrNiA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cblx0Ly8gXHRkZWNrMS5wdXNoKC4uLmRlY2syLCAuLi5kZWNrMywgLi4uZGVjazQsIC4uLmRlY2s1LCAuLi5kZWNrNik7XG5cdC8vIFx0c2V0RGVjayhbXG5cdC8vIFx0ICAuLi5wbGF5aW5nRGVjayxcblx0Ly8gXHQgIC4uLmRlY2sxXG5cdC8vIFx0XSk7XG5cdC8vIH07XG5cblx0Ly8gY29uc3QgZGVhbCA9IChwZXJzb24pID0+IHtcblx0Ly8gXHR2YXIgY2FyZCA9IHBsYXlpbmdEZWNrLnBvcCgpO1xuXHQvLyBcdHN3aXRjaCAocGVyc29uKSB7XG5cdC8vIFx0XHRjYXNlIFwicGxheWVyXCI6XG5cdC8vIFx0XHRcdHNldFBsYXllcihbLi4ucGxheWVySGFuZCxjYXJkXSk7XG5cdC8vIFx0XHRcdGJyZWFrO1xuXHQvLyBcdFx0Y2FzZSBcImRlYWxlclwiOlxuXHQvLyBcdFx0XHRzZXREZWFsZXIoWy4uLnBsYXllckhhbmQsY2FyZF0pO1xuXHQvLyBcdFx0XHRicmVhaztcblx0Ly8gXHRcdGRlZmF1bHQ6XG5cdC8vIFx0XHRcdGJyZWFrO1xuXHQvLyBcdH1cblx0Ly8gfTtcblxuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyAgIHNodWZmbGVOZXdEZWNrKCk7XG5cdC8vIH0sIFtdKTtcblxuXHQvLyBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdC8vIFx0Ly8gZGVhbChcInBsYXllclwiKTtcblx0Ly8gXHRjb25zb2xlLmxvZyhcIjExMVwiKTtcblx0Ly8gfSwgMTAwMDApO1xuXG4gIHJldHVybiAoXG4gICAgPEJveD5cblx0XHQ8VGV4dD5EZWNrIENvdW50OiB7cGxheWluZ0RlY2subGVuZ3RofTwvVGV4dD5cbiAgICA8L0JveD5cbiAgKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IEFwcDsiXX0=