'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const Counter = require('./counter');

const MyBigList = require('./mybiglist');

const App = () => {
  const [count, setCount] = useState(0);
  const [otherCounter, setOtherCounter] = useState(0);

  const increment = () => {
    setCount(count + 1);
  };

  const decrement = () => {
    setCount(count - 1);
  };

  const incrementOtherCounter = () => {
    setOtherCounter(otherCounter + 1);
  }; // const [playingDeck, setDeck] = React.useState(MultiShuffle());
  // const [value, setValue] = useState("");
  // const addHello = useCallback(() => setValue(value + "Hello!"), [value]);
  // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // const [counter, setCounter] = React.useState(0);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);
  // React.useEffect(() => {
  // 	const timer = setInterval(() => {
  // 			//console.log('Intervalled');
  // 			playingDeck.pop();
  // 			setCounter(Math.round(Math.random() * 15));
  // 		}
  // 		,200);
  // 	return () => {
  // 		clearInterval(timer);
  // 	};
  // }, []);


  return /*#__PURE__*/React.createElement(Box, null);
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkNvdW50ZXIiLCJNeUJpZ0xpc3QiLCJBcHAiLCJjb3VudCIsInNldENvdW50IiwidXNlU3RhdGUiLCJvdGhlckNvdW50ZXIiLCJzZXRPdGhlckNvdW50ZXIiLCJpbmNyZW1lbnQiLCJkZWNyZW1lbnQiLCJpbmNyZW1lbnRPdGhlckNvdW50ZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQSxNQUFYO0FBQW1CQyxFQUFBQSxJQUFuQjtBQUF5QkMsRUFBQUEsS0FBekI7QUFBZ0NDLEVBQUFBO0FBQWhDLElBQXVDTCxPQUFPLENBQUMsS0FBRCxDQUFwRCxDLENBQ0E7OztBQUNBLE1BQU1NLFlBQVksR0FBR04sT0FBTyxDQUFDLFdBQUQsQ0FBNUI7O0FBQ0EsTUFBTU8sSUFBSSxHQUFHUCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFDQSxNQUFNUSxPQUFPLEdBQUdSLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUNBLE1BQU1TLFNBQVMsR0FBR1QsT0FBTyxDQUFDLGFBQUQsQ0FBekI7O0FBRUEsTUFBTVUsR0FBRyxHQUFHLE1BQU07QUFHakIsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JDLFFBQVEsQ0FBQyxDQUFELENBQWxDO0FBQ0EsUUFBTSxDQUFDQyxZQUFELEVBQWVDLGVBQWYsSUFBa0NGLFFBQVEsQ0FBQyxDQUFELENBQWhEOztBQUVBLFFBQU1HLFNBQVMsR0FBRyxNQUFNO0FBQ3hCSixJQUFBQSxRQUFRLENBQUNELEtBQUssR0FBRyxDQUFULENBQVI7QUFDQyxHQUZEOztBQUdBLFFBQU1NLFNBQVMsR0FBRyxNQUFNO0FBQ3hCTCxJQUFBQSxRQUFRLENBQUNELEtBQUssR0FBRyxDQUFULENBQVI7QUFDQyxHQUZEOztBQUdBLFFBQU1PLHFCQUFxQixHQUFHLE1BQU07QUFDcENILElBQUFBLGVBQWUsQ0FBQ0QsWUFBWSxHQUFHLENBQWhCLENBQWY7QUFDQSxHQUZBLENBWmlCLENBaUJqQjtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBLHNCQUNDLG9CQUFDLEdBQUQsT0FERDtBQU1BLENBbEREOztBQW9EQUssTUFBTSxDQUFDQyxPQUFQLEdBQWlCVixHQUFqQixDLENBTUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHt1c2VJbnB1dCwgcmVuZGVyLCBUZXh0LCBDb2xvciwgQm94fSA9IHJlcXVpcmUoJ2luaycpO1xuLy8gY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZSgnaW5rLXRleHQtaW5wdXQnKS5kZWZhdWx0O1xuY29uc3QgTXVsdGlTaHVmZmxlID0gcmVxdWlyZSgnLi9zaHVmZmxlJyk7XG5jb25zdCBEZWNrID0gcmVxdWlyZSgnLi9kZWNrJyk7XG5jb25zdCBDb3VudGVyID0gcmVxdWlyZSgnLi9jb3VudGVyJyk7XG5jb25zdCBNeUJpZ0xpc3QgPSByZXF1aXJlKCcuL215YmlnbGlzdCcpO1xuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG5cblxuXHRjb25zdCBbY291bnQsIHNldENvdW50XSA9IHVzZVN0YXRlKDApXG5cdGNvbnN0IFtvdGhlckNvdW50ZXIsIHNldE90aGVyQ291bnRlcl0gPSB1c2VTdGF0ZSgwKVxuXG5cdGNvbnN0IGluY3JlbWVudCA9ICgpID0+IHtcblx0c2V0Q291bnQoY291bnQgKyAxKVxuXHR9XG5cdGNvbnN0IGRlY3JlbWVudCA9ICgpID0+IHtcblx0c2V0Q291bnQoY291bnQgLSAxKVxuXHR9XG5cdGNvbnN0IGluY3JlbWVudE90aGVyQ291bnRlciA9ICgpID0+IHtcblx0c2V0T3RoZXJDb3VudGVyKG90aGVyQ291bnRlciArIDEpXG59XG5cblxuXHQvLyBjb25zdCBbcGxheWluZ0RlY2ssIHNldERlY2tdID0gUmVhY3QudXNlU3RhdGUoTXVsdGlTaHVmZmxlKCkpO1xuXG5cdC8vIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlU3RhdGUoXCJcIik7XG5cdC8vIGNvbnN0IGFkZEhlbGxvID0gdXNlQ2FsbGJhY2soKCkgPT4gc2V0VmFsdWUodmFsdWUgKyBcIkhlbGxvIVwiKSwgW3ZhbHVlXSk7XG5cblxuXHQvLyBjb25zdCBbcGxheWVySGFuZCwgc2V0UGxheWVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Ly8gY29uc3QgW2RlYWxlckhhbmQsIHNldERlYWxlcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdC8vIGNvbnN0IFtjb3VudGVyLCBzZXRDb3VudGVyXSA9IFJlYWN0LnVzZVN0YXRlKDApO1xuXG5cdC8vIHNldERlY2soW1xuXHQvLyBcdC4uLnBsYXlpbmdEZWNrLFxuXHQvLyBcdC4uLmRlY2tcblx0Ly8gXSk7XG5cblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblx0Ly8gXHRcdFx0Ly9jb25zb2xlLmxvZygnSW50ZXJ2YWxsZWQnKTtcblx0Ly8gXHRcdFx0cGxheWluZ0RlY2sucG9wKCk7XG5cdC8vIFx0XHRcdHNldENvdW50ZXIoTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTUpKTtcblx0Ly8gXHRcdH1cblx0Ly8gXHRcdCwyMDApO1xuXHQvLyBcdHJldHVybiAoKSA9PiB7XG5cdC8vIFx0XHRjbGVhckludGVydmFsKHRpbWVyKTtcblx0Ly8gXHR9O1xuXHQvLyB9LCBbXSk7XG5cblx0cmV0dXJuIChcblx0XHQ8Qm94PlxuXHRcdFx0ey8qIDxUZXh0PkNhcmQgQ291bnQ6IHtwbGF5aW5nRGVjay5sZW5ndGh9IDwvVGV4dD5cblx0XHRcdDxDb3VudGVyIGFkZEhlbGxvPXthZGRIZWxsb30gbXlPYmplY3Q9e3sga2V5OiBcInZhbHVlXCIgfX0gLz4gKi99XG5cdFx0PC9Cb3g+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcblxuXG5cblxuXG4vLyBpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbi8vIGltcG9ydCB1c2VTZWFyY2ggZnJvbSAnLi9mZXRjaC1pdGVtcyc7XG5cbi8vIGZ1bmN0aW9uIE15UGFyZW50KHsgdGVybSB9KSB7XG4vLyAgIGNvbnN0IGhhbmRsZUNsaWNrID0gdXNlQ2FsbGJhY2soKGl0ZW0pID0+IHtcbi8vICAgICBjb25zb2xlLmxvZygnWW91IGNsaWNrZWQgJywgaXRlbSk7XG4vLyAgIH0sIFt0ZXJtXSk7XG5cbi8vICAgY29uc3QgaXRlbXMgPSB1c2VTZWFyY2godGVybSk7XG5cbi8vICAgcmV0dXJuIChcbi8vICAgICA8TXlCaWdMaXN0XG4vLyAgICAgICBpdGVtcz17aXRlbXN9XG4vLyAgICAgICBoYW5kbGVDbGljaz17aGFuZGxlQ2xpY2t9XG4vLyAgICAgLz5cbi8vICAgKTtcbi8vIH0iXX0=