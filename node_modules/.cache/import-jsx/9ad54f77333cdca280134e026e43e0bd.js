'use strict';

const React = require('react');

const {
  render,
  Text,
  Color,
  Box
} = require('ink');

const TextInput = require('ink-text-input').default;

const Shuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  const [playerHand, setPlayer] = React.useState([]);
  const [dealerHand, setDealer] = React.useState([]); // const [playingDeck, setDeck] = React.useState([]);

  var playingDeck = [];

  const shuffleNewDeck = () => {
    //event.preventDefault();
    let deck1 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck2 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck3 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck4 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck5 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck6 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    deck1.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
    playingDeck = [...deck1]; // setDeck([
    //   ...playingDeck,
    //   ...deck1
    // ]);
  };

  const deal = person => {
    var card = playingDeck.pop();

    switch (person) {
      case "player":
        setPlayer([...playerHand, card]);
        break;

      case "dealer":
        setDealer([...playerHand, card]);
        break;

      default:
        break;
    }
  };

  React.useEffect(() => {
    shuffleNewDeck();
  }, []); // setInterval(() => {
  // 	// deal("player");
  // 	console.log("111");
  // }, 10000);

  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Deck Count: ", playingDeck.length));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInJlbmRlciIsIlRleHQiLCJDb2xvciIsIkJveCIsIlRleHRJbnB1dCIsImRlZmF1bHQiLCJTaHVmZmxlIiwiRGVjayIsIkFwcCIsInBsYXllckhhbmQiLCJzZXRQbGF5ZXIiLCJ1c2VTdGF0ZSIsImRlYWxlckhhbmQiLCJzZXREZWFsZXIiLCJwbGF5aW5nRGVjayIsInNodWZmbGVOZXdEZWNrIiwiZGVjazEiLCJtYXAiLCJhIiwiZGVjazIiLCJkZWNrMyIsImRlY2s0IiwiZGVjazUiLCJkZWNrNiIsInB1c2giLCJkZWFsIiwicGVyc29uIiwiY2FyZCIsInBvcCIsInVzZUVmZmVjdCIsImxlbmd0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDQyxFQUFBQSxNQUFEO0FBQVNDLEVBQUFBLElBQVQ7QUFBZUMsRUFBQUEsS0FBZjtBQUFzQkMsRUFBQUE7QUFBdEIsSUFBNkJKLE9BQU8sQ0FBQyxLQUFELENBQTFDOztBQUNBLE1BQU1LLFNBQVMsR0FBR0wsT0FBTyxDQUFDLGdCQUFELENBQVAsQ0FBMEJNLE9BQTVDOztBQUNBLE1BQU1DLE9BQU8sR0FBR1AsT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBQ0EsTUFBTVEsSUFBSSxHQUFHUixPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFFQSxNQUFNUyxHQUFHLEdBQUcsTUFBTTtBQUNqQixRQUFNLENBQUNDLFVBQUQsRUFBYUMsU0FBYixJQUEwQlosS0FBSyxDQUFDYSxRQUFOLENBQWUsRUFBZixDQUFoQztBQUNBLFFBQU0sQ0FBQ0MsVUFBRCxFQUFhQyxTQUFiLElBQTBCZixLQUFLLENBQUNhLFFBQU4sQ0FBZSxFQUFmLENBQWhDLENBRmlCLENBR2pCOztBQUVBLE1BQUlHLFdBQVcsR0FBRyxFQUFsQjs7QUFFQSxRQUFNQyxjQUFjLEdBQUcsTUFBTTtBQUM1QjtBQUNBLFFBQUlDLEtBQUssR0FBR1YsT0FBTyxDQUFDO0FBQUNDLE1BQUFBO0FBQUQsS0FBRCxDQUFQLENBQWdCVSxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixLQUFMLENBQXJCLENBQVo7QUFDQSxRQUFJQyxLQUFLLEdBQUdiLE9BQU8sQ0FBQztBQUFDQyxNQUFBQTtBQUFELEtBQUQsQ0FBUCxDQUFnQlUsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosS0FBTCxDQUFyQixDQUFaO0FBQ0EsUUFBSUUsS0FBSyxHQUFHZCxPQUFPLENBQUM7QUFBQ0MsTUFBQUE7QUFBRCxLQUFELENBQVAsQ0FBZ0JVLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEtBQUwsQ0FBckIsQ0FBWjtBQUNBLFFBQUlHLEtBQUssR0FBR2YsT0FBTyxDQUFDO0FBQUNDLE1BQUFBO0FBQUQsS0FBRCxDQUFQLENBQWdCVSxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixLQUFMLENBQXJCLENBQVo7QUFDQSxRQUFJSSxLQUFLLEdBQUdoQixPQUFPLENBQUM7QUFBQ0MsTUFBQUE7QUFBRCxLQUFELENBQVAsQ0FBZ0JVLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEtBQUwsQ0FBckIsQ0FBWjtBQUNBLFFBQUlLLEtBQUssR0FBR2pCLE9BQU8sQ0FBQztBQUFDQyxNQUFBQTtBQUFELEtBQUQsQ0FBUCxDQUFnQlUsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosS0FBTCxDQUFyQixDQUFaO0FBRUFGLElBQUFBLEtBQUssQ0FBQ1EsSUFBTixDQUFXLEdBQUdMLEtBQWQsRUFBcUIsR0FBR0MsS0FBeEIsRUFBK0IsR0FBR0MsS0FBbEMsRUFBeUMsR0FBR0MsS0FBNUMsRUFBbUQsR0FBR0MsS0FBdEQ7QUFDQVQsSUFBQUEsV0FBVyxHQUFHLENBQUMsR0FBR0UsS0FBSixDQUFkLENBVjRCLENBVzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FmRDs7QUFpQkEsUUFBTVMsSUFBSSxHQUFJQyxNQUFELElBQVk7QUFDeEIsUUFBSUMsSUFBSSxHQUFHYixXQUFXLENBQUNjLEdBQVosRUFBWDs7QUFDQSxZQUFRRixNQUFSO0FBQ0MsV0FBSyxRQUFMO0FBQ0NoQixRQUFBQSxTQUFTLENBQUMsQ0FBQyxHQUFHRCxVQUFKLEVBQWVrQixJQUFmLENBQUQsQ0FBVDtBQUNBOztBQUNELFdBQUssUUFBTDtBQUNDZCxRQUFBQSxTQUFTLENBQUMsQ0FBQyxHQUFHSixVQUFKLEVBQWVrQixJQUFmLENBQUQsQ0FBVDtBQUNBOztBQUNEO0FBQ0M7QUFSRjtBQVVBLEdBWkQ7O0FBY0E3QixFQUFBQSxLQUFLLENBQUMrQixTQUFOLENBQWdCLE1BQU07QUFDcEJkLElBQUFBLGNBQWM7QUFDZixHQUZELEVBRUcsRUFGSCxFQXRDaUIsQ0EwQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVDLHNCQUNFLG9CQUFDLEdBQUQscUJBQ0Ysb0JBQUMsSUFBRCx3QkFBbUJELFdBQVcsQ0FBQ2dCLE1BQS9CLENBREUsQ0FERjtBQUtELENBcEREOztBQXFEQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCeEIsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7cmVuZGVyLCBUZXh0LCBDb2xvciwgQm94fSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZSgnaW5rLXRleHQtaW5wdXQnKS5kZWZhdWx0O1xuY29uc3QgU2h1ZmZsZSA9IHJlcXVpcmUoJy4vc2h1ZmZsZScpO1xuY29uc3QgRGVjayA9IHJlcXVpcmUoJy4vZGVjaycpO1xuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG5cdGNvbnN0IFtwbGF5ZXJIYW5kLCBzZXRQbGF5ZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXHRjb25zdCBbZGVhbGVySGFuZCwgc2V0RGVhbGVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Ly8gY29uc3QgW3BsYXlpbmdEZWNrLCBzZXREZWNrXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblxuXHR2YXIgcGxheWluZ0RlY2sgPSBbXTtcblxuXHRjb25zdCBzaHVmZmxlTmV3RGVjayA9ICgpID0+IHtcblx0XHQvL2V2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0bGV0IGRlY2sxID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0XHRsZXQgZGVjazIgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRcdGxldCBkZWNrMyA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdFx0bGV0IGRlY2s0ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0XHRsZXQgZGVjazUgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRcdGxldCBkZWNrNiA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cblx0XHRkZWNrMS5wdXNoKC4uLmRlY2syLCAuLi5kZWNrMywgLi4uZGVjazQsIC4uLmRlY2s1LCAuLi5kZWNrNik7XG5cdFx0cGxheWluZ0RlY2sgPSBbLi4uZGVjazFdO1xuXHRcdC8vIHNldERlY2soW1xuXHRcdC8vICAgLi4ucGxheWluZ0RlY2ssXG5cdFx0Ly8gICAuLi5kZWNrMVxuXHRcdC8vIF0pO1xuXHR9O1xuXG5cdGNvbnN0IGRlYWwgPSAocGVyc29uKSA9PiB7XG5cdFx0dmFyIGNhcmQgPSBwbGF5aW5nRGVjay5wb3AoKTtcblx0XHRzd2l0Y2ggKHBlcnNvbikge1xuXHRcdFx0Y2FzZSBcInBsYXllclwiOlxuXHRcdFx0XHRzZXRQbGF5ZXIoWy4uLnBsYXllckhhbmQsY2FyZF0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJkZWFsZXJcIjpcblx0XHRcdFx0c2V0RGVhbGVyKFsuLi5wbGF5ZXJIYW5kLGNhcmRdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH07XG5cblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0ICBzaHVmZmxlTmV3RGVjaygpO1xuXHR9LCBbXSk7XG5cblx0Ly8gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHQvLyBcdC8vIGRlYWwoXCJwbGF5ZXJcIik7XG5cdC8vIFx0Y29uc29sZS5sb2coXCIxMTFcIik7XG5cdC8vIH0sIDEwMDAwKTtcblxuICByZXR1cm4gKFxuICAgIDxCb3g+XG5cdFx0PFRleHQ+RGVjayBDb3VudDoge3BsYXlpbmdEZWNrLmxlbmd0aH08L1RleHQ+XG4gICAgPC9Cb3g+XG4gICk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBBcHA7Il19