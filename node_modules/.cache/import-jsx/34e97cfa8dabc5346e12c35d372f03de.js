'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const Counter = require('./counter');

const MyBigList = require('./mybiglist');

const App = () => {
  const [count, setCount] = useState(0);
  const [otherCounter, setOtherCounter] = useState(0);

  const increment = () => {
    setCount(count + 1);
  };

  const decrement = () => {
    setCount(count - 1);
  };

  const incrementOtherCounter = () => {
    setOtherCounter(otherCounter + 1);
  }; // const [playingDeck, setDeck] = React.useState(MultiShuffle());
  // const [value, setValue] = useState("");
  // const addHello = useCallback(() => setValue(value + "Hello!"), [value]);
  // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // const [counter, setCounter] = React.useState(0);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);
  // React.useEffect(() => {
  // 	const timer = setInterval(() => {
  // 			//console.log('Intervalled');
  // 			playingDeck.pop();
  // 			setCounter(Math.round(Math.random() * 15));
  // 		}
  // 		,200);
  // 	return () => {
  // 		clearInterval(timer);
  // 	};
  // }, []);


  return /*#__PURE__*/React.createElement(Box, null);
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkNvdW50ZXIiLCJNeUJpZ0xpc3QiLCJBcHAiLCJjb3VudCIsInNldENvdW50IiwidXNlU3RhdGUiLCJvdGhlckNvdW50ZXIiLCJzZXRPdGhlckNvdW50ZXIiLCJpbmNyZW1lbnQiLCJkZWNyZW1lbnQiLCJpbmNyZW1lbnRPdGhlckNvdW50ZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQSxNQUFYO0FBQW1CQyxFQUFBQSxJQUFuQjtBQUF5QkMsRUFBQUEsS0FBekI7QUFBZ0NDLEVBQUFBO0FBQWhDLElBQXVDTCxPQUFPLENBQUMsS0FBRCxDQUFwRCxDLENBQ0E7OztBQUNBLE1BQU1NLFlBQVksR0FBR04sT0FBTyxDQUFDLFdBQUQsQ0FBNUI7O0FBQ0EsTUFBTU8sSUFBSSxHQUFHUCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFDQSxNQUFNUSxPQUFPLEdBQUdSLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUNBLE1BQU1TLFNBQVMsR0FBR1QsT0FBTyxDQUFDLGFBQUQsQ0FBekI7O0FBRUEsTUFBTVUsR0FBRyxHQUFHLE1BQU07QUFHakIsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JDLFFBQVEsQ0FBQyxDQUFELENBQWxDO0FBQ0EsUUFBTSxDQUFDQyxZQUFELEVBQWVDLGVBQWYsSUFBa0NGLFFBQVEsQ0FBQyxDQUFELENBQWhEOztBQUVBLFFBQU1HLFNBQVMsR0FBRyxNQUFNO0FBQ3ZCSixJQUFBQSxRQUFRLENBQUNELEtBQUssR0FBRyxDQUFULENBQVI7QUFDQSxHQUZEOztBQUdBLFFBQU1NLFNBQVMsR0FBRyxNQUFNO0FBQ3ZCTCxJQUFBQSxRQUFRLENBQUNELEtBQUssR0FBRyxDQUFULENBQVI7QUFDQSxHQUZEOztBQUdBLFFBQU1PLHFCQUFxQixHQUFHLE1BQU07QUFDbkNILElBQUFBLGVBQWUsQ0FBQ0QsWUFBWSxHQUFHLENBQWhCLENBQWY7QUFDQSxHQUZELENBWmlCLENBaUJqQjtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBLHNCQUNDLG9CQUFDLEdBQUQsT0FERDtBQU1BLENBbEREOztBQW9EQUssTUFBTSxDQUFDQyxPQUFQLEdBQWlCVixHQUFqQixDLENBTUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHt1c2VJbnB1dCwgcmVuZGVyLCBUZXh0LCBDb2xvciwgQm94fSA9IHJlcXVpcmUoJ2luaycpO1xuLy8gY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZSgnaW5rLXRleHQtaW5wdXQnKS5kZWZhdWx0O1xuY29uc3QgTXVsdGlTaHVmZmxlID0gcmVxdWlyZSgnLi9zaHVmZmxlJyk7XG5jb25zdCBEZWNrID0gcmVxdWlyZSgnLi9kZWNrJyk7XG5jb25zdCBDb3VudGVyID0gcmVxdWlyZSgnLi9jb3VudGVyJyk7XG5jb25zdCBNeUJpZ0xpc3QgPSByZXF1aXJlKCcuL215YmlnbGlzdCcpO1xuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG5cblxuXHRjb25zdCBbY291bnQsIHNldENvdW50XSA9IHVzZVN0YXRlKDApXG5cdGNvbnN0IFtvdGhlckNvdW50ZXIsIHNldE90aGVyQ291bnRlcl0gPSB1c2VTdGF0ZSgwKVxuXG5cdGNvbnN0IGluY3JlbWVudCA9ICgpID0+IHtcblx0XHRzZXRDb3VudChjb3VudCArIDEpXG5cdH1cblx0Y29uc3QgZGVjcmVtZW50ID0gKCkgPT4ge1xuXHRcdHNldENvdW50KGNvdW50IC0gMSlcblx0fVxuXHRjb25zdCBpbmNyZW1lbnRPdGhlckNvdW50ZXIgPSAoKSA9PiB7XG5cdFx0c2V0T3RoZXJDb3VudGVyKG90aGVyQ291bnRlciArIDEpXG5cdH1cblxuXG5cdC8vIGNvbnN0IFtwbGF5aW5nRGVjaywgc2V0RGVja10gPSBSZWFjdC51c2VTdGF0ZShNdWx0aVNodWZmbGUoKSk7XG5cblx0Ly8gY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VTdGF0ZShcIlwiKTtcblx0Ly8gY29uc3QgYWRkSGVsbG8gPSB1c2VDYWxsYmFjaygoKSA9PiBzZXRWYWx1ZSh2YWx1ZSArIFwiSGVsbG8hXCIpLCBbdmFsdWVdKTtcblxuXG5cdC8vIGNvbnN0IFtwbGF5ZXJIYW5kLCBzZXRQbGF5ZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXHQvLyBjb25zdCBbZGVhbGVySGFuZCwgc2V0RGVhbGVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Ly8gY29uc3QgW2NvdW50ZXIsIHNldENvdW50ZXJdID0gUmVhY3QudXNlU3RhdGUoMCk7XG5cblx0Ly8gc2V0RGVjayhbXG5cdC8vIFx0Li4ucGxheWluZ0RlY2ssXG5cdC8vIFx0Li4uZGVja1xuXHQvLyBdKTtcblxuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHQvLyBcdFx0XHQvL2NvbnNvbGUubG9nKCdJbnRlcnZhbGxlZCcpO1xuXHQvLyBcdFx0XHRwbGF5aW5nRGVjay5wb3AoKTtcblx0Ly8gXHRcdFx0c2V0Q291bnRlcihNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxNSkpO1xuXHQvLyBcdFx0fVxuXHQvLyBcdFx0LDIwMCk7XG5cdC8vIFx0cmV0dXJuICgpID0+IHtcblx0Ly8gXHRcdGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHQvLyBcdH07XG5cdC8vIH0sIFtdKTtcblxuXHRyZXR1cm4gKFxuXHRcdDxCb3g+XG5cdFx0XHR7LyogPFRleHQ+Q2FyZCBDb3VudDoge3BsYXlpbmdEZWNrLmxlbmd0aH0gPC9UZXh0PlxuXHRcdFx0PENvdW50ZXIgYWRkSGVsbG89e2FkZEhlbGxvfSBteU9iamVjdD17eyBrZXk6IFwidmFsdWVcIiB9fSAvPiAqL31cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuXG5cblxuXG5cbi8vIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuLy8gaW1wb3J0IHVzZVNlYXJjaCBmcm9tICcuL2ZldGNoLWl0ZW1zJztcblxuLy8gZnVuY3Rpb24gTXlQYXJlbnQoeyB0ZXJtIH0pIHtcbi8vICAgY29uc3QgaGFuZGxlQ2xpY2sgPSB1c2VDYWxsYmFjaygoaXRlbSkgPT4ge1xuLy8gICAgIGNvbnNvbGUubG9nKCdZb3UgY2xpY2tlZCAnLCBpdGVtKTtcbi8vICAgfSwgW3Rlcm1dKTtcblxuLy8gICBjb25zdCBpdGVtcyA9IHVzZVNlYXJjaCh0ZXJtKTtcblxuLy8gICByZXR1cm4gKFxuLy8gICAgIDxNeUJpZ0xpc3Rcbi8vICAgICAgIGl0ZW1zPXtpdGVtc31cbi8vICAgICAgIGhhbmRsZUNsaWNrPXtoYW5kbGVDbGlja31cbi8vICAgICAvPlxuLy8gICApO1xuLy8gfSJdfQ==