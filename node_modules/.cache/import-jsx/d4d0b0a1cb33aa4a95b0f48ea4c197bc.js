'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  const [count, setCount] = React.useState(0); // const [playingDeck, setDeck] = React.useState(MultiShuffle());
  // const [value, setValue] = useState("");
  // const addHello = useCallback(() => setValue(value + "Hello!"), [value]);
  // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // const [counter, setCounter] = React.useState(0);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  React.useEffect(() => {
    setCount(count => count + 1);
  }); // React.useEffect(() => {
  // 	const timer = setInterval(() => {
  // 			//console.log('Intervalled');
  // 			playingDeck.pop();
  // 			setCounter(Math.round(Math.random() * 15));
  // 		}
  // 		,200);
  // 	return () => {
  // 		clearInterval(timer);
  // 	};
  // }, []);

  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Count: ", count));
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkFwcCIsImNvdW50Iiwic2V0Q291bnQiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDQyxFQUFBQSxRQUFEO0FBQVdDLEVBQUFBLE1BQVg7QUFBbUJDLEVBQUFBLElBQW5CO0FBQXlCQyxFQUFBQSxLQUF6QjtBQUFnQ0MsRUFBQUE7QUFBaEMsSUFBdUNMLE9BQU8sQ0FBQyxLQUFELENBQXBELEMsQ0FDQTs7O0FBQ0EsTUFBTU0sWUFBWSxHQUFHTixPQUFPLENBQUMsV0FBRCxDQUE1Qjs7QUFDQSxNQUFNTyxJQUFJLEdBQUdQLE9BQU8sQ0FBQyxRQUFELENBQXBCOztBQUdBLE1BQU1RLEdBQUcsR0FBRyxNQUFNO0FBRWpCLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CWCxLQUFLLENBQUNZLFFBQU4sQ0FBZSxDQUFmLENBQTFCLENBRmlCLENBSWpCO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBWixFQUFBQSxLQUFLLENBQUNhLFNBQU4sQ0FBZ0IsTUFBTTtBQUNyQkYsSUFBQUEsUUFBUSxDQUFDRCxLQUFLLElBQUdBLEtBQUssR0FBQyxDQUFmLENBQVI7QUFDQSxHQUZELEVBbkJpQixDQXVCakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQkFDQyxvQkFBQyxHQUFELHFCQUdDLG9CQUFDLElBQUQsbUJBQWNBLEtBQWQsQ0FIRCxDQUREO0FBT0EsQ0ExQ0Q7O0FBNENBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUJOLEdBQWpCLEMsQ0FNQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3VzZUlucHV0LCByZW5kZXIsIFRleHQsIENvbG9yLCBCb3h9ID0gcmVxdWlyZSgnaW5rJyk7XG4vLyBjb25zdCBUZXh0SW5wdXQgPSByZXF1aXJlKCdpbmstdGV4dC1pbnB1dCcpLmRlZmF1bHQ7XG5jb25zdCBNdWx0aVNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUnKTtcbmNvbnN0IERlY2sgPSByZXF1aXJlKCcuL2RlY2snKTtcblxuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG5cblx0Y29uc3QgW2NvdW50LCBzZXRDb3VudF0gPSBSZWFjdC51c2VTdGF0ZSgwKTtcblxuXHQvLyBjb25zdCBbcGxheWluZ0RlY2ssIHNldERlY2tdID0gUmVhY3QudXNlU3RhdGUoTXVsdGlTaHVmZmxlKCkpO1xuXG5cdC8vIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlU3RhdGUoXCJcIik7XG5cdC8vIGNvbnN0IGFkZEhlbGxvID0gdXNlQ2FsbGJhY2soKCkgPT4gc2V0VmFsdWUodmFsdWUgKyBcIkhlbGxvIVwiKSwgW3ZhbHVlXSk7XG5cblxuXHQvLyBjb25zdCBbcGxheWVySGFuZCwgc2V0UGxheWVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Ly8gY29uc3QgW2RlYWxlckhhbmQsIHNldERlYWxlcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdC8vIGNvbnN0IFtjb3VudGVyLCBzZXRDb3VudGVyXSA9IFJlYWN0LnVzZVN0YXRlKDApO1xuXG5cdC8vIHNldERlY2soW1xuXHQvLyBcdC4uLnBsYXlpbmdEZWNrLFxuXHQvLyBcdC4uLmRlY2tcblx0Ly8gXSk7XG5cblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0XHRzZXRDb3VudChjb3VudD0+KGNvdW50KzEpKTtcblx0fSk7XG5cblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblx0Ly8gXHRcdFx0Ly9jb25zb2xlLmxvZygnSW50ZXJ2YWxsZWQnKTtcblx0Ly8gXHRcdFx0cGxheWluZ0RlY2sucG9wKCk7XG5cdC8vIFx0XHRcdHNldENvdW50ZXIoTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTUpKTtcblx0Ly8gXHRcdH1cblx0Ly8gXHRcdCwyMDApO1xuXHQvLyBcdHJldHVybiAoKSA9PiB7XG5cdC8vIFx0XHRjbGVhckludGVydmFsKHRpbWVyKTtcblx0Ly8gXHR9O1xuXHQvLyB9LCBbXSk7XG5cblx0cmV0dXJuIChcblx0XHQ8Qm94PlxuXHRcdFx0ey8qIDxUZXh0PkNhcmQgQ291bnQ6IHtwbGF5aW5nRGVjay5sZW5ndGh9IDwvVGV4dD5cblx0XHRcdDxDb3VudGVyIGFkZEhlbGxvPXthZGRIZWxsb30gbXlPYmplY3Q9e3sga2V5OiBcInZhbHVlXCIgfX0gLz4gKi99XG5cdFx0XHQ8VGV4dD5Db3VudDoge2NvdW50fTwvVGV4dD5cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuXG5cblxuXG5cbi8vIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuLy8gaW1wb3J0IHVzZVNlYXJjaCBmcm9tICcuL2ZldGNoLWl0ZW1zJztcblxuLy8gZnVuY3Rpb24gTXlQYXJlbnQoeyB0ZXJtIH0pIHtcbi8vICAgY29uc3QgaGFuZGxlQ2xpY2sgPSB1c2VDYWxsYmFjaygoaXRlbSkgPT4ge1xuLy8gICAgIGNvbnNvbGUubG9nKCdZb3UgY2xpY2tlZCAnLCBpdGVtKTtcbi8vICAgfSwgW3Rlcm1dKTtcblxuLy8gICBjb25zdCBpdGVtcyA9IHVzZVNlYXJjaCh0ZXJtKTtcblxuLy8gICByZXR1cm4gKFxuLy8gICAgIDxNeUJpZ0xpc3Rcbi8vICAgICAgIGl0ZW1zPXtpdGVtc31cbi8vICAgICAgIGhhbmRsZUNsaWNrPXtoYW5kbGVDbGlja31cbi8vICAgICAvPlxuLy8gICApO1xuLy8gfSJdfQ==