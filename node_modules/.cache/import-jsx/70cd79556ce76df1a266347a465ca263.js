'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  //const [playingDeck, setDeck] = React.useState(MultiShuffle());
  const [playingDeck, dispatch] = React.useReducer((state, action) => {
    switch (action.type) {
      case 'add':
        return [...state, MultiShuffle()];

      default:
        return state;
    }
  }, []); //   dispatch({
  // 	type: 'add',
  // 	name: MultiShuffle()
  //   });
  // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  React.useEffect(() => {
    const timer = setInterval(() => {
      dispatch({
        type: 'add',
        name: MultiShuffle()
      });
      console.log(playingDeck); // setDeck([
      // playingDeck.pop();
      // 	...playingDeck,
      // 	...deck
      // ]);
      // var array = [...playingDeck]; // make a separate copy of the array
      // array.pop();
      // setDeck(array);
      // setDeck([
      // 		...playingDeck,
      // 		null
      // 	]);
      // console.log(array.length);
    }, 1000);
    return () => {
      clearInterval(timer);
    };
  }, []);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Card Count: ", playingDeck.length, " "));
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkFwcCIsInBsYXlpbmdEZWNrIiwiZGlzcGF0Y2giLCJ1c2VSZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJ0eXBlIiwidXNlRWZmZWN0IiwidGltZXIiLCJzZXRJbnRlcnZhbCIsIm5hbWUiLCJjb25zb2xlIiwibG9nIiwiY2xlYXJJbnRlcnZhbCIsImxlbmd0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDQyxFQUFBQSxRQUFEO0FBQVdDLEVBQUFBLE1BQVg7QUFBbUJDLEVBQUFBLElBQW5CO0FBQXlCQyxFQUFBQSxLQUF6QjtBQUFnQ0MsRUFBQUE7QUFBaEMsSUFBdUNMLE9BQU8sQ0FBQyxLQUFELENBQXBELEMsQ0FDQTs7O0FBQ0EsTUFBTU0sWUFBWSxHQUFHTixPQUFPLENBQUMsV0FBRCxDQUE1Qjs7QUFDQSxNQUFNTyxJQUFJLEdBQUdQLE9BQU8sQ0FBQyxRQUFELENBQXBCOztBQUlBLE1BQU1RLEdBQUcsR0FBRyxNQUFNO0FBQ2pCO0FBR0EsUUFBTSxDQUFDQyxXQUFELEVBQWNDLFFBQWQsSUFBMEJYLEtBQUssQ0FBQ1ksVUFBTixDQUFpQixDQUFDQyxLQUFELEVBQVFDLE1BQVIsS0FBbUI7QUFDbkUsWUFBUUEsTUFBTSxDQUFDQyxJQUFmO0FBQ0UsV0FBSyxLQUFMO0FBQ0QsZUFBTyxDQUNMLEdBQUdGLEtBREUsRUFFTE4sWUFBWSxFQUZQLENBQVA7O0FBSUM7QUFDRCxlQUFPTSxLQUFQO0FBUEQ7QUFTRSxHQVY2QixFQVUzQixFQVYyQixDQUFoQyxDQUppQixDQWdCakI7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFiLEVBQUFBLEtBQUssQ0FBQ2dCLFNBQU4sQ0FBZ0IsTUFBTTtBQUNyQixVQUFNQyxLQUFLLEdBQUdDLFdBQVcsQ0FBQyxNQUFNO0FBRTdCUCxNQUFBQSxRQUFRLENBQUM7QUFDWkksUUFBQUEsSUFBSSxFQUFFLEtBRE07QUFFWkksUUFBQUEsSUFBSSxFQUFFWixZQUFZO0FBRk4sT0FBRCxDQUFSO0FBS0ZhLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZWCxXQUFaLEVBUCtCLENBUS9CO0FBRUE7QUFDQztBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0EsS0F4QnVCLEVBeUJ2QixJQXpCdUIsQ0FBekI7QUEwQkEsV0FBTyxNQUFNO0FBQ1pZLE1BQUFBLGFBQWEsQ0FBQ0wsS0FBRCxDQUFiO0FBQ0EsS0FGRDtBQUdBLEdBOUJELEVBOEJHLEVBOUJIO0FBK0JBLHNCQUNDLG9CQUFDLEdBQUQscUJBQ0Msb0JBQUMsSUFBRCx3QkFBbUJQLFdBQVcsQ0FBQ2EsTUFBL0IsTUFERCxDQUREO0FBTUEsQ0FwRUQ7O0FBc0VBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJoQixHQUFqQixDLENBTUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHt1c2VJbnB1dCwgcmVuZGVyLCBUZXh0LCBDb2xvciwgQm94fSA9IHJlcXVpcmUoJ2luaycpO1xuLy8gY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZSgnaW5rLXRleHQtaW5wdXQnKS5kZWZhdWx0O1xuY29uc3QgTXVsdGlTaHVmZmxlID0gcmVxdWlyZSgnLi9zaHVmZmxlJyk7XG5jb25zdCBEZWNrID0gcmVxdWlyZSgnLi9kZWNrJyk7XG5cblxuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG5cdC8vY29uc3QgW3BsYXlpbmdEZWNrLCBzZXREZWNrXSA9IFJlYWN0LnVzZVN0YXRlKE11bHRpU2h1ZmZsZSgpKTtcblxuXG5cdGNvbnN0IFtwbGF5aW5nRGVjaywgZGlzcGF0Y2hdID0gUmVhY3QudXNlUmVkdWNlcigoc3RhdGUsIGFjdGlvbikgPT4ge1xuXHRcdHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcblx0XHQgIGNhc2UgJ2FkZCc6XG5cdFx0XHRyZXR1cm4gW1xuXHRcdFx0ICAuLi5zdGF0ZSxcblx0XHRcdCAgTXVsdGlTaHVmZmxlKClcblx0XHRcdF07XG5cdFx0ICBkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdH1cblx0ICB9LCBbXSk7XG5cblx0Ly8gICBkaXNwYXRjaCh7XG5cdC8vIFx0dHlwZTogJ2FkZCcsXG5cdC8vIFx0bmFtZTogTXVsdGlTaHVmZmxlKClcblx0Ly8gICB9KTtcblxuXG5cdC8vIGNvbnN0IFtwbGF5ZXJIYW5kLCBzZXRQbGF5ZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXHQvLyBjb25zdCBbZGVhbGVySGFuZCwgc2V0RGVhbGVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblxuXG5cdC8vIHNldERlY2soW1xuXHQvLyBcdC4uLnBsYXlpbmdEZWNrLFxuXHQvLyBcdC4uLmRlY2tcblx0Ly8gXSk7XG5cblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblxuXHRcdFx0ICBkaXNwYXRjaCh7XG5cdFx0dHlwZTogJ2FkZCcsXG5cdFx0bmFtZTogTXVsdGlTaHVmZmxlKClcblx0ICB9KTtcblxuXHQgIGNvbnNvbGUubG9nKHBsYXlpbmdEZWNrKTtcblx0XHRcdC8vIHNldERlY2soW1xuXG5cdFx0XHQvLyBwbGF5aW5nRGVjay5wb3AoKTtcblx0XHRcdFx0Ly8gXHQuLi5wbGF5aW5nRGVjayxcblx0XHRcdFx0Ly8gXHQuLi5kZWNrXG5cdFx0XHRcdC8vIF0pO1xuXG5cdFx0XHRcdC8vIHZhciBhcnJheSA9IFsuLi5wbGF5aW5nRGVja107IC8vIG1ha2UgYSBzZXBhcmF0ZSBjb3B5IG9mIHRoZSBhcnJheVxuXHRcdFx0XHQvLyBhcnJheS5wb3AoKTtcblx0XHRcdFx0Ly8gc2V0RGVjayhhcnJheSk7XG5cdFx0XHRcdC8vIHNldERlY2soW1xuXHRcdFx0XHQvLyBcdFx0Li4ucGxheWluZ0RlY2ssXG5cdFx0XHRcdC8vIFx0XHRudWxsXG5cdFx0XHRcdC8vIFx0XSk7XG5cblx0XHRcdFx0Ly8gY29uc29sZS5sb2coYXJyYXkubGVuZ3RoKTtcblx0XHRcdH1cblx0XHRcdCwxMDAwKTtcblx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0Y2xlYXJJbnRlcnZhbCh0aW1lcik7XG5cdFx0fTtcblx0fSwgW10pO1xuXHRyZXR1cm4gKFxuXHRcdDxCb3g+XG5cdFx0XHQ8VGV4dD5DYXJkIENvdW50OiB7cGxheWluZ0RlY2subGVuZ3RofSA8L1RleHQ+XG5cdFx0XHR7LyogPFRleHQ+Q291bnQ6IHtjb3VudH08L1RleHQ+ICovfVxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG5cblxuXG5cblxuLy8gaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG4vLyBpbXBvcnQgdXNlU2VhcmNoIGZyb20gJy4vZmV0Y2gtaXRlbXMnO1xuXG4vLyBmdW5jdGlvbiBNeVBhcmVudCh7IHRlcm0gfSkge1xuLy8gICBjb25zdCBoYW5kbGVDbGljayA9IHVzZUNhbGxiYWNrKChpdGVtKSA9PiB7XG4vLyAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkICcsIGl0ZW0pO1xuLy8gICB9LCBbdGVybV0pO1xuXG4vLyAgIGNvbnN0IGl0ZW1zID0gdXNlU2VhcmNoKHRlcm0pO1xuXG4vLyAgIHJldHVybiAoXG4vLyAgICAgPE15QmlnTGlzdFxuLy8gICAgICAgaXRlbXM9e2l0ZW1zfVxuLy8gICAgICAgaGFuZGxlQ2xpY2s9e2hhbmRsZUNsaWNrfVxuLy8gICAgIC8+XG4vLyAgICk7XG4vLyB9Il19