'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  //const [playingDeck, setDeck] = React.useState(MultiShuffle());
  const [state, dispatch] = React.useReducer(reducer, playingDeck);
  const initialState = 0;

  const reducer = (state, action) => {
    switch (action) {
      case 'increment':
        return state + 1;

      case 'decrement':
        return state - 1;

      case 'reset':
        return 0;

      default:
        throw new Error('Unexpected action');
    }

    ;
  }; // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);


  React.useEffect(() => {
    const timer = setInterval(() => {
      // setDeck([
      // 	...playingDeck,
      // 	...deck
      // ]);
      var array = [...playingDeck]; // make a separate copy of the array

      array.pop(); // setDeck(array);

      setDeck([...playingDeck, null]);
      console.log(array.length);
    }, 1000);
    return () => {
      clearInterval(timer);
    };
  }, []);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Card Count: ", playingDeck.length, " "));
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkFwcCIsInN0YXRlIiwiZGlzcGF0Y2giLCJ1c2VSZWR1Y2VyIiwicmVkdWNlciIsInBsYXlpbmdEZWNrIiwiaW5pdGlhbFN0YXRlIiwiYWN0aW9uIiwiRXJyb3IiLCJ1c2VFZmZlY3QiLCJ0aW1lciIsInNldEludGVydmFsIiwiYXJyYXkiLCJwb3AiLCJzZXREZWNrIiwiY29uc29sZSIsImxvZyIsImxlbmd0aCIsImNsZWFySW50ZXJ2YWwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQSxNQUFYO0FBQW1CQyxFQUFBQSxJQUFuQjtBQUF5QkMsRUFBQUEsS0FBekI7QUFBZ0NDLEVBQUFBO0FBQWhDLElBQXVDTCxPQUFPLENBQUMsS0FBRCxDQUFwRCxDLENBQ0E7OztBQUNBLE1BQU1NLFlBQVksR0FBR04sT0FBTyxDQUFDLFdBQUQsQ0FBNUI7O0FBQ0EsTUFBTU8sSUFBSSxHQUFHUCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFJQSxNQUFNUSxHQUFHLEdBQUcsTUFBTTtBQUNqQjtBQUVBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CWCxLQUFLLENBQUNZLFVBQU4sQ0FBaUJDLE9BQWpCLEVBQTBCQyxXQUExQixDQUExQjtBQUNBLFFBQU1DLFlBQVksR0FBRyxDQUFyQjs7QUFDQSxRQUFNRixPQUFPLEdBQUcsQ0FBQ0gsS0FBRCxFQUFRTSxNQUFSLEtBQW1CO0FBQ2hDLFlBQVFBLE1BQVI7QUFDRSxXQUFLLFdBQUw7QUFBa0IsZUFBT04sS0FBSyxHQUFHLENBQWY7O0FBQ2xCLFdBQUssV0FBTDtBQUFrQixlQUFPQSxLQUFLLEdBQUcsQ0FBZjs7QUFDbEIsV0FBSyxPQUFMO0FBQWMsZUFBTyxDQUFQOztBQUNkO0FBQVMsY0FBTSxJQUFJTyxLQUFKLENBQVUsbUJBQVYsQ0FBTjtBQUpYOztBQUtEO0FBQ0QsR0FQRCxDQUxpQixDQWVqQjtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBakIsRUFBQUEsS0FBSyxDQUFDa0IsU0FBTixDQUFnQixNQUFNO0FBQ3JCLFVBQU1DLEtBQUssR0FBR0MsV0FBVyxDQUFDLE1BQU07QUFDL0I7QUFFQztBQUNBO0FBQ0E7QUFFQSxVQUFJQyxLQUFLLEdBQUcsQ0FBQyxHQUFHUCxXQUFKLENBQVosQ0FQOEIsQ0FPQTs7QUFDOUJPLE1BQUFBLEtBQUssQ0FBQ0MsR0FBTixHQVI4QixDQVM5Qjs7QUFDQUMsTUFBQUEsT0FBTyxDQUFDLENBQ04sR0FBR1QsV0FERyxFQUVOLElBRk0sQ0FBRCxDQUFQO0FBS0FVLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSixLQUFLLENBQUNLLE1BQWxCO0FBQ0EsS0FoQnVCLEVBaUJ2QixJQWpCdUIsQ0FBekI7QUFrQkEsV0FBTyxNQUFNO0FBQ1pDLE1BQUFBLGFBQWEsQ0FBQ1IsS0FBRCxDQUFiO0FBQ0EsS0FGRDtBQUdBLEdBdEJELEVBc0JHLEVBdEJIO0FBdUJBLHNCQUNDLG9CQUFDLEdBQUQscUJBQ0Msb0JBQUMsSUFBRCx3QkFBbUJMLFdBQVcsQ0FBQ1ksTUFBL0IsTUFERCxDQUREO0FBTUEsQ0FyREQ7O0FBdURBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUJwQixHQUFqQixDLENBTUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHt1c2VJbnB1dCwgcmVuZGVyLCBUZXh0LCBDb2xvciwgQm94fSA9IHJlcXVpcmUoJ2luaycpO1xuLy8gY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZSgnaW5rLXRleHQtaW5wdXQnKS5kZWZhdWx0O1xuY29uc3QgTXVsdGlTaHVmZmxlID0gcmVxdWlyZSgnLi9zaHVmZmxlJyk7XG5jb25zdCBEZWNrID0gcmVxdWlyZSgnLi9kZWNrJyk7XG5cblxuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG5cdC8vY29uc3QgW3BsYXlpbmdEZWNrLCBzZXREZWNrXSA9IFJlYWN0LnVzZVN0YXRlKE11bHRpU2h1ZmZsZSgpKTtcblxuXHRjb25zdCBbc3RhdGUsIGRpc3BhdGNoXSA9IFJlYWN0LnVzZVJlZHVjZXIocmVkdWNlciwgcGxheWluZ0RlY2spO1xuXHRjb25zdCBpbml0aWFsU3RhdGUgPSAwO1xuXHRjb25zdCByZWR1Y2VyID0gKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgXHRcdHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgXHRcdGNhc2UgJ2luY3JlbWVudCc6IHJldHVybiBzdGF0ZSArIDE7XG4gICAgXHRcdGNhc2UgJ2RlY3JlbWVudCc6IHJldHVybiBzdGF0ZSAtIDE7XG4gICAgXHRcdGNhc2UgJ3Jlc2V0JzogcmV0dXJuIDA7XG4gICAgXHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBhY3Rpb24nKTtcblx0XHR9O1xuXHR9XG5cblxuXHQvLyBjb25zdCBbcGxheWVySGFuZCwgc2V0UGxheWVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Ly8gY29uc3QgW2RlYWxlckhhbmQsIHNldERlYWxlcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cblxuXHQvLyBzZXREZWNrKFtcblx0Ly8gXHQuLi5wbGF5aW5nRGVjayxcblx0Ly8gXHQuLi5kZWNrXG5cdC8vIF0pO1xuXG5cdFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0Y29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0XHQvLyBzZXREZWNrKFtcblxuXHRcdFx0XHQvLyBcdC4uLnBsYXlpbmdEZWNrLFxuXHRcdFx0XHQvLyBcdC4uLmRlY2tcblx0XHRcdFx0Ly8gXSk7XG5cblx0XHRcdFx0dmFyIGFycmF5ID0gWy4uLnBsYXlpbmdEZWNrXTsgLy8gbWFrZSBhIHNlcGFyYXRlIGNvcHkgb2YgdGhlIGFycmF5XG5cdFx0XHRcdGFycmF5LnBvcCgpO1xuXHRcdFx0XHQvLyBzZXREZWNrKGFycmF5KTtcblx0XHRcdFx0c2V0RGVjayhbXG5cdFx0XHRcdFx0XHQuLi5wbGF5aW5nRGVjayxcblx0XHRcdFx0XHRcdG51bGxcblx0XHRcdFx0XHRdKTtcblxuXHRcdFx0XHRjb25zb2xlLmxvZyhhcnJheS5sZW5ndGgpO1xuXHRcdFx0fVxuXHRcdFx0LDEwMDApO1xuXHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRjbGVhckludGVydmFsKHRpbWVyKTtcblx0XHR9O1xuXHR9LCBbXSk7XG5cdHJldHVybiAoXG5cdFx0PEJveD5cblx0XHRcdDxUZXh0PkNhcmQgQ291bnQ6IHtwbGF5aW5nRGVjay5sZW5ndGh9IDwvVGV4dD5cblx0XHRcdHsvKiA8VGV4dD5Db3VudDoge2NvdW50fTwvVGV4dD4gKi99XG5cdFx0PC9Cb3g+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcblxuXG5cblxuXG4vLyBpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbi8vIGltcG9ydCB1c2VTZWFyY2ggZnJvbSAnLi9mZXRjaC1pdGVtcyc7XG5cbi8vIGZ1bmN0aW9uIE15UGFyZW50KHsgdGVybSB9KSB7XG4vLyAgIGNvbnN0IGhhbmRsZUNsaWNrID0gdXNlQ2FsbGJhY2soKGl0ZW0pID0+IHtcbi8vICAgICBjb25zb2xlLmxvZygnWW91IGNsaWNrZWQgJywgaXRlbSk7XG4vLyAgIH0sIFt0ZXJtXSk7XG5cbi8vICAgY29uc3QgaXRlbXMgPSB1c2VTZWFyY2godGVybSk7XG5cbi8vICAgcmV0dXJuIChcbi8vICAgICA8TXlCaWdMaXN0XG4vLyAgICAgICBpdGVtcz17aXRlbXN9XG4vLyAgICAgICBoYW5kbGVDbGljaz17aGFuZGxlQ2xpY2t9XG4vLyAgICAgLz5cbi8vICAgKTtcbi8vIH0iXX0=