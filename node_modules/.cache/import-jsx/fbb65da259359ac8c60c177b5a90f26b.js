'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const Child = require('./child');

const App = () => {
  console.log("PARENT");
  const [count, setCount] = React.useState(0); // const [playingDeck, setDeck] = React.useState(MultiShuffle());
  // const [value, setValue] = useState("");
  // const addHello = useCallback(() => setValue(value + "Hello!"), [value]);
  // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // const [counter, setCounter] = React.useState(0);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  React.useEffect(() => {
    const timer = setInterval(() => {
      //console.log('Intervalled');
      // playingDeck.pop();
      // setCounter(Math.round(Math.random() * 15));
      setCount(count => count + 1);
    }, 2000);
    return () => {
      clearInterval(timer);
    };
  }, []);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Count: ", count), /*#__PURE__*/React.createElement(Child, null));
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkNoaWxkIiwiQXBwIiwiY29uc29sZSIsImxvZyIsImNvdW50Iiwic2V0Q291bnQiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInRpbWVyIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBLFFBQUQ7QUFBV0MsRUFBQUEsTUFBWDtBQUFtQkMsRUFBQUEsSUFBbkI7QUFBeUJDLEVBQUFBLEtBQXpCO0FBQWdDQyxFQUFBQTtBQUFoQyxJQUF1Q0wsT0FBTyxDQUFDLEtBQUQsQ0FBcEQsQyxDQUNBOzs7QUFDQSxNQUFNTSxZQUFZLEdBQUdOLE9BQU8sQ0FBQyxXQUFELENBQTVCOztBQUNBLE1BQU1PLElBQUksR0FBR1AsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBQ0EsTUFBTVEsS0FBSyxHQUFHUixPQUFPLENBQUMsU0FBRCxDQUFyQjs7QUFHQSxNQUFNUyxHQUFHLEdBQUcsTUFBTTtBQUNqQkMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksUUFBWjtBQUNBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CZCxLQUFLLENBQUNlLFFBQU4sQ0FBZSxDQUFmLENBQTFCLENBRmlCLENBR2pCO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBZixFQUFBQSxLQUFLLENBQUNnQixTQUFOLENBQWdCLE1BQU07QUFDckIsVUFBTUMsS0FBSyxHQUFHQyxXQUFXLENBQUMsTUFBTTtBQUM5QjtBQUNBO0FBQ0E7QUFDQUosTUFBQUEsUUFBUSxDQUFDRCxLQUFLLElBQUdBLEtBQUssR0FBQyxDQUFmLENBQVI7QUFDQSxLQUx1QixFQU12QixJQU51QixDQUF6QjtBQU9BLFdBQU8sTUFBTTtBQUNaTSxNQUFBQSxhQUFhLENBQUNGLEtBQUQsQ0FBYjtBQUNBLEtBRkQ7QUFHQSxHQVhELEVBV0csRUFYSDtBQVlBLHNCQUNDLG9CQUFDLEdBQUQscUJBRUMsb0JBQUMsSUFBRCxtQkFBY0osS0FBZCxDQUZELGVBR0Msb0JBQUMsS0FBRCxPQUhELENBREQ7QUFPQSxDQW5DRDs7QUFxQ0FPLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlgsR0FBakIsQyxDQU1BO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlSW5wdXQsIHJlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbi8vIGNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IE11bHRpU2h1ZmZsZSA9IHJlcXVpcmUoJy4vc2h1ZmZsZScpO1xuY29uc3QgRGVjayA9IHJlcXVpcmUoJy4vZGVjaycpO1xuY29uc3QgQ2hpbGQgPSByZXF1aXJlKCcuL2NoaWxkJyk7XG5cblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHRjb25zb2xlLmxvZyhcIlBBUkVOVFwiKTtcblx0Y29uc3QgW2NvdW50LCBzZXRDb3VudF0gPSBSZWFjdC51c2VTdGF0ZSgwKTtcblx0Ly8gY29uc3QgW3BsYXlpbmdEZWNrLCBzZXREZWNrXSA9IFJlYWN0LnVzZVN0YXRlKE11bHRpU2h1ZmZsZSgpKTtcblx0Ly8gY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VTdGF0ZShcIlwiKTtcblx0Ly8gY29uc3QgYWRkSGVsbG8gPSB1c2VDYWxsYmFjaygoKSA9PiBzZXRWYWx1ZSh2YWx1ZSArIFwiSGVsbG8hXCIpLCBbdmFsdWVdKTtcblxuXHQvLyBjb25zdCBbcGxheWVySGFuZCwgc2V0UGxheWVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Ly8gY29uc3QgW2RlYWxlckhhbmQsIHNldERlYWxlcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdC8vIGNvbnN0IFtjb3VudGVyLCBzZXRDb3VudGVyXSA9IFJlYWN0LnVzZVN0YXRlKDApO1xuXG5cdC8vIHNldERlY2soW1xuXHQvLyBcdC4uLnBsYXlpbmdEZWNrLFxuXHQvLyBcdC4uLmRlY2tcblx0Ly8gXSk7XG5cblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnSW50ZXJ2YWxsZWQnKTtcblx0XHRcdFx0Ly8gcGxheWluZ0RlY2sucG9wKCk7XG5cdFx0XHRcdC8vIHNldENvdW50ZXIoTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTUpKTtcblx0XHRcdFx0c2V0Q291bnQoY291bnQ9Pihjb3VudCsxKSk7XG5cdFx0XHR9XG5cdFx0XHQsMjAwMCk7XG5cdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHRcdH07XG5cdH0sIFtdKTtcblx0cmV0dXJuIChcblx0XHQ8Qm94PlxuXHRcdFx0ey8qIDxUZXh0PkNhcmQgQ291bnQ6IHtwbGF5aW5nRGVjay5sZW5ndGh9IDwvVGV4dD4gKi99XG5cdFx0XHQ8VGV4dD5Db3VudDoge2NvdW50fTwvVGV4dD5cblx0XHRcdDxDaGlsZCAvPlxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG5cblxuXG5cblxuLy8gaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG4vLyBpbXBvcnQgdXNlU2VhcmNoIGZyb20gJy4vZmV0Y2gtaXRlbXMnO1xuXG4vLyBmdW5jdGlvbiBNeVBhcmVudCh7IHRlcm0gfSkge1xuLy8gICBjb25zdCBoYW5kbGVDbGljayA9IHVzZUNhbGxiYWNrKChpdGVtKSA9PiB7XG4vLyAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkICcsIGl0ZW0pO1xuLy8gICB9LCBbdGVybV0pO1xuXG4vLyAgIGNvbnN0IGl0ZW1zID0gdXNlU2VhcmNoKHRlcm0pO1xuXG4vLyAgIHJldHVybiAoXG4vLyAgICAgPE15QmlnTGlzdFxuLy8gICAgICAgaXRlbXM9e2l0ZW1zfVxuLy8gICAgICAgaGFuZGxlQ2xpY2s9e2hhbmRsZUNsaWNrfVxuLy8gICAgIC8+XG4vLyAgICk7XG4vLyB9Il19