'use strict';

const React = require('react');

const {
  render,
  Text,
  Color,
  Box
} = require('ink');

const TextInput = require('ink-text-input').default;

const Shuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  const [playerHand, setPlayer] = React.useState([]);
  const [dealerHand, setDealer] = React.useState([]); // const [playingDeck, setDeck] = React.useState([]);

  var playingDeck = [];

  const shuffleNewDeck = () => {
    //event.preventDefault();
    let deck1 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck2 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck3 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck4 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck5 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck6 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    deck1.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
    playingDeck = [...deck1]; // setDeck([
    //   ...playingDeck,
    //   ...deck1
    // ]);
  };

  const deal = person => {
    var card = playingDeck.pop();

    switch (person) {
      case "player":
        setPlayer([...playerHand, card]);
        break;

      case "dealer":
        setDealer([...playerHand, card]);
        break;

      default:
        break;
    }
  };

  React.useEffect(() => {
    shuffleNewDeck();
  }, []);
  setInterval(() => {
    // deal("player");
    console.log("111");
  }, 10000);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Deck Count: ", playingDeck.length));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInJlbmRlciIsIlRleHQiLCJDb2xvciIsIkJveCIsIlRleHRJbnB1dCIsImRlZmF1bHQiLCJTaHVmZmxlIiwiRGVjayIsIkFwcCIsInBsYXllckhhbmQiLCJzZXRQbGF5ZXIiLCJ1c2VTdGF0ZSIsImRlYWxlckhhbmQiLCJzZXREZWFsZXIiLCJwbGF5aW5nRGVjayIsInNodWZmbGVOZXdEZWNrIiwiZGVjazEiLCJtYXAiLCJhIiwiZGVjazIiLCJkZWNrMyIsImRlY2s0IiwiZGVjazUiLCJkZWNrNiIsInB1c2giLCJkZWFsIiwicGVyc29uIiwiY2FyZCIsInBvcCIsInVzZUVmZmVjdCIsInNldEludGVydmFsIiwiY29uc29sZSIsImxvZyIsImxlbmd0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDQyxFQUFBQSxNQUFEO0FBQVNDLEVBQUFBLElBQVQ7QUFBZUMsRUFBQUEsS0FBZjtBQUFzQkMsRUFBQUE7QUFBdEIsSUFBNkJKLE9BQU8sQ0FBQyxLQUFELENBQTFDOztBQUNBLE1BQU1LLFNBQVMsR0FBR0wsT0FBTyxDQUFDLGdCQUFELENBQVAsQ0FBMEJNLE9BQTVDOztBQUNBLE1BQU1DLE9BQU8sR0FBR1AsT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBQ0EsTUFBTVEsSUFBSSxHQUFHUixPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFFQSxNQUFNUyxHQUFHLEdBQUcsTUFBTTtBQUNqQixRQUFNLENBQUNDLFVBQUQsRUFBYUMsU0FBYixJQUEwQlosS0FBSyxDQUFDYSxRQUFOLENBQWUsRUFBZixDQUFoQztBQUNBLFFBQU0sQ0FBQ0MsVUFBRCxFQUFhQyxTQUFiLElBQTBCZixLQUFLLENBQUNhLFFBQU4sQ0FBZSxFQUFmLENBQWhDLENBRmlCLENBR2pCOztBQUVBLE1BQUlHLFdBQVcsR0FBRyxFQUFsQjs7QUFFQSxRQUFNQyxjQUFjLEdBQUcsTUFBTTtBQUM1QjtBQUNBLFFBQUlDLEtBQUssR0FBR1YsT0FBTyxDQUFDO0FBQUNDLE1BQUFBO0FBQUQsS0FBRCxDQUFQLENBQWdCVSxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixLQUFMLENBQXJCLENBQVo7QUFDQSxRQUFJQyxLQUFLLEdBQUdiLE9BQU8sQ0FBQztBQUFDQyxNQUFBQTtBQUFELEtBQUQsQ0FBUCxDQUFnQlUsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosS0FBTCxDQUFyQixDQUFaO0FBQ0EsUUFBSUUsS0FBSyxHQUFHZCxPQUFPLENBQUM7QUFBQ0MsTUFBQUE7QUFBRCxLQUFELENBQVAsQ0FBZ0JVLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEtBQUwsQ0FBckIsQ0FBWjtBQUNBLFFBQUlHLEtBQUssR0FBR2YsT0FBTyxDQUFDO0FBQUNDLE1BQUFBO0FBQUQsS0FBRCxDQUFQLENBQWdCVSxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixLQUFMLENBQXJCLENBQVo7QUFDQSxRQUFJSSxLQUFLLEdBQUdoQixPQUFPLENBQUM7QUFBQ0MsTUFBQUE7QUFBRCxLQUFELENBQVAsQ0FBZ0JVLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEtBQUwsQ0FBckIsQ0FBWjtBQUNBLFFBQUlLLEtBQUssR0FBR2pCLE9BQU8sQ0FBQztBQUFDQyxNQUFBQTtBQUFELEtBQUQsQ0FBUCxDQUFnQlUsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosS0FBTCxDQUFyQixDQUFaO0FBRUFGLElBQUFBLEtBQUssQ0FBQ1EsSUFBTixDQUFXLEdBQUdMLEtBQWQsRUFBcUIsR0FBR0MsS0FBeEIsRUFBK0IsR0FBR0MsS0FBbEMsRUFBeUMsR0FBR0MsS0FBNUMsRUFBbUQsR0FBR0MsS0FBdEQ7QUFDQVQsSUFBQUEsV0FBVyxHQUFHLENBQUMsR0FBR0UsS0FBSixDQUFkLENBVjRCLENBVzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FmRDs7QUFpQkEsUUFBTVMsSUFBSSxHQUFJQyxNQUFELElBQVk7QUFDeEIsUUFBSUMsSUFBSSxHQUFHYixXQUFXLENBQUNjLEdBQVosRUFBWDs7QUFDQSxZQUFRRixNQUFSO0FBQ0MsV0FBSyxRQUFMO0FBQ0NoQixRQUFBQSxTQUFTLENBQUMsQ0FBQyxHQUFHRCxVQUFKLEVBQWVrQixJQUFmLENBQUQsQ0FBVDtBQUNBOztBQUNELFdBQUssUUFBTDtBQUNDZCxRQUFBQSxTQUFTLENBQUMsQ0FBQyxHQUFHSixVQUFKLEVBQWVrQixJQUFmLENBQUQsQ0FBVDtBQUNBOztBQUNEO0FBQ0M7QUFSRjtBQVVBLEdBWkQ7O0FBY0E3QixFQUFBQSxLQUFLLENBQUMrQixTQUFOLENBQWdCLE1BQU07QUFDcEJkLElBQUFBLGNBQWM7QUFDZixHQUZELEVBRUcsRUFGSDtBQUlBZSxFQUFBQSxXQUFXLENBQUMsTUFBTTtBQUNqQjtBQUNBQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxLQUFaO0FBQ0EsR0FIVSxFQUdSLEtBSFEsQ0FBWDtBQUtDLHNCQUNFLG9CQUFDLEdBQUQscUJBQ0Ysb0JBQUMsSUFBRCx3QkFBbUJsQixXQUFXLENBQUNtQixNQUEvQixDQURFLENBREY7QUFLRCxDQXBERDs7QUFxREFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjNCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3JlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IFNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUnKTtcbmNvbnN0IERlY2sgPSByZXF1aXJlKCcuL2RlY2snKTtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHRjb25zdCBbcGxheWVySGFuZCwgc2V0UGxheWVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Y29uc3QgW2RlYWxlckhhbmQsIHNldERlYWxlcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdC8vIGNvbnN0IFtwbGF5aW5nRGVjaywgc2V0RGVja10gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cblx0dmFyIHBsYXlpbmdEZWNrID0gW107XG5cblx0Y29uc3Qgc2h1ZmZsZU5ld0RlY2sgPSAoKSA9PiB7XG5cdFx0Ly9ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGxldCBkZWNrMSA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdFx0bGV0IGRlY2syID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0XHRsZXQgZGVjazMgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRcdGxldCBkZWNrNCA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdFx0bGV0IGRlY2s1ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0XHRsZXQgZGVjazYgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXG5cdFx0ZGVjazEucHVzaCguLi5kZWNrMiwgLi4uZGVjazMsIC4uLmRlY2s0LCAuLi5kZWNrNSwgLi4uZGVjazYpO1xuXHRcdHBsYXlpbmdEZWNrID0gWy4uLmRlY2sxXTtcblx0XHQvLyBzZXREZWNrKFtcblx0XHQvLyAgIC4uLnBsYXlpbmdEZWNrLFxuXHRcdC8vICAgLi4uZGVjazFcblx0XHQvLyBdKTtcblx0fTtcblxuXHRjb25zdCBkZWFsID0gKHBlcnNvbikgPT4ge1xuXHRcdHZhciBjYXJkID0gcGxheWluZ0RlY2sucG9wKCk7XG5cdFx0c3dpdGNoIChwZXJzb24pIHtcblx0XHRcdGNhc2UgXCJwbGF5ZXJcIjpcblx0XHRcdFx0c2V0UGxheWVyKFsuLi5wbGF5ZXJIYW5kLGNhcmRdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiZGVhbGVyXCI6XG5cdFx0XHRcdHNldERlYWxlcihbLi4ucGxheWVySGFuZCxjYXJkXSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9O1xuXG5cdFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdCAgc2h1ZmZsZU5ld0RlY2soKTtcblx0fSwgW10pO1xuXG5cdHNldEludGVydmFsKCgpID0+IHtcblx0XHQvLyBkZWFsKFwicGxheWVyXCIpO1xuXHRcdGNvbnNvbGUubG9nKFwiMTExXCIpO1xuXHR9LCAxMDAwMCk7XG5cbiAgcmV0dXJuIChcbiAgICA8Qm94PlxuXHRcdDxUZXh0PkRlY2sgQ291bnQ6IHtwbGF5aW5nRGVjay5sZW5ndGh9PC9UZXh0PlxuICAgIDwvQm94PlxuICApO1xufTtcbm1vZHVsZS5leHBvcnRzID0gQXBwOyJdfQ==