'use strict';

const React = require('react');

const {
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const Shuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  const [playingDeck, setDeck] = React.useState([]); // const [count, setCount] = React.useState(0);

  let deck = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck2 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck3 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck4 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck5 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck6 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  deck.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6); // setDeck([
  // 	...playingDeck,
  // 	...deck
  //   ]);
  // React.useEffect(() => {
  // 	console.log('decker');
  // }, [deck])
  // React.useEffect(() => {
  // 	setTimeout(() => {
  // 		setCount(count => count + 1);
  // 	}, 1000);
  // });

  React.useEffect(() => {
    setDeck([...playingDeck, ...deck]);
  }, []);
  setInterval(() => {
    console.log('pp');
    playingDeck.pop();
  }, 4000); // setTimeout(() => {
  // 	deck.pop()
  // }, 5000);
  // const shuffleNewDeck = () => {
  // 	//event.preventDefault();
  // 	let deck1 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck2 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck3 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck4 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck5 = Shuffle({Deck}).map(a => ({...a}));
  // 	let deck6 = Shuffle({Deck}).map(a => ({...a}));
  // 	deck1.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
  // 	setDeck([
  // 	  ...playingDeck,
  // 	  ...deck1
  // 	]);
  // };
  // const deal = (person) => {
  // 	var card = playingDeck.pop();
  // 	switch (person) {
  // 		case "player":
  // 			setPlayer([...playerHand,card]);
  // 			break;
  // 		case "dealer":
  // 			setDealer([...playerHand,card]);
  // 			break;
  // 		default:
  // 			break;
  // 	}
  // };
  // React.useEffect(() => {
  //   shuffleNewDeck();
  // }, []);
  // setInterval(() => {
  // 	// deal("player");
  // 	console.log("111");
  // }, 10000);

  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Count: ", playingDeck.length, " "));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInJlbmRlciIsIlRleHQiLCJDb2xvciIsIkJveCIsIlNodWZmbGUiLCJEZWNrIiwiQXBwIiwicGxheWluZ0RlY2siLCJzZXREZWNrIiwidXNlU3RhdGUiLCJkZWNrIiwibWFwIiwiYSIsImRlY2syIiwiZGVjazMiLCJkZWNrNCIsImRlY2s1IiwiZGVjazYiLCJwdXNoIiwidXNlRWZmZWN0Iiwic2V0SW50ZXJ2YWwiLCJjb25zb2xlIiwibG9nIiwicG9wIiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBLE1BQUQ7QUFBU0MsRUFBQUEsSUFBVDtBQUFlQyxFQUFBQSxLQUFmO0FBQXNCQyxFQUFBQTtBQUF0QixJQUE2QkosT0FBTyxDQUFDLEtBQUQsQ0FBMUMsQyxDQUNBOzs7QUFDQSxNQUFNSyxPQUFPLEdBQUdMLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUNBLE1BQU1NLElBQUksR0FBR04sT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBRUEsTUFBTU8sR0FBRyxHQUFHLE1BQU07QUFDakI7QUFDQTtBQUNBLFFBQU0sQ0FBQ0MsV0FBRCxFQUFjQyxPQUFkLElBQXlCVixLQUFLLENBQUNXLFFBQU4sQ0FBZSxFQUFmLENBQS9CLENBSGlCLENBSWpCOztBQUVBLE1BQUlDLElBQUksR0FBR04sT0FBTyxDQUFDO0FBQUNDLElBQUFBO0FBQUQsR0FBRCxDQUFQLENBQWdCTSxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixHQUFMLENBQXJCLENBQVg7QUFDQSxNQUFJQyxLQUFLLEdBQUdULE9BQU8sQ0FBQztBQUFDQyxJQUFBQTtBQUFELEdBQUQsQ0FBUCxDQUFnQk0sR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosR0FBTCxDQUFyQixDQUFaO0FBQ0EsTUFBSUUsS0FBSyxHQUFHVixPQUFPLENBQUM7QUFBQ0MsSUFBQUE7QUFBRCxHQUFELENBQVAsQ0FBZ0JNLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEdBQUwsQ0FBckIsQ0FBWjtBQUNBLE1BQUlHLEtBQUssR0FBR1gsT0FBTyxDQUFDO0FBQUNDLElBQUFBO0FBQUQsR0FBRCxDQUFQLENBQWdCTSxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixHQUFMLENBQXJCLENBQVo7QUFDQSxNQUFJSSxLQUFLLEdBQUdaLE9BQU8sQ0FBQztBQUFDQyxJQUFBQTtBQUFELEdBQUQsQ0FBUCxDQUFnQk0sR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosR0FBTCxDQUFyQixDQUFaO0FBQ0EsTUFBSUssS0FBSyxHQUFHYixPQUFPLENBQUM7QUFBQ0MsSUFBQUE7QUFBRCxHQUFELENBQVAsQ0FBZ0JNLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEdBQUwsQ0FBckIsQ0FBWjtBQUVBRixFQUFBQSxJQUFJLENBQUNRLElBQUwsQ0FBVSxHQUFHTCxLQUFiLEVBQW9CLEdBQUdDLEtBQXZCLEVBQThCLEdBQUdDLEtBQWpDLEVBQXdDLEdBQUdDLEtBQTNDLEVBQWtELEdBQUdDLEtBQXJELEVBYmlCLENBZWpCO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQW5CLEVBQUFBLEtBQUssQ0FBQ3FCLFNBQU4sQ0FBZ0IsTUFBTTtBQUNyQlgsSUFBQUEsT0FBTyxDQUFDLENBQ1AsR0FBR0QsV0FESSxFQUVQLEdBQUdHLElBRkksQ0FBRCxDQUFQO0FBSUEsR0FMRCxFQUtHLEVBTEg7QUFVQVUsRUFBQUEsV0FBVyxDQUFDLE1BQU07QUFDakJDLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLElBQVo7QUFDQWYsSUFBQUEsV0FBVyxDQUFDZ0IsR0FBWjtBQUNBLEdBSFUsRUFHUixJQUhRLENBQVgsQ0F4Q2lCLENBNkNqQjtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQyxzQkFDRSxvQkFBQyxHQUFELHFCQUVGLG9CQUFDLElBQUQsbUJBQWNoQixXQUFXLENBQUNpQixNQUExQixNQUZFLENBREY7QUFNRCxDQTlGRDs7QUFnR0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnBCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3JlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbi8vIGNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IFNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUnKTtcbmNvbnN0IERlY2sgPSByZXF1aXJlKCcuL2RlY2snKTtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHQvLyBjb25zdCBbcGxheWVySGFuZCwgc2V0UGxheWVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Ly8gY29uc3QgW2RlYWxlckhhbmQsIHNldERlYWxlcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdGNvbnN0IFtwbGF5aW5nRGVjaywgc2V0RGVja10gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdC8vIGNvbnN0IFtjb3VudCwgc2V0Q291bnRdID0gUmVhY3QudXNlU3RhdGUoMCk7XG5cblx0bGV0IGRlY2sgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRsZXQgZGVjazIgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRsZXQgZGVjazMgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRsZXQgZGVjazQgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRsZXQgZGVjazUgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRsZXQgZGVjazYgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXG5cdGRlY2sucHVzaCguLi5kZWNrMiwgLi4uZGVjazMsIC4uLmRlY2s0LCAuLi5kZWNrNSwgLi4uZGVjazYpO1xuXG5cdC8vIHNldERlY2soW1xuXHQvLyBcdC4uLnBsYXlpbmdEZWNrLFxuXHQvLyBcdC4uLmRlY2tcblx0Ly8gICBdKTtcblxuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnNvbGUubG9nKCdkZWNrZXInKTtcblx0Ly8gfSwgW2RlY2tdKVxuXG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdC8vIFx0XHRzZXRDb3VudChjb3VudCA9PiBjb3VudCArIDEpO1xuXHQvLyBcdH0sIDEwMDApO1xuXHQvLyB9KTtcblxuXHRSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHRcdHNldERlY2soW1xuXHRcdFx0Li4ucGxheWluZ0RlY2ssXG5cdFx0XHQuLi5kZWNrXG5cdFx0XSk7XG5cdH0sIFtdKTtcblxuXG5cblxuXHRzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0Y29uc29sZS5sb2coJ3BwJyk7XG5cdFx0cGxheWluZ0RlY2sucG9wKCk7XG5cdH0sIDQwMDApO1xuXG5cdC8vIHNldFRpbWVvdXQoKCkgPT4ge1xuXHQvLyBcdGRlY2sucG9wKClcblx0Ly8gfSwgNTAwMCk7XG5cblx0Ly8gY29uc3Qgc2h1ZmZsZU5ld0RlY2sgPSAoKSA9PiB7XG5cdC8vIFx0Ly9ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHQvLyBcdGxldCBkZWNrMSA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdC8vIFx0bGV0IGRlY2syID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0Ly8gXHRsZXQgZGVjazMgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHQvLyBcdGxldCBkZWNrNCA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdC8vIFx0bGV0IGRlY2s1ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0Ly8gXHRsZXQgZGVjazYgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXG5cdC8vIFx0ZGVjazEucHVzaCguLi5kZWNrMiwgLi4uZGVjazMsIC4uLmRlY2s0LCAuLi5kZWNrNSwgLi4uZGVjazYpO1xuXHQvLyBcdHNldERlY2soW1xuXHQvLyBcdCAgLi4ucGxheWluZ0RlY2ssXG5cdC8vIFx0ICAuLi5kZWNrMVxuXHQvLyBcdF0pO1xuXHQvLyB9O1xuXG5cdC8vIGNvbnN0IGRlYWwgPSAocGVyc29uKSA9PiB7XG5cdC8vIFx0dmFyIGNhcmQgPSBwbGF5aW5nRGVjay5wb3AoKTtcblx0Ly8gXHRzd2l0Y2ggKHBlcnNvbikge1xuXHQvLyBcdFx0Y2FzZSBcInBsYXllclwiOlxuXHQvLyBcdFx0XHRzZXRQbGF5ZXIoWy4uLnBsYXllckhhbmQsY2FyZF0pO1xuXHQvLyBcdFx0XHRicmVhaztcblx0Ly8gXHRcdGNhc2UgXCJkZWFsZXJcIjpcblx0Ly8gXHRcdFx0c2V0RGVhbGVyKFsuLi5wbGF5ZXJIYW5kLGNhcmRdKTtcblx0Ly8gXHRcdFx0YnJlYWs7XG5cdC8vIFx0XHRkZWZhdWx0OlxuXHQvLyBcdFx0XHRicmVhaztcblx0Ly8gXHR9XG5cdC8vIH07XG5cblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gICBzaHVmZmxlTmV3RGVjaygpO1xuXHQvLyB9LCBbXSk7XG5cblx0Ly8gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHQvLyBcdC8vIGRlYWwoXCJwbGF5ZXJcIik7XG5cdC8vIFx0Y29uc29sZS5sb2coXCIxMTFcIik7XG5cdC8vIH0sIDEwMDAwKTtcblxuICByZXR1cm4gKFxuICAgIDxCb3g+XG5cblx0XHQ8VGV4dD5Db3VudDoge3BsYXlpbmdEZWNrLmxlbmd0aH0gPC9UZXh0PlxuICAgIDwvQm94PlxuICApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7Il19