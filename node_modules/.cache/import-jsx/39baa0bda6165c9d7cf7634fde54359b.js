'use strict';

const React = require('react');

const {
  render,
  Text,
  Color,
  Box
} = require('ink');

const TextInput = require('ink-text-input').default;

const Shuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  const [playerHand, setPlayer] = React.useState([]);
  const [dealerHand, setDealer] = React.useState([]); // const [playingDeck, setDeck] = React.useState([]);

  var playingDeck = [];

  const shuffleNewDeck = () => {
    //event.preventDefault();
    console.log('shuffle');
    let deck1 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck2 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck3 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck4 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck5 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    let deck6 = Shuffle({
      Deck
    }).map(a => ({ ...a
    }));
    deck1.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
    playingDeck = [...deck1]; // setDeck([
    //   ...playingDeck,
    //   ...deck1
    // ]);
  };

  const deal = person => {
    var card = playingDeck.pop();

    switch (person) {
      case "player":
        setPlayer([...playerHand, card]);
        break;

      case "dealer":
        setDealer([...playerHand, card]);
        break;

      default:
        break;
    }
  };

  React.useEffect(() => {
    shuffleNewDeck();
  }, []); // setInterval(() => {
  // 	// deal("player");
  // 	console.log("111");
  // }, 10000);

  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Deck Count: ", playingDeck.length));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInJlbmRlciIsIlRleHQiLCJDb2xvciIsIkJveCIsIlRleHRJbnB1dCIsImRlZmF1bHQiLCJTaHVmZmxlIiwiRGVjayIsIkFwcCIsInBsYXllckhhbmQiLCJzZXRQbGF5ZXIiLCJ1c2VTdGF0ZSIsImRlYWxlckhhbmQiLCJzZXREZWFsZXIiLCJwbGF5aW5nRGVjayIsInNodWZmbGVOZXdEZWNrIiwiY29uc29sZSIsImxvZyIsImRlY2sxIiwibWFwIiwiYSIsImRlY2syIiwiZGVjazMiLCJkZWNrNCIsImRlY2s1IiwiZGVjazYiLCJwdXNoIiwiZGVhbCIsInBlcnNvbiIsImNhcmQiLCJwb3AiLCJ1c2VFZmZlY3QiLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsTUFBRDtBQUFTQyxFQUFBQSxJQUFUO0FBQWVDLEVBQUFBLEtBQWY7QUFBc0JDLEVBQUFBO0FBQXRCLElBQTZCSixPQUFPLENBQUMsS0FBRCxDQUExQzs7QUFDQSxNQUFNSyxTQUFTLEdBQUdMLE9BQU8sQ0FBQyxnQkFBRCxDQUFQLENBQTBCTSxPQUE1Qzs7QUFDQSxNQUFNQyxPQUFPLEdBQUdQLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUNBLE1BQU1RLElBQUksR0FBR1IsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBRUEsTUFBTVMsR0FBRyxHQUFHLE1BQU07QUFDakIsUUFBTSxDQUFDQyxVQUFELEVBQWFDLFNBQWIsSUFBMEJaLEtBQUssQ0FBQ2EsUUFBTixDQUFlLEVBQWYsQ0FBaEM7QUFDQSxRQUFNLENBQUNDLFVBQUQsRUFBYUMsU0FBYixJQUEwQmYsS0FBSyxDQUFDYSxRQUFOLENBQWUsRUFBZixDQUFoQyxDQUZpQixDQUdqQjs7QUFFQSxNQUFJRyxXQUFXLEdBQUcsRUFBbEI7O0FBRUEsUUFBTUMsY0FBYyxHQUFHLE1BQU07QUFDNUI7QUFDQUMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksU0FBWjtBQUNBLFFBQUlDLEtBQUssR0FBR1osT0FBTyxDQUFDO0FBQUNDLE1BQUFBO0FBQUQsS0FBRCxDQUFQLENBQWdCWSxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixLQUFMLENBQXJCLENBQVo7QUFDQSxRQUFJQyxLQUFLLEdBQUdmLE9BQU8sQ0FBQztBQUFDQyxNQUFBQTtBQUFELEtBQUQsQ0FBUCxDQUFnQlksR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosS0FBTCxDQUFyQixDQUFaO0FBQ0EsUUFBSUUsS0FBSyxHQUFHaEIsT0FBTyxDQUFDO0FBQUNDLE1BQUFBO0FBQUQsS0FBRCxDQUFQLENBQWdCWSxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixLQUFMLENBQXJCLENBQVo7QUFDQSxRQUFJRyxLQUFLLEdBQUdqQixPQUFPLENBQUM7QUFBQ0MsTUFBQUE7QUFBRCxLQUFELENBQVAsQ0FBZ0JZLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEtBQUwsQ0FBckIsQ0FBWjtBQUNBLFFBQUlJLEtBQUssR0FBR2xCLE9BQU8sQ0FBQztBQUFDQyxNQUFBQTtBQUFELEtBQUQsQ0FBUCxDQUFnQlksR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosS0FBTCxDQUFyQixDQUFaO0FBQ0EsUUFBSUssS0FBSyxHQUFHbkIsT0FBTyxDQUFDO0FBQUNDLE1BQUFBO0FBQUQsS0FBRCxDQUFQLENBQWdCWSxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixLQUFMLENBQXJCLENBQVo7QUFFQUYsSUFBQUEsS0FBSyxDQUFDUSxJQUFOLENBQVcsR0FBR0wsS0FBZCxFQUFxQixHQUFHQyxLQUF4QixFQUErQixHQUFHQyxLQUFsQyxFQUF5QyxHQUFHQyxLQUE1QyxFQUFtRCxHQUFHQyxLQUF0RDtBQUNBWCxJQUFBQSxXQUFXLEdBQUcsQ0FBQyxHQUFHSSxLQUFKLENBQWQsQ0FYNEIsQ0FZNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQWhCRDs7QUFrQkEsUUFBTVMsSUFBSSxHQUFJQyxNQUFELElBQVk7QUFDeEIsUUFBSUMsSUFBSSxHQUFHZixXQUFXLENBQUNnQixHQUFaLEVBQVg7O0FBQ0EsWUFBUUYsTUFBUjtBQUNDLFdBQUssUUFBTDtBQUNDbEIsUUFBQUEsU0FBUyxDQUFDLENBQUMsR0FBR0QsVUFBSixFQUFlb0IsSUFBZixDQUFELENBQVQ7QUFDQTs7QUFDRCxXQUFLLFFBQUw7QUFDQ2hCLFFBQUFBLFNBQVMsQ0FBQyxDQUFDLEdBQUdKLFVBQUosRUFBZW9CLElBQWYsQ0FBRCxDQUFUO0FBQ0E7O0FBQ0Q7QUFDQztBQVJGO0FBVUEsR0FaRDs7QUFjQS9CLEVBQUFBLEtBQUssQ0FBQ2lDLFNBQU4sQ0FBZ0IsTUFBTTtBQUNwQmhCLElBQUFBLGNBQWM7QUFDZixHQUZELEVBRUcsRUFGSCxFQXZDaUIsQ0EyQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVDLHNCQUNFLG9CQUFDLEdBQUQscUJBQ0Ysb0JBQUMsSUFBRCx3QkFBbUJELFdBQVcsQ0FBQ2tCLE1BQS9CLENBREUsQ0FERjtBQUtELENBckREOztBQXNEQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCMUIsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7cmVuZGVyLCBUZXh0LCBDb2xvciwgQm94fSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZSgnaW5rLXRleHQtaW5wdXQnKS5kZWZhdWx0O1xuY29uc3QgU2h1ZmZsZSA9IHJlcXVpcmUoJy4vc2h1ZmZsZScpO1xuY29uc3QgRGVjayA9IHJlcXVpcmUoJy4vZGVjaycpO1xuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG5cdGNvbnN0IFtwbGF5ZXJIYW5kLCBzZXRQbGF5ZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXHRjb25zdCBbZGVhbGVySGFuZCwgc2V0RGVhbGVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Ly8gY29uc3QgW3BsYXlpbmdEZWNrLCBzZXREZWNrXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblxuXHR2YXIgcGxheWluZ0RlY2sgPSBbXTtcblxuXHRjb25zdCBzaHVmZmxlTmV3RGVjayA9ICgpID0+IHtcblx0XHQvL2V2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0Y29uc29sZS5sb2coJ3NodWZmbGUnKTtcblx0XHRsZXQgZGVjazEgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRcdGxldCBkZWNrMiA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdFx0bGV0IGRlY2szID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblx0XHRsZXQgZGVjazQgPSBTaHVmZmxlKHtEZWNrfSkubWFwKGEgPT4gKHsuLi5hfSkpO1xuXHRcdGxldCBkZWNrNSA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdFx0bGV0IGRlY2s2ID0gU2h1ZmZsZSh7RGVja30pLm1hcChhID0+ICh7Li4uYX0pKTtcblxuXHRcdGRlY2sxLnB1c2goLi4uZGVjazIsIC4uLmRlY2szLCAuLi5kZWNrNCwgLi4uZGVjazUsIC4uLmRlY2s2KTtcblx0XHRwbGF5aW5nRGVjayA9IFsuLi5kZWNrMV07XG5cdFx0Ly8gc2V0RGVjayhbXG5cdFx0Ly8gICAuLi5wbGF5aW5nRGVjayxcblx0XHQvLyAgIC4uLmRlY2sxXG5cdFx0Ly8gXSk7XG5cdH07XG5cblx0Y29uc3QgZGVhbCA9IChwZXJzb24pID0+IHtcblx0XHR2YXIgY2FyZCA9IHBsYXlpbmdEZWNrLnBvcCgpO1xuXHRcdHN3aXRjaCAocGVyc29uKSB7XG5cdFx0XHRjYXNlIFwicGxheWVyXCI6XG5cdFx0XHRcdHNldFBsYXllcihbLi4ucGxheWVySGFuZCxjYXJkXSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcImRlYWxlclwiOlxuXHRcdFx0XHRzZXREZWFsZXIoWy4uLnBsYXllckhhbmQsY2FyZF0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fTtcblxuXHRSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQgIHNodWZmbGVOZXdEZWNrKCk7XG5cdH0sIFtdKTtcblxuXHQvLyBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdC8vIFx0Ly8gZGVhbChcInBsYXllclwiKTtcblx0Ly8gXHRjb25zb2xlLmxvZyhcIjExMVwiKTtcblx0Ly8gfSwgMTAwMDApO1xuXG4gIHJldHVybiAoXG4gICAgPEJveD5cblx0XHQ8VGV4dD5EZWNrIENvdW50OiB7cGxheWluZ0RlY2subGVuZ3RofTwvVGV4dD5cbiAgICA8L0JveD5cbiAgKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IEFwcDsiXX0=