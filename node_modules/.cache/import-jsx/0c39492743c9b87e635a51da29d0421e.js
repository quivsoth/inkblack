'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const Shuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  let deck = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck2 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck3 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck4 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck5 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  let deck6 = Shuffle({
    Deck
  }).map(a => ({ ...a
  }));
  deck.push(...deck2, ...deck3, ...deck4, ...deck5, ...deck6);
  const [playingDeck, setDeck] = React.useState(deck);
  const [playerHand, setPlayer] = React.useState([]);
  const [dealerHand, setDealer] = React.useState([]); // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  React.useEffect(() => {
    const timer = setInterval(() => handleRemoveItem(), 1000);
    return () => {
      clearInterval(timer);
    };
  }, []);

  const handleRemoveItem = () => {
    let e = playingDeck[playingDeck.length - 1];
    let newArray = playingDeck.filter(function (remainder) {
      return remainder != e;
    });
    console.log(newArray.length);
    setDeck(newArray); // setDeck(playingDeck.filter((e)=>(e !== e)));

    console.log(playingDeck.length);
  };

  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Card Count: ", playingDeck.length, " "));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiU2h1ZmZsZSIsIkRlY2siLCJBcHAiLCJkZWNrIiwibWFwIiwiYSIsImRlY2syIiwiZGVjazMiLCJkZWNrNCIsImRlY2s1IiwiZGVjazYiLCJwdXNoIiwicGxheWluZ0RlY2siLCJzZXREZWNrIiwidXNlU3RhdGUiLCJwbGF5ZXJIYW5kIiwic2V0UGxheWVyIiwiZGVhbGVySGFuZCIsInNldERlYWxlciIsInVzZUVmZmVjdCIsInRpbWVyIiwic2V0SW50ZXJ2YWwiLCJoYW5kbGVSZW1vdmVJdGVtIiwiY2xlYXJJbnRlcnZhbCIsImUiLCJsZW5ndGgiLCJuZXdBcnJheSIsImZpbHRlciIsInJlbWFpbmRlciIsImNvbnNvbGUiLCJsb2ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQSxNQUFYO0FBQW1CQyxFQUFBQSxJQUFuQjtBQUF5QkMsRUFBQUEsS0FBekI7QUFBZ0NDLEVBQUFBO0FBQWhDLElBQXVDTCxPQUFPLENBQUMsS0FBRCxDQUFwRCxDLENBQ0E7OztBQUNBLE1BQU1NLE9BQU8sR0FBR04sT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBQ0EsTUFBTU8sSUFBSSxHQUFHUCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFFQSxNQUFNUSxHQUFHLEdBQUcsTUFBTTtBQUNqQixNQUFJQyxJQUFJLEdBQUdILE9BQU8sQ0FBQztBQUFDQyxJQUFBQTtBQUFELEdBQUQsQ0FBUCxDQUFnQkcsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosR0FBTCxDQUFyQixDQUFYO0FBQ0EsTUFBSUMsS0FBSyxHQUFHTixPQUFPLENBQUM7QUFBQ0MsSUFBQUE7QUFBRCxHQUFELENBQVAsQ0FBZ0JHLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEdBQUwsQ0FBckIsQ0FBWjtBQUNBLE1BQUlFLEtBQUssR0FBR1AsT0FBTyxDQUFDO0FBQUNDLElBQUFBO0FBQUQsR0FBRCxDQUFQLENBQWdCRyxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixHQUFMLENBQXJCLENBQVo7QUFDQSxNQUFJRyxLQUFLLEdBQUdSLE9BQU8sQ0FBQztBQUFDQyxJQUFBQTtBQUFELEdBQUQsQ0FBUCxDQUFnQkcsR0FBaEIsQ0FBb0JDLENBQUMsS0FBSyxFQUFDLEdBQUdBO0FBQUosR0FBTCxDQUFyQixDQUFaO0FBQ0EsTUFBSUksS0FBSyxHQUFHVCxPQUFPLENBQUM7QUFBQ0MsSUFBQUE7QUFBRCxHQUFELENBQVAsQ0FBZ0JHLEdBQWhCLENBQW9CQyxDQUFDLEtBQUssRUFBQyxHQUFHQTtBQUFKLEdBQUwsQ0FBckIsQ0FBWjtBQUNBLE1BQUlLLEtBQUssR0FBR1YsT0FBTyxDQUFDO0FBQUNDLElBQUFBO0FBQUQsR0FBRCxDQUFQLENBQWdCRyxHQUFoQixDQUFvQkMsQ0FBQyxLQUFLLEVBQUMsR0FBR0E7QUFBSixHQUFMLENBQXJCLENBQVo7QUFDQUYsRUFBQUEsSUFBSSxDQUFDUSxJQUFMLENBQVUsR0FBR0wsS0FBYixFQUFvQixHQUFHQyxLQUF2QixFQUE4QixHQUFHQyxLQUFqQyxFQUF3QyxHQUFHQyxLQUEzQyxFQUFrRCxHQUFHQyxLQUFyRDtBQUVBLFFBQU0sQ0FBQ0UsV0FBRCxFQUFjQyxPQUFkLElBQXlCcEIsS0FBSyxDQUFDcUIsUUFBTixDQUFlWCxJQUFmLENBQS9CO0FBQ0EsUUFBTSxDQUFDWSxVQUFELEVBQWFDLFNBQWIsSUFBMEJ2QixLQUFLLENBQUNxQixRQUFOLENBQWUsRUFBZixDQUFoQztBQUNBLFFBQU0sQ0FBQ0csVUFBRCxFQUFhQyxTQUFiLElBQTBCekIsS0FBSyxDQUFDcUIsUUFBTixDQUFlLEVBQWYsQ0FBaEMsQ0FYaUIsQ0FhakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUFyQixFQUFBQSxLQUFLLENBQUMwQixTQUFOLENBQWdCLE1BQU07QUFDckIsVUFBTUMsS0FBSyxHQUFHQyxXQUFXLENBQUMsTUFBTUMsZ0JBQWdCLEVBQXZCLEVBQTJCLElBQTNCLENBQXpCO0FBQ0EsV0FBTyxNQUFNO0FBQ1pDLE1BQUFBLGFBQWEsQ0FBQ0gsS0FBRCxDQUFiO0FBQ0EsS0FGRDtBQUdBLEdBTEQsRUFLRyxFQUxIOztBQU9BLFFBQU1FLGdCQUFnQixHQUFHLE1BQU07QUFDOUIsUUFBSUUsQ0FBQyxHQUFHWixXQUFXLENBQUNBLFdBQVcsQ0FBQ2EsTUFBWixHQUFxQixDQUF0QixDQUFuQjtBQUNBLFFBQUlDLFFBQVEsR0FBR2QsV0FBVyxDQUFDZSxNQUFaLENBQW1CLFVBQVNDLFNBQVQsRUFBb0I7QUFDckQsYUFBT0EsU0FBUyxJQUFJSixDQUFwQjtBQUNBLEtBRmMsQ0FBZjtBQUdBSyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUosUUFBUSxDQUFDRCxNQUFyQjtBQUNBWixJQUFBQSxPQUFPLENBQUNhLFFBQUQsQ0FBUCxDQU44QixDQU85Qjs7QUFDQUcsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlsQixXQUFXLENBQUNhLE1BQXhCO0FBQ0EsR0FURDs7QUFVQSxzQkFDQyxvQkFBQyxHQUFELHFCQUNDLG9CQUFDLElBQUQsd0JBQW1CYixXQUFXLENBQUNhLE1BQS9CLE1BREQsQ0FERDtBQUtBLENBeENEOztBQTBDQU0sTUFBTSxDQUFDQyxPQUFQLEdBQWlCOUIsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlSW5wdXQsIHJlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbi8vIGNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IFNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUnKTtcbmNvbnN0IERlY2sgPSByZXF1aXJlKCcuL2RlY2snKTtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHRsZXQgZGVjayA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdGxldCBkZWNrMiA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdGxldCBkZWNrMyA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdGxldCBkZWNrNCA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdGxldCBkZWNrNSA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdGxldCBkZWNrNiA9IFNodWZmbGUoe0RlY2t9KS5tYXAoYSA9PiAoey4uLmF9KSk7XG5cdGRlY2sucHVzaCguLi5kZWNrMiwgLi4uZGVjazMsIC4uLmRlY2s0LCAuLi5kZWNrNSwgLi4uZGVjazYpO1xuXG5cdGNvbnN0IFtwbGF5aW5nRGVjaywgc2V0RGVja10gPSBSZWFjdC51c2VTdGF0ZShkZWNrKTtcblx0Y29uc3QgW3BsYXllckhhbmQsIHNldFBsYXllcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdGNvbnN0IFtkZWFsZXJIYW5kLCBzZXREZWFsZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXG5cdC8vIHNldERlY2soW1xuXHQvLyBcdC4uLnBsYXlpbmdEZWNrLFxuXHQvLyBcdC4uLmRlY2tcblx0Ly8gXSk7XG5cblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IGhhbmRsZVJlbW92ZUl0ZW0oKSwgMTAwMCk7XG5cdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHRcdH07XG5cdH0sIFtdKTtcblxuXHRjb25zdCBoYW5kbGVSZW1vdmVJdGVtID0gKCkgPT4ge1xuXHRcdGxldCBlID0gcGxheWluZ0RlY2tbcGxheWluZ0RlY2subGVuZ3RoIC0gMV07XG5cdFx0bGV0IG5ld0FycmF5ID0gcGxheWluZ0RlY2suZmlsdGVyKGZ1bmN0aW9uKHJlbWFpbmRlcikge1xuXHRcdFx0cmV0dXJuIHJlbWFpbmRlciAhPSBlO1xuXHRcdH0pO1xuXHRcdGNvbnNvbGUubG9nKG5ld0FycmF5Lmxlbmd0aCk7XG5cdFx0c2V0RGVjayhuZXdBcnJheSk7XG5cdFx0Ly8gc2V0RGVjayhwbGF5aW5nRGVjay5maWx0ZXIoKGUpPT4oZSAhPT0gZSkpKTtcblx0XHRjb25zb2xlLmxvZyhwbGF5aW5nRGVjay5sZW5ndGgpO1xuXHR9XG5cdHJldHVybiAoXG5cdFx0PEJveD5cblx0XHRcdDxUZXh0PkNhcmQgQ291bnQ6IHtwbGF5aW5nRGVjay5sZW5ndGh9IDwvVGV4dD5cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwOyJdfQ==