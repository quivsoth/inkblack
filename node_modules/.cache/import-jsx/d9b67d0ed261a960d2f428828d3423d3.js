'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const Counter = require('./counter');

const MyBigList = require('./mybiglist');

const App = () => {
  const [playingDeck, setDeck] = React.useState(MultiShuffle());
  const [value, setValue] = useState("");
  const addHello = useCallback(() => setValue(value + "Hello!"), [value]); // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // const [counter, setCounter] = React.useState(0);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);
  // React.useEffect(() => {
  // 	const timer = setInterval(() => {
  // 			//console.log('Intervalled');
  // 			playingDeck.pop();
  // 			setCounter(Math.round(Math.random() * 15));
  // 		}
  // 		,200);
  // 	return () => {
  // 		clearInterval(timer);
  // 	};
  // }, []);

  return /*#__PURE__*/React.createElement(Box, null);
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkNvdW50ZXIiLCJNeUJpZ0xpc3QiLCJBcHAiLCJwbGF5aW5nRGVjayIsInNldERlY2siLCJ1c2VTdGF0ZSIsInZhbHVlIiwic2V0VmFsdWUiLCJhZGRIZWxsbyIsInVzZUNhbGxiYWNrIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBLFFBQUQ7QUFBV0MsRUFBQUEsTUFBWDtBQUFtQkMsRUFBQUEsSUFBbkI7QUFBeUJDLEVBQUFBLEtBQXpCO0FBQWdDQyxFQUFBQTtBQUFoQyxJQUF1Q0wsT0FBTyxDQUFDLEtBQUQsQ0FBcEQsQyxDQUNBOzs7QUFDQSxNQUFNTSxZQUFZLEdBQUdOLE9BQU8sQ0FBQyxXQUFELENBQTVCOztBQUNBLE1BQU1PLElBQUksR0FBR1AsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBQ0EsTUFBTVEsT0FBTyxHQUFHUixPQUFPLENBQUMsV0FBRCxDQUF2Qjs7QUFDQSxNQUFNUyxTQUFTLEdBQUdULE9BQU8sQ0FBQyxhQUFELENBQXpCOztBQUVBLE1BQU1VLEdBQUcsR0FBRyxNQUFNO0FBRWpCLFFBQU0sQ0FBQ0MsV0FBRCxFQUFjQyxPQUFkLElBQXlCYixLQUFLLENBQUNjLFFBQU4sQ0FBZVAsWUFBWSxFQUEzQixDQUEvQjtBQUVBLFFBQU0sQ0FBQ1EsS0FBRCxFQUFRQyxRQUFSLElBQW9CRixRQUFRLENBQUMsRUFBRCxDQUFsQztBQUNBLFFBQU1HLFFBQVEsR0FBR0MsV0FBVyxDQUFDLE1BQU1GLFFBQVEsQ0FBQ0QsS0FBSyxHQUFHLFFBQVQsQ0FBZixFQUFtQyxDQUFDQSxLQUFELENBQW5DLENBQTVCLENBTGlCLENBUWpCO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQkFDQyxvQkFBQyxHQUFELE9BREQ7QUFNQSxDQW5DRDs7QUFxQ0FJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlQsR0FBakIsQyxDQU1BO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlSW5wdXQsIHJlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbi8vIGNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IE11bHRpU2h1ZmZsZSA9IHJlcXVpcmUoJy4vc2h1ZmZsZScpO1xuY29uc3QgRGVjayA9IHJlcXVpcmUoJy4vZGVjaycpO1xuY29uc3QgQ291bnRlciA9IHJlcXVpcmUoJy4vY291bnRlcicpO1xuY29uc3QgTXlCaWdMaXN0ID0gcmVxdWlyZSgnLi9teWJpZ2xpc3QnKTtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXG5cdGNvbnN0IFtwbGF5aW5nRGVjaywgc2V0RGVja10gPSBSZWFjdC51c2VTdGF0ZShNdWx0aVNodWZmbGUoKSk7XG5cblx0Y29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VTdGF0ZShcIlwiKTtcblx0Y29uc3QgYWRkSGVsbG8gPSB1c2VDYWxsYmFjaygoKSA9PiBzZXRWYWx1ZSh2YWx1ZSArIFwiSGVsbG8hXCIpLCBbdmFsdWVdKTtcbiAgXG5cblx0Ly8gY29uc3QgW3BsYXllckhhbmQsIHNldFBsYXllcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cdC8vIGNvbnN0IFtkZWFsZXJIYW5kLCBzZXREZWFsZXJdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXHQvLyBjb25zdCBbY291bnRlciwgc2V0Q291bnRlcl0gPSBSZWFjdC51c2VTdGF0ZSgwKTtcblxuXHQvLyBzZXREZWNrKFtcblx0Ly8gXHQuLi5wbGF5aW5nRGVjayxcblx0Ly8gXHQuLi5kZWNrXG5cdC8vIF0pO1xuXG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Y29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdC8vIFx0XHRcdC8vY29uc29sZS5sb2coJ0ludGVydmFsbGVkJyk7XG5cdC8vIFx0XHRcdHBsYXlpbmdEZWNrLnBvcCgpO1xuXHQvLyBcdFx0XHRzZXRDb3VudGVyKE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDE1KSk7XG5cdC8vIFx0XHR9XG5cdC8vIFx0XHQsMjAwKTtcblx0Ly8gXHRyZXR1cm4gKCkgPT4ge1xuXHQvLyBcdFx0Y2xlYXJJbnRlcnZhbCh0aW1lcik7XG5cdC8vIFx0fTtcblx0Ly8gfSwgW10pO1xuXG5cdHJldHVybiAoXG5cdFx0PEJveD5cblx0XHRcdHsvKiA8VGV4dD5DYXJkIENvdW50OiB7cGxheWluZ0RlY2subGVuZ3RofSA8L1RleHQ+XG5cdFx0XHQ8Q291bnRlciBhZGRIZWxsbz17YWRkSGVsbG99IG15T2JqZWN0PXt7IGtleTogXCJ2YWx1ZVwiIH19IC8+ICovfVxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG5cblxuXG5cblxuLy8gaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG4vLyBpbXBvcnQgdXNlU2VhcmNoIGZyb20gJy4vZmV0Y2gtaXRlbXMnO1xuXG4vLyBmdW5jdGlvbiBNeVBhcmVudCh7IHRlcm0gfSkge1xuLy8gICBjb25zdCBoYW5kbGVDbGljayA9IHVzZUNhbGxiYWNrKChpdGVtKSA9PiB7XG4vLyAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkICcsIGl0ZW0pO1xuLy8gICB9LCBbdGVybV0pO1xuXG4vLyAgIGNvbnN0IGl0ZW1zID0gdXNlU2VhcmNoKHRlcm0pO1xuXG4vLyAgIHJldHVybiAoXG4vLyAgICAgPE15QmlnTGlzdFxuLy8gICAgICAgaXRlbXM9e2l0ZW1zfVxuLy8gICAgICAgaGFuZGxlQ2xpY2s9e2hhbmRsZUNsaWNrfVxuLy8gICAgIC8+XG4vLyAgICk7XG4vLyB9Il19