'use strict';

const React = require('react');

const {
  useInput,
  render,
  Text,
  Color,
  Box
} = require('ink'); // const TextInput = require('ink-text-input').default;


const MultiShuffle = require('./shuffle');

const Deck = require('./deck');

const App = () => {
  const [playingDeck, setDeck] = React.useState(MultiShuffle()); // const [playerHand, setPlayer] = React.useState([]);
  // const [dealerHand, setDealer] = React.useState([]);
  // setDeck([
  // 	...playingDeck,
  // 	...deck
  // ]);

  React.useEffect(() => {
    const timer = setInterval(() => {
      // setDeck([
      console.log('.'); // 	...playingDeck,
      // 	...deck
      // ]);

      var array = [...playingDeck]; // make a separate copy of the array

      array.pop(); // setDeck(array);

      setDeck([...playingDeck, ...array]);
      console.log(array.length);
    }, 1000);
    return () => {
      clearInterval(timer);
    };
  }, []);
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, "Card Count: ", playingDeck.length, " "));
};

module.exports = App; // import React, { useCallback } from 'react';
// import useSearch from './fetch-items';
// function MyParent({ term }) {
//   const handleClick = useCallback((item) => {
//     console.log('You clicked ', item);
//   }, [term]);
//   const items = useSearch(term);
//   return (
//     <MyBigList
//       items={items}
//       handleClick={handleClick}
//     />
//   );
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZUlucHV0IiwicmVuZGVyIiwiVGV4dCIsIkNvbG9yIiwiQm94IiwiTXVsdGlTaHVmZmxlIiwiRGVjayIsIkFwcCIsInBsYXlpbmdEZWNrIiwic2V0RGVjayIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidGltZXIiLCJzZXRJbnRlcnZhbCIsImNvbnNvbGUiLCJsb2ciLCJhcnJheSIsInBvcCIsImxlbmd0aCIsImNsZWFySW50ZXJ2YWwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQSxNQUFYO0FBQW1CQyxFQUFBQSxJQUFuQjtBQUF5QkMsRUFBQUEsS0FBekI7QUFBZ0NDLEVBQUFBO0FBQWhDLElBQXVDTCxPQUFPLENBQUMsS0FBRCxDQUFwRCxDLENBQ0E7OztBQUNBLE1BQU1NLFlBQVksR0FBR04sT0FBTyxDQUFDLFdBQUQsQ0FBNUI7O0FBQ0EsTUFBTU8sSUFBSSxHQUFHUCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFJQSxNQUFNUSxHQUFHLEdBQUcsTUFBTTtBQUNqQixRQUFNLENBQUNDLFdBQUQsRUFBY0MsT0FBZCxJQUF5QlgsS0FBSyxDQUFDWSxRQUFOLENBQWVMLFlBQVksRUFBM0IsQ0FBL0IsQ0FEaUIsQ0FFakI7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBUCxFQUFBQSxLQUFLLENBQUNhLFNBQU4sQ0FBZ0IsTUFBTTtBQUNyQixVQUFNQyxLQUFLLEdBQUdDLFdBQVcsQ0FBQyxNQUFNO0FBQy9CO0FBQ0NDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLEdBQVosRUFGOEIsQ0FHOUI7QUFDQTtBQUNBOztBQUVBLFVBQUlDLEtBQUssR0FBRyxDQUFDLEdBQUdSLFdBQUosQ0FBWixDQVA4QixDQU9BOztBQUM5QlEsTUFBQUEsS0FBSyxDQUFDQyxHQUFOLEdBUjhCLENBUzlCOztBQUNBUixNQUFBQSxPQUFPLENBQUMsQ0FDTixHQUFHRCxXQURHLEVBRU4sR0FBR1EsS0FGRyxDQUFELENBQVA7QUFLQUYsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlDLEtBQUssQ0FBQ0UsTUFBbEI7QUFDQSxLQWhCdUIsRUFpQnZCLElBakJ1QixDQUF6QjtBQWtCQSxXQUFPLE1BQU07QUFDWkMsTUFBQUEsYUFBYSxDQUFDUCxLQUFELENBQWI7QUFDQSxLQUZEO0FBR0EsR0F0QkQsRUFzQkcsRUF0Qkg7QUF1QkEsc0JBQ0Msb0JBQUMsR0FBRCxxQkFDQyxvQkFBQyxJQUFELHdCQUFtQkosV0FBVyxDQUFDVSxNQUEvQixNQURELENBREQ7QUFNQSxDQXhDRDs7QUEwQ0FFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmQsR0FBakIsQyxDQU1BO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlSW5wdXQsIHJlbmRlciwgVGV4dCwgQ29sb3IsIEJveH0gPSByZXF1aXJlKCdpbmsnKTtcbi8vIGNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IE11bHRpU2h1ZmZsZSA9IHJlcXVpcmUoJy4vc2h1ZmZsZScpO1xuY29uc3QgRGVjayA9IHJlcXVpcmUoJy4vZGVjaycpO1xuXG5cblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHRjb25zdCBbcGxheWluZ0RlY2ssIHNldERlY2tdID0gUmVhY3QudXNlU3RhdGUoTXVsdGlTaHVmZmxlKCkpO1xuXHQvLyBjb25zdCBbcGxheWVySGFuZCwgc2V0UGxheWVyXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblx0Ly8gY29uc3QgW2RlYWxlckhhbmQsIHNldERlYWxlcl0gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cblxuXHQvLyBzZXREZWNrKFtcblx0Ly8gXHQuLi5wbGF5aW5nRGVjayxcblx0Ly8gXHQuLi5kZWNrXG5cdC8vIF0pO1xuXG5cdFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0Y29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0XHQvLyBzZXREZWNrKFtcblx0XHRcdFx0Y29uc29sZS5sb2coJy4nKTtcblx0XHRcdFx0Ly8gXHQuLi5wbGF5aW5nRGVjayxcblx0XHRcdFx0Ly8gXHQuLi5kZWNrXG5cdFx0XHRcdC8vIF0pO1xuXG5cdFx0XHRcdHZhciBhcnJheSA9IFsuLi5wbGF5aW5nRGVja107IC8vIG1ha2UgYSBzZXBhcmF0ZSBjb3B5IG9mIHRoZSBhcnJheVxuXHRcdFx0XHRhcnJheS5wb3AoKTtcblx0XHRcdFx0Ly8gc2V0RGVjayhhcnJheSk7XG5cdFx0XHRcdHNldERlY2soW1xuXHRcdFx0XHRcdFx0Li4ucGxheWluZ0RlY2ssXG5cdFx0XHRcdFx0XHQuLi5hcnJheVxuXHRcdFx0XHRcdF0pO1xuXG5cdFx0XHRcdGNvbnNvbGUubG9nKGFycmF5Lmxlbmd0aCk7XG5cdFx0XHR9XG5cdFx0XHQsMTAwMCk7XG5cdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdGNsZWFySW50ZXJ2YWwodGltZXIpO1xuXHRcdH07XG5cdH0sIFtdKTtcblx0cmV0dXJuIChcblx0XHQ8Qm94PlxuXHRcdFx0PFRleHQ+Q2FyZCBDb3VudDoge3BsYXlpbmdEZWNrLmxlbmd0aH0gPC9UZXh0PlxuXHRcdFx0ey8qIDxUZXh0PkNvdW50OiB7Y291bnR9PC9UZXh0PiAqL31cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuXG5cblxuXG5cbi8vIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuLy8gaW1wb3J0IHVzZVNlYXJjaCBmcm9tICcuL2ZldGNoLWl0ZW1zJztcblxuLy8gZnVuY3Rpb24gTXlQYXJlbnQoeyB0ZXJtIH0pIHtcbi8vICAgY29uc3QgaGFuZGxlQ2xpY2sgPSB1c2VDYWxsYmFjaygoaXRlbSkgPT4ge1xuLy8gICAgIGNvbnNvbGUubG9nKCdZb3UgY2xpY2tlZCAnLCBpdGVtKTtcbi8vICAgfSwgW3Rlcm1dKTtcblxuLy8gICBjb25zdCBpdGVtcyA9IHVzZVNlYXJjaCh0ZXJtKTtcblxuLy8gICByZXR1cm4gKFxuLy8gICAgIDxNeUJpZ0xpc3Rcbi8vICAgICAgIGl0ZW1zPXtpdGVtc31cbi8vICAgICAgIGhhbmRsZUNsaWNrPXtoYW5kbGVDbGlja31cbi8vICAgICAvPlxuLy8gICApO1xuLy8gfSJdfQ==